diff -urN version.h version.h
--- version.h	Tue Apr 23 16:26:04 2002
+++ version.h	Mon Apr 22 23:03:38 2002
@@ -0,0 +1,27 @@
+/*
+ * Sylpheed -- a GTK+ based, lightweight, and fast e-mail client
+ * Copyright (C) 1999-2001 Hiroyuki Yamamoto
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
+ */
+ 
+#ifndef __VERSION_H__
+#define __VERSION_H__
+
+#define PACKAGE			"sylpheed"
+#define VERSION			"0.7.5claws17 WIN32"
+#define PROG_VERSION	"Sylpheed version "VERSION
+
+#endif /* __VERSION_H__ */
diff -urN config.h config.h
--- config.h	Fri Apr 19 02:24:10 2002
+++ config.h	Sun Apr 28 04:49:04 2002
@@ -0,0 +1,389 @@
+/* config.h.in.  Generated automatically from configure.in by autoheader 2.13.  */
+
+/* Define to 1 if translation of program messages to the user's native language
+   is requested. */
+#define ENABLE_NLS 1
+//tm/* #undef HAVE_CATGETS */
+/* Define if the GNU gettext() function is already present or preinstalled. */
+#define HAVE_GETTEXT 1
+/* Define if your <locale.h> file defines LC_MESSAGES. */
+#undef HAVE_LC_MESSAGES
+
+/* #undef HAVE_STPCPY */
+
+//#define HAVE_GDK_PIXBUF 1
+#undef HAVE_GDK_PIXBUF
+#undef HAVE_GDK_IMLIB
+
+#undef USE_XIM
+
+/* OK: include gthread-2.0.lib * Whether to use multithread or not  */
+#undef USE_THREADS
+
+/* Define if you want IPv6 support.  */
+#undef INET6
+
+/* GPGME has no VC project * Define if you use GPGME to support OpenPGP */
+//#undef USE_GPGME
+#define USE_GPGME 1
+
+/* Define if you use PSPELL to support spell checking */
+/* #undef USE_PSPELL */
+
+/* Define PSPELL's default directory */
+/* #undef PSPELL_PATH */
+
+/* Define if you use OpenSSL to support SSL */
+#define USE_SSL 1
+
+/* Define if you want JPilot support in addressbook.  */
+#undef USE_JPILOT
+
+/* OPENLDAP doesnt compile * Define if you want LDAP support in addressbook.  */
+#undef USE_LDAP
+
+/* Define to `unsigned int' if <stddef.h> or <wchar.h> doesn't define.  */
+#undef wint_t
+
+/* Used to test for a u32 typedef */
+#undef HAVE_U32_TYPEDEF
+
+
+#define CLAWS 1
+
+//#define PACKAGE_DATA_DIR "/usr/local/share/sylpheed"
+
+/* Define to one of _getb67, GETB67, getb67 for Cray-2 and Cray-YMP systems.
+   This function is required for alloca.c support on those systems.  */
+
+#undef CRAY_STACKSEG_END
+
+/* Define if using alloca.c.  */
+#undef C_ALLOCA
+
+/* Define to 1 if translation of program messages to the user's native
+   language is requested. */
+//#define ENABLE_NLS 1
+
+/* Define if you have alloca, as a function or macro.  */
+#undef HAVE_ALLOCA
+
+/* Define if you have <alloca.h> and it should be used (not on Ultrix).  */
+#undef HAVE_ALLOCA_H
+
+/* Define if you have the <argz.h> header file.  */
+#undef HAVE_ARGZ_H
+
+/* Define if you have the dcgettext function.  */
+#undef HAVE_DCGETTEXT
+
+/* Define if you have the <dirent.h> header file.  */
+#undef HAVE_DIRENT_H
+
+/* Define if you have the <dlfcn.h> header file.  */
+#undef HAVE_DLFCN_H
+
+/* Define if you have the fchmod function.  */
+#undef HAVE_FCHMOD
+
+/* Define if you have the <fcntl.h> header file.  */
+#define HAVE_FCNTL_H 1
+
+/* Define if you have the feof_unlocked function.  */
+#undef HAVE_FEOF_UNLOCKED
+
+/* Define if you have the fgets_unlocked function.  */
+#undef HAVE_FGETS_UNLOCKED
+
+/* Define if you have the flock function.  */
+#undef HAVE_FLOCK
+
+/* Define if you have the getcwd function.  */
+#undef HAVE_GETCWD
+
+/* Define if you have the getegid function.  */
+#undef HAVE_GETEGID
+
+/* Define if you have the geteuid function.  */
+#undef HAVE_GETEUID
+
+/* Define if you have the getgid function.  */
+#undef HAVE_GETGID
+
+/* Define if you have the gethostname function.  */
+#undef HAVE_GETHOSTNAME
+
+/* Define if you have the getpagesize function.  */
+#undef HAVE_GETPAGESIZE
+
+/* Define if the GNU gettext() function is already present or preinstalled. */
+//#define HAVE_GETTEXT 1
+
+/* Define if you have the getuid function.  */
+#undef HAVE_GETUID
+
+/* Define if you have the iconv() function. */
+#define HAVE_ICONV 1
+
+/* Define if you have the inet_addr function.  */
+#undef HAVE_INET_ADDR
+
+/* Define if you have the inet_aton function.  */
+#undef HAVE_INET_ATON
+
+/* Define if you have the <inttypes.h> header file. */
+//tm#define HAVE_INTTYPES_H 1
+
+/* Define if you have the iswalnum function.  */
+#define HAVE_ISWALNUM 1
+
+/* Define if you have the iswspace function.  */
+#define HAVE_ISWSPACE 1
+
+/* Define if you have <langinfo.h> and nl_langinfo(CODESET). */
+#undef HAVE_LANGINFO_CODESET
+
+/* Define if you have the <lber.h> header file.  */
+#undef HAVE_LBER_H
+
+/* Define if your <locale.h> file defines LC_MESSAGES. */
+//#define HAVE_LC_MESSAGES 1
+
+/* Define if you have the <ldap.h> header file.  */
+#undef HAVE_LDAP_H
+
+/* Define if you have the compface library (-lcompface).  */
+#define HAVE_LIBCOMPFACE 1
+
+/* Define if you have the jconv library (-ljconv).  */
+#define HAVE_LIBJCONV 1
+//#undef HAVE_LIBJCONV
+
+/* Define if you have the <libpisock/pi-address.h> header file.  */
+#undef HAVE_LIBPISOCK_PI_ADDRESS_H
+
+/* Define if you have the <libpisock/pi-appinfo.h> header file.  */
+#undef HAVE_LIBPISOCK_PI_APPINFO_H
+
+/* Define if you have the <libpisock/pi-args.h> header file.  */
+#undef HAVE_LIBPISOCK_PI_ARGS_H
+
+/* Define if you have the xpg4 library (-lxpg4).  */
+#undef HAVE_LIBXPG4
+
+/* Define if you have the <limits.h> header file.  */
+#undef HAVE_LIMITS_H
+
+/* Define if you have the <locale.h> header file.  */
+#define HAVE_LOCALE_H 1
+
+/* Define if you have the lockf function.  */
+#undef HAVE_LOCKF
+
+/* Define if you have the <malloc.h> header file.  */
+#undef HAVE_MALLOC_H
+
+/* Define if you have the <memory.h> header file. */
+//#define HAVE_MEMORY_H 1
+
+/* Define if you have the mempcpy function.  */
+#undef HAVE_MEMPCPY
+
+/* Define if you have the mkdir function.  */
+#undef HAVE_MKDIR
+
+/* Define if you have the mkstemp function.  */
+#undef HAVE_MKSTEMP
+
+/* Define if you have the mktime function.  */
+#undef HAVE_MKTIME
+
+/* Define if you have a working `mmap' system call.  */
+#undef HAVE_MMAP
+
+/* Define if you have the munmap function.  */
+#undef HAVE_MUNMAP
+
+/* Define if you have the <ndir.h> header file.  */
+#undef HAVE_NDIR_H
+
+/* Define if you have the <nl_types.h> header file.  */
+#undef HAVE_NL_TYPES_H
+
+/* Define if you have the <paths.h> header file.  */
+#undef HAVE_PATHS_H
+
+/* Define if you have the <pi-address.h> header file.  */
+#undef HAVE_PI_ADDRESS_H
+
+/* Define if you have the <pi-appinfo.h> header file.  */
+#undef HAVE_PI_APPINFO_H
+
+/* Define if you have the <pi-args.h> header file.  */
+#undef HAVE_PI_ARGS_H
+
+/* Define if you have the <pthread.h> header file.  */
+#undef HAVE_PTHREAD_H
+
+/* Define if you have the putenv function.  */
+#undef HAVE_PUTENV
+
+/* Define if you have the setenv function.  */
+#undef HAVE_SETENV
+
+/* Define if you have the setlocale function.  */
+#undef HAVE_SETLOCALE
+
+/* Define if you have the socket function.  */
+#undef HAVE_SOCKET
+
+/* Define if you have the <stddef.h> header file.  */
+#undef HAVE_STDDEF_H
+
+/* Define if you have the <stdint.h> header file. */
+//#define HAVE_STDINT_H 1
+
+/* Define if you have the <stdlib.h> header file.  */
+#define HAVE_STDLIB_H 1
+
+/* Define if you have the stpcpy function.  */
+#undef HAVE_STPCPY
+
+/* Define if you have the strcasecmp function.  */
+#undef HAVE_STRCASECMP
+
+/* Define if you have the strchr function.  */
+#undef HAVE_STRCHR
+
+/* Define if you have the strdup function.  */
+#undef HAVE_STRDUP
+
+/* Define if you have the <strings.h> header file. */
+//#define HAVE_STRINGS_H 1
+
+/* Define if you have the <string.h> header file.  */
+#define HAVE_STRING_H 1
+
+/* Define if you have the strstr function.  */
+#undef HAVE_STRSTR
+
+/* Define if you have the strtoul function.  */
+#undef HAVE_STRTOUL
+
+/* Define if you have the <sys/dir.h> header file.  */
+#undef HAVE_SYS_DIR_H
+
+/* Define if you have the <sys/file.h> header file.  */
+#undef HAVE_SYS_FILE_H
+
+/* Define if you have the <sys/ndir.h> header file.  */
+#undef HAVE_SYS_NDIR_H
+
+/* Define if you have the <sys/param.h> header file.  */
+#undef HAVE_SYS_PARAM_H
+
+/* Define if you have the <sys/stat.h> header file. */
+//#define HAVE_SYS_STAT_H 1
+
+/* Define if you have the <sys/types.h> header file. */
+//#define HAVE_SYS_TYPES_H 1
+
+/* Define if you have the <sys/utsname.h> header file.  */
+#undef HAVE_SYS_UTSNAME_H
+
+/* Define if you have <sys/wait.h> that is POSIX.1 compatible.  */
+#undef HAVE_SYS_WAIT_H
+
+/* Define if you have the towlower function.  */
+#define HAVE_TOWLOWER 1
+
+/* Define if you have the tsearch function.  */
+#undef HAVE_TSEARCH
+
+/* Define if you have the uname function.  */
+#undef HAVE_UNAME
+
+/* Define if you have the <unistd.h> header file.  */
+#undef HAVE_UNISTD_H
+
+/* Define if you have the <wchar.h> header file.  */
+#define HAVE_WCHAR_H 1
+
+/* Define if you have the wcscpy function.  */
+#define HAVE_WCSCPY 1
+
+/* Define if you have the wcslen function.  */
+#define HAVE_WCSLEN 1
+
+/* Define if you have the wcsncpy function.  */
+#define HAVE_WCSNCPY 1
+
+/* Define if you have the wcsstr function.  */
+#define HAVE_WCSSTR 1
+
+/* Define if you have the wcswcs function.  */
+#define HAVE_WCSWCS 1
+
+/* Define if you have the <wctype.h> header file.  */
+#define HAVE_WCTYPE_H 1
+
+/* Define if you have the __argz_count function.  */
+#undef HAVE___ARGZ_COUNT
+
+/* Define if you have the __argz_next function.  */
+#undef HAVE___ARGZ_NEXT
+
+/* Define if you have the __argz_stringify function.  */
+#undef HAVE___ARGZ_STRINGIFY
+
+/* Define as const if the declaration of iconv() needs const. */
+#undef ICONV_CONST
+
+/* The number of bytes in a unsigned int.  */
+#undef SIZEOF_UNSIGNED_INT
+
+/* The number of bytes in a unsigned long.  */
+#undef SIZEOF_UNSIGNED_LONG
+
+/* The number of bytes in a unsigned short.  */
+#undef SIZEOF_UNSIGNED_SHORT
+
+/* If using the C implementation of alloca, define if you know the
+   direction of stack growth for your system; otherwise it will be
+   automatically deduced at run-time.
+ STACK_DIRECTION > 0 => grows toward higher addresses
+ STACK_DIRECTION < 0 => grows toward lower addresses
+ STACK_DIRECTION = 0 => direction of growth unknown */
+#undef STACK_DIRECTION
+
+/* Define if you have the ANSI C header files.  */
+#undef STDC_HEADERS
+
+/* Define if your <sys/time.h> declares struct tm.  */
+#undef TM_IN_SYS_TIME
+
+/* Define if lex declares yytext as a char * by default, not a char[].  */
+#undef YYTEXT_POINTER
+
+/* Define to empty if the keyword does not work.  */
+#undef const
+
+/* Define as __inline if that's what the C compiler calls it.  */
+#undef inline
+
+/* Define to `long' if <sys/types.h> doesn't define.  */
+#undef off_t
+
+/* Define to `int' if <sys/types.h> doesn't define.  */
+#undef pid_t
+
+/* Define to `unsigned' if <sys/types.h> doesn't define.  */
+#undef size_t
+
+/* Others */
+#define HAVE_DOSISH_SYSTEM	1
+#define HOST_ALIAS			"Win32"
+#define MANUALDIR			"doc\\manual"
+#define SYSCONFDIR			"etc"
+#define LOCALEDIR			"locale"
+#define FAQDIR				"doc\\faq"
diff -urN matcher_parser_lex.c matcher_parser_lex.c
--- matcher_parser_lex.c	Thu Jan 01 01:00:00 1970
+++ matcher_parser_lex.c	Fri Apr 12 05:00:48 2002
@@ -0,0 +1,2187 @@
+#define yy_create_buffer matcher_parser_create_buffer
+#define yy_delete_buffer matcher_parser_delete_buffer
+#define yy_scan_buffer matcher_parser_scan_buffer
+#define yy_scan_string matcher_parser_scan_string
+#define yy_scan_bytes matcher_parser_scan_bytes
+#define yy_flex_debug matcher_parser_flex_debug
+#define yy_init_buffer matcher_parser_init_buffer
+#define yy_flush_buffer matcher_parser_flush_buffer
+#define yy_load_buffer_state matcher_parser_load_buffer_state
+#define yy_switch_to_buffer matcher_parser_switch_to_buffer
+#define yyin matcher_parserin
+#define yyleng matcher_parserleng
+#define yylex matcher_parserlex
+#define yyout matcher_parserout
+#define yyrestart matcher_parserrestart
+#define yytext matcher_parsertext
+#define yylineno matcher_parserlineno
+#define yywrap matcher_parserwrap
+
+#line 21 "lex.yy.c"
+/* A lexical scanner generated by flex */
+
+/* Scanner skeleton version:
+ * $Header: //claws/src/Attic/generated.diff,v 1.1.2.2 2002-05-11 10:07:07 netztorte Exp $
+ */
+
+#define FLEX_SCANNER
+#define YY_FLEX_MAJOR_VERSION 2
+#define YY_FLEX_MINOR_VERSION 5
+
+#include <stdio.h>
+
+
+/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
+#ifdef c_plusplus
+#ifndef __cplusplus
+#define __cplusplus
+#endif
+#endif
+
+
+#ifdef __cplusplus
+
+#include <stdlib.h>
+#include <unistd.h>
+
+/* Use prototypes in function declarations. */
+#define YY_USE_PROTOS
+
+/* The "const" storage-class-modifier is valid. */
+#define YY_USE_CONST
+
+#else	/* ! __cplusplus */
+
+#if __STDC__
+
+#define YY_USE_PROTOS
+#define YY_USE_CONST
+
+#endif	/* __STDC__ */
+#endif	/* ! __cplusplus */
+
+#ifdef __TURBOC__
+ #pragma warn -rch
+ #pragma warn -use
+#include <io.h>
+#include <stdlib.h>
+#define YY_USE_CONST
+#define YY_USE_PROTOS
+#endif
+
+#ifdef YY_USE_CONST
+#define yyconst const
+#else
+#define yyconst
+#endif
+
+
+#ifdef YY_USE_PROTOS
+#define YY_PROTO(proto) proto
+#else
+#define YY_PROTO(proto) ()
+#endif
+
+/* Returned upon end-of-file. */
+#define YY_NULL 0
+
+/* Promotes a possibly negative, possibly signed char to an unsigned
+ * integer for use as an array index.  If the signed char is negative,
+ * we want to instead treat it as an 8-bit unsigned char, hence the
+ * double cast.
+ */
+#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
+
+/* Enter a start condition.  This macro really ought to take a parameter,
+ * but we do it the disgusting crufty way forced on us by the ()-less
+ * definition of BEGIN.
+ */
+#define BEGIN yy_start = 1 + 2 *
+
+/* Translate the current start state into a value that can be later handed
+ * to BEGIN to return to the state.  The YYSTATE alias is for lex
+ * compatibility.
+ */
+#define YY_START ((yy_start - 1) / 2)
+#define YYSTATE YY_START
+
+/* Action number for EOF rule of a given start state. */
+#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
+
+/* Special action meaning "start processing a new file". */
+#define YY_NEW_FILE yyrestart( yyin )
+
+#define YY_END_OF_BUFFER_CHAR 0
+
+/* Size of default input buffer. */
+#define YY_BUF_SIZE 16384
+
+typedef struct yy_buffer_state *YY_BUFFER_STATE;
+
+extern int yyleng;
+extern FILE *yyin, *yyout;
+
+#define EOB_ACT_CONTINUE_SCAN 0
+#define EOB_ACT_END_OF_FILE 1
+#define EOB_ACT_LAST_MATCH 2
+
+/* The funky do-while in the following #define is used to turn the definition
+ * int a single C statement (which needs a semi-colon terminator).  This
+ * avoids problems with code like:
+ *
+ * 	if ( condition_holds )
+ *		yyless( 5 );
+ *	else
+ *		do_something_else();
+ *
+ * Prior to using the do-while the compiler would get upset at the
+ * "else" because it interpreted the "if" statement as being all
+ * done when it reached the ';' after the yyless() call.
+ */
+
+/* Return all but the first 'n' matched characters back to the input stream. */
+
+#define yyless(n) \
+	do \
+		{ \
+		/* Undo effects of setting up yytext. */ \
+		*yy_cp = yy_hold_char; \
+		YY_RESTORE_YY_MORE_OFFSET \
+		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
+		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
+		} \
+	while ( 0 )
+
+#define unput(c) yyunput( c, yytext_ptr )
+
+/* The following is because we cannot portably get our hands on size_t
+ * (without autoconf's help, which isn't available because we want
+ * flex-generated scanners to compile on their own).
+ */
+typedef unsigned int yy_size_t;
+
+
+struct yy_buffer_state
+	{
+	FILE *yy_input_file;
+
+	char *yy_ch_buf;		/* input buffer */
+	char *yy_buf_pos;		/* current position in input buffer */
+
+	/* Size of input buffer in bytes, not including room for EOB
+	 * characters.
+	 */
+	yy_size_t yy_buf_size;
+
+	/* Number of characters read into yy_ch_buf, not including EOB
+	 * characters.
+	 */
+	int yy_n_chars;
+
+	/* Whether we "own" the buffer - i.e., we know we created it,
+	 * and can realloc() it to grow it, and should free() it to
+	 * delete it.
+	 */
+	int yy_is_our_buffer;
+
+	/* Whether this is an "interactive" input source; if so, and
+	 * if we're using stdio for input, then we want to use getc()
+	 * instead of fread(), to make sure we stop fetching input after
+	 * each newline.
+	 */
+	int yy_is_interactive;
+
+	/* Whether we're considered to be at the beginning of a line.
+	 * If so, '^' rules will be active on the next match, otherwise
+	 * not.
+	 */
+	int yy_at_bol;
+
+	/* Whether to try to fill the input buffer when we reach the
+	 * end of it.
+	 */
+	int yy_fill_buffer;
+
+	int yy_buffer_status;
+#define YY_BUFFER_NEW 0
+#define YY_BUFFER_NORMAL 1
+	/* When an EOF's been seen but there's still some text to process
+	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
+	 * shouldn't try reading from the input source any more.  We might
+	 * still have a bunch of tokens to match, though, because of
+	 * possible backing-up.
+	 *
+	 * When we actually see the EOF, we change the status to "new"
+	 * (via yyrestart()), so that the user can continue scanning by
+	 * just pointing yyin at a new input file.
+	 */
+#define YY_BUFFER_EOF_PENDING 2
+	};
+
+static YY_BUFFER_STATE yy_current_buffer = 0;
+
+/* We provide macros for accessing buffer states in case in the
+ * future we want to put the buffer states in a more general
+ * "scanner state".
+ */
+#define YY_CURRENT_BUFFER yy_current_buffer
+
+
+/* yy_hold_char holds the character lost when yytext is formed. */
+static char yy_hold_char;
+
+static int yy_n_chars;		/* number of characters read into yy_ch_buf */
+
+
+int yyleng;
+
+/* Points to current character in buffer. */
+static char *yy_c_buf_p = (char *) 0;
+static int yy_init = 1;		/* whether we need to initialize */
+static int yy_start = 0;	/* start state number */
+
+/* Flag which is used to allow yywrap()'s to do buffer switches
+ * instead of setting up a fresh yyin.  A bit of a hack ...
+ */
+static int yy_did_buffer_switch_on_eof;
+
+void yyrestart YY_PROTO(( FILE *input_file ));
+
+void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
+void yy_load_buffer_state YY_PROTO(( void ));
+YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
+void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
+void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
+void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
+#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )
+
+YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
+YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
+YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));
+
+static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
+static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
+static void yy_flex_free YY_PROTO(( void * ));
+
+#define yy_new_buffer yy_create_buffer
+
+#define yy_set_interactive(is_interactive) \
+	{ \
+	if ( ! yy_current_buffer ) \
+		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
+	yy_current_buffer->yy_is_interactive = is_interactive; \
+	}
+
+#define yy_set_bol(at_bol) \
+	{ \
+	if ( ! yy_current_buffer ) \
+		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
+	yy_current_buffer->yy_at_bol = at_bol; \
+	}
+
+#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)
+
+
+#define YY_USES_REJECT
+typedef unsigned char YY_CHAR;
+FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
+typedef int yy_state_type;
+extern int yylineno;
+int yylineno = 1;
+extern char *yytext;
+#define yytext_ptr yytext
+
+static yy_state_type yy_get_previous_state YY_PROTO(( void ));
+static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
+static int yy_get_next_buffer YY_PROTO(( void ));
+static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));
+
+/* Done after the current pattern has been matched and before the
+ * corresponding action - sets up yytext.
+ */
+#define YY_DO_BEFORE_ACTION \
+	yytext_ptr = yy_bp; \
+	yyleng = (int) (yy_cp - yy_bp); \
+	yy_hold_char = *yy_cp; \
+	*yy_cp = '\0'; \
+	yy_c_buf_p = yy_cp;
+
+#define YY_NUM_RULES 75
+#define YY_END_OF_BUFFER 76
+static yyconst short int yy_acclist[107] =
+    {   0,
+       76,   75,   65,   75,   66,   75,   69,   75,   67,   75,
+       75,   74,   75,   75,   75,   75,   75,   75,   75,   75,
+       75,   75,   75,   75,   75,   75,   75,   75,   68,   75,
+       75,   72,   75,   71,   72,   75,   72,   75,   65,   74,
+       73,   20,   18,   70,    1,    4,   21,   19,   54,   16,
+       56,   53,    5,   62,   49,   52,   17,   63,   55,   38,
+        6,   51,   57,    2,    8,   46,   60,   42,   10,   14,
+       39,    7,    3,   22,    9,   47,   43,   11,   15,   25,
+       44,   12,   28,   48,   23,   26,   30,   50,   37,   45,
+       13,   29,   24,   34,   33,   27,   31,   40,   58,   35,
+
+       36,   32,   41,   59,   64,   61
+    } ;
+
+static yyconst short int yy_accept[393] =
+    {   0,
+        1,    1,    1,    1,    1,    1,    1,    2,    3,    5,
+        7,    9,   11,   12,   14,   15,   16,   17,   18,   19,
+       20,   21,   22,   23,   24,   25,   26,   27,   28,   29,
+       31,   32,   34,   37,   39,   40,   41,   41,   42,   42,
+       42,   42,   43,   43,   43,   43,   43,   43,   43,   43,
+       43,   43,   43,   43,   43,   43,   43,   43,   44,   44,
+       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
+       44,   44,   44,   45,   45,   46,   46,   46,   46,   46,
+       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
+       47,   47,   47,   47,   47,   47,   47,   47,   47,   47,
+
+       47,   48,   48,   48,   48,   48,   48,   48,   48,   48,
+       48,   48,   48,   49,   49,   49,   49,   49,   49,   50,
+       50,   50,   50,   51,   51,   51,   52,   52,   52,   53,
+       53,   53,   53,   53,   53,   53,   53,   53,   53,   53,
+       53,   53,   53,   53,   53,   53,   53,   53,   53,   54,
+       54,   54,   54,   54,   54,   54,   54,   54,   54,   55,
+       55,   55,   55,   55,   55,   55,   55,   56,   56,   56,
+       56,   56,   56,   57,   57,   57,   57,   57,   57,   57,
+       57,   57,   57,   58,   58,   58,   58,   58,   58,   58,
+       58,   58,   58,   58,   58,   58,   58,   59,   60,   60,
+
+       60,   61,   61,   61,   62,   62,   62,   62,   62,   63,
+       63,   63,   63,   63,   63,   63,   63,   64,   65,   65,
+       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
+       65,   65,   65,   65,   65,   65,   65,   66,   67,   68,
+       68,   68,   68,   68,   69,   69,   69,   69,   70,   70,
+       70,   70,   70,   70,   70,   71,   71,   71,   71,   71,
+       71,   72,   72,   73,   73,   73,   73,   73,   73,   73,
+       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
+       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
+       75,   75,   76,   77,   77,   77,   77,   78,   78,   78,
+
+       79,   80,   80,   80,   81,   82,   82,   82,   83,   83,
+       84,   84,   84,   85,   85,   85,   85,   85,   85,   85,
+       85,   85,   85,   85,   85,   85,   85,   85,   85,   86,
+       86,   86,   86,   86,   86,   86,   87,   88,   89,   89,
+       89,   89,   90,   90,   90,   91,   92,   92,   93,   93,
+       93,   94,   94,   94,   94,   94,   94,   95,   95,   96,
+       96,   96,   96,   97,   98,   98,   98,   99,  100,  100,
+      100,  101,  102,  102,  102,  102,  102,  103,  104,  104,
+      104,  105,  105,  105,  106,  106,  106,  106,  106,  106,
+      107,  107
+
+    } ;
+
+static yyconst int yy_ec[256] =
+    {   0,
+        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    2,    1,    4,    1,    1,    1,    5,    1,    1,
+        1,    1,    6,    1,    6,    1,    1,    7,    7,    7,
+        7,    7,    7,    7,    7,    7,    7,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        8,    9,   10,    1,   11,    1,   12,   13,   14,   15,
+
+       16,   17,   18,   19,   20,   21,   22,   23,   24,   25,
+       26,   27,   28,   29,   30,   31,   32,   33,   34,   35,
+       36,   37,    1,   38,    1,   39,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1
+    } ;
+
+static yyconst int yy_meta[40] =
+    {   0,
+        1,    1,    1,    1,    1,    1,    1,    2,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1
+    } ;
+
+static yyconst short int yy_base[395] =
+    {   0,
+        0,    0,   37,   39,    0,    0,  410,  411,  407,  411,
+      411,  411,  401,  400,  396,   26,  379,   31,  388,  368,
+       21,  386,  376,   39,  384,  383,   38,  372,  372,  411,
+       58,  411,  411,  392,  393,  387,  383,  411,  376,  368,
+       44,  411,   33,  367,  373,  359,  361,  374,  356,   32,
+      354,  350,  348,   67,  355,  343,  366,  367,   38,  351,
+      362,  359,  339,   40,  357,  347,   52,  355,  354,  337,
+      342,  342,  411,  355,  411,  329,  339,  337,  326,  345,
+      346,  325,  334,  342,  340,  333,  340,  323,  336,  321,
+      334,  333,  325,  318,  330,  324,  318,  331,  326,  326,
+
+      411,  317,  323,  309,  311,  324,  306,  305,  303,  298,
+       64,  318,  319,  300,   74,  317,  313,  297,  411,  294,
+      292,  311,  411,  306,  294,   82,  301,  307,  411,  300,
+      288,  281,  295,  298,  302,  296,  282,  281,  297,  272,
+      291,  292,  271,  280,  288,  286,  279,  270,  269,  282,
+      274,  275,  269,  278,  264,  266,  264,  274,  411,  273,
+      257,  258,  257,  262,  272,  268,  268,  263,  251,  263,
+      251,  261,  265,   83,  261,  263,  251,  257,  260,  239,
+      237,  256,  411,  251,  239,  249,  252,  245,  233,  241,
+      244,  230,  246,  241,  222,  243,  411,   85,  238,  238,
+
+      222,  215,  220,  411,  237,  232,  221,  221,  231,  229,
+       86,  215,  213,  217,  209,  225,  411,  411,  211,  221,
+      205,  206,  205,  210,  217,  213,  201,  213,  212,  213,
+      215,  210,  212,  207,  193,  195,  411,  411,   92,  209,
+      188,  207,  187,  411,  184,  201,  202,  411,  185,  183,
+      185,  178,  193,  196,  411,  193,  194,  190,  188,  188,
+      172,  165,  411,  184,  173,  173,  182,  165,  181,  411,
+      163,  164,  161,  166,  178,  174,  161,  161,   78,  170,
+      158,  168,  153,  150,  165,  146,  167,  166,  154,  411,
+      147,  411,  411,  159,  163,  142,  411,  140,  157,  411,
+
+      411,  156,  153,  411,  411,  157,  137,  411,  154,  411,
+      149,  139,  411,  133,  132,  145,  148,  147,  142,  134,
+      125,  132,  123,  138,  125,  125,  123,  133,  411,  119,
+      117,  135,  116,  132,  114,  411,  411,  411,  119,  110,
+      111,  411,  123,  122,  411,  411,  125,  411,  106,  105,
+      411,  118,  121,  101,  116,  114,  411,  113,  411,   99,
+       98,   97,  411,  411,   96,   93,  411,  411,  111,   93,
+      411,  411,   90,   87,   88,  103,  411,  411,   96,   99,
+      411,   77,   91,  411,   76,   62,   64,   54,   23,  411,
+      411,  113,  115,   52
+
+    } ;
+
+static yyconst short int yy_def[395] =
+    {   0,
+      391,    1,  392,  392,  393,  393,  391,  391,  391,  391,
+      391,  391,  391,  391,  394,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  394,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+        0,  391,  391,  391
+
+    } ;
+
+static yyconst short int yy_nxt[451] =
+    {   0,
+        8,    9,   10,   11,   12,   13,   14,   15,    8,    8,
+        8,   16,   17,   18,   19,   20,   21,    8,   22,   23,
+        8,    8,    8,   24,   25,    8,    8,    8,   26,   27,
+       28,   29,    8,    8,    8,    8,    8,   30,   31,    8,
+       33,    8,   33,   39,   42,   34,   46,   34,   40,   47,
+       50,   55,   37,  390,   51,   78,   43,   56,   76,   79,
+       86,   98,   87,  108,   52,  104,   99,  109,  105,   57,
+       60,   61,   62,   63,   64,   77,   65,   66,  389,  388,
+      150,   67,   68,   91,   92,  387,   69,   70,   71,   72,
+      151,  155,  165,   93,  386,  236,  156,  166,  212,  237,
+
+      213,  249,  275,  250,  385,  384,  311,  276,  251,  312,
+      383,  382,  214,   32,   32,    8,    8,  381,  380,  379,
+      378,  377,  376,  375,  374,  373,  372,  371,  370,  369,
+      368,  367,  366,  365,  364,  363,  362,  361,  360,  359,
+      358,  357,  356,  355,  354,  353,  352,  351,  350,  349,
+      348,  347,  346,  345,  344,  343,  342,  341,  340,  339,
+      338,  337,  336,  335,  334,  333,  332,  331,  330,  329,
+      328,  327,  326,  325,  324,  323,  322,  321,  320,  319,
+      318,  317,  316,  315,  314,  313,  310,  309,  308,  307,
+      306,  305,  304,  303,  302,  301,  300,  299,  298,  297,
+
+      296,  295,  294,  293,  292,  291,  290,  289,  288,  287,
+      286,  285,  284,  283,  282,  281,  280,  279,  278,  277,
+      274,  273,  272,  271,  270,  269,  268,  267,  266,  265,
+      264,  263,  262,  261,  260,  259,  258,  257,  256,  255,
+      254,  253,  252,  248,  247,  246,  245,  244,  243,  242,
+      241,  240,  239,  238,  235,  234,  233,  232,  231,  230,
+      229,  228,  227,  226,  225,  224,  223,  222,  221,  220,
+      219,  218,  217,  216,  215,  211,  210,  209,  208,  207,
+      206,  205,  204,  203,  202,  201,  200,  199,  198,  197,
+      196,  195,  194,  193,  192,  191,  190,  189,  188,  187,
+
+      186,  185,  184,  183,  182,  181,  180,  179,  178,  177,
+      176,  175,  174,  173,  172,  171,  170,  169,  168,  167,
+      164,  163,  162,  161,  160,  159,  158,  157,  154,  153,
+      152,  149,  148,  147,  146,  145,  144,  143,  142,  141,
+      140,  139,  138,  137,  136,  135,  134,  133,  132,  131,
+      130,  129,  128,  127,  126,  125,  124,  123,  122,  121,
+      120,  119,  118,  117,  116,  115,  114,  113,  112,  111,
+      110,  107,  106,  103,  102,  101,  100,   97,   96,   95,
+       94,   90,   89,   88,   85,   84,   83,   82,   81,   80,
+       75,   74,   38,   36,   35,   73,   59,   58,   54,   53,
+
+       49,   48,   45,   44,   41,   38,   36,   36,   35,  391,
+        7,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391
+    } ;
+
+static yyconst short int yy_chk[451] =
+    {   0,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    3,
+        3,    4,    4,   16,   18,    3,   21,    4,   16,   21,
+       24,   27,  394,  389,   24,   43,   18,   27,   41,   43,
+       50,   59,   50,   67,   24,   64,   59,   67,   64,   27,
+       31,   31,   31,   31,   31,   41,   31,   31,  388,  387,
+      111,   31,   31,   54,   54,  386,   31,   31,   31,   31,
+      111,  115,  126,   54,  385,  198,  115,  126,  174,  198,
+
+      174,  211,  239,  211,  383,  382,  279,  239,  211,  279,
+      380,  379,  174,  392,  392,  393,  393,  376,  375,  374,
+      373,  370,  369,  366,  365,  362,  361,  360,  358,  356,
+      355,  354,  353,  352,  350,  349,  347,  344,  343,  341,
+      340,  339,  335,  334,  333,  332,  331,  330,  328,  327,
+      326,  325,  324,  323,  322,  321,  320,  319,  318,  317,
+      316,  315,  314,  312,  311,  309,  307,  306,  303,  302,
+      299,  298,  296,  295,  294,  291,  289,  288,  287,  286,
+      285,  284,  283,  282,  281,  280,  278,  277,  276,  275,
+      274,  273,  272,  271,  269,  268,  267,  266,  265,  264,
+
+      262,  261,  260,  259,  258,  257,  256,  254,  253,  252,
+      251,  250,  249,  247,  246,  245,  243,  242,  241,  240,
+      236,  235,  234,  233,  232,  231,  230,  229,  228,  227,
+      226,  225,  224,  223,  222,  221,  220,  219,  216,  215,
+      214,  213,  212,  210,  209,  208,  207,  206,  205,  203,
+      202,  201,  200,  199,  196,  195,  194,  193,  192,  191,
+      190,  189,  188,  187,  186,  185,  184,  182,  181,  180,
+      179,  178,  177,  176,  175,  173,  172,  171,  170,  169,
+      168,  167,  166,  165,  164,  163,  162,  161,  160,  158,
+      157,  156,  155,  154,  153,  152,  151,  150,  149,  148,
+
+      147,  146,  145,  144,  143,  142,  141,  140,  139,  138,
+      137,  136,  135,  134,  133,  132,  131,  130,  128,  127,
+      125,  124,  122,  121,  120,  118,  117,  116,  114,  113,
+      112,  110,  109,  108,  107,  106,  105,  104,  103,  102,
+      100,   99,   98,   97,   96,   95,   94,   93,   92,   91,
+       90,   89,   88,   87,   86,   85,   84,   83,   82,   81,
+       80,   79,   78,   77,   76,   74,   72,   71,   70,   69,
+       68,   66,   65,   63,   62,   61,   60,   58,   57,   56,
+       55,   53,   52,   51,   49,   48,   47,   46,   45,   44,
+       40,   39,   37,   36,   35,   34,   29,   28,   26,   25,
+
+       23,   22,   20,   19,   17,   15,   14,   13,    9,    7,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391,
+      391,  391,  391,  391,  391,  391,  391,  391,  391,  391
+    } ;
+
+static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
+static char *yy_full_match;
+static int yy_lp;
+#define REJECT \
+{ \
+*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
+yy_cp = yy_full_match; /* restore poss. backed-over text */ \
+++yy_lp; \
+goto find_rule; \
+}
+#define yymore() yymore_used_but_not_detected
+#define YY_MORE_ADJ 0
+#define YY_RESTORE_YY_MORE_OFFSET
+char *yytext;
+#line 1 "matcher_parser_lex.l"
+#define INITIAL 0
+#line 2 "matcher_parser_lex.l"
+#include "matcher_parser_lex.h"
+#include "matcher_parser_parse.h"
+#include <glib.h>
+
+#define MAX_STR_CONST 512
+
+char string_buf[MAX_STR_CONST];
+char * string_buf_ptr;
+
+static void add_char(char ch)
+{
+	if (string_buf_ptr - string_buf < sizeof(string_buf))
+		*string_buf_ptr++ = ch;
+}
+#define string 1
+
+#define section 2
+
+#line 653 "lex.yy.c"
+
+/* Macros after this point can all be overridden by user definitions in
+ * section 1.
+ */
+
+#ifndef YY_SKIP_YYWRAP
+#ifdef __cplusplus
+extern "C" int yywrap YY_PROTO(( void ));
+#else
+extern int yywrap YY_PROTO(( void ));
+#endif
+#endif
+
+#ifndef YY_NO_UNPUT
+static void yyunput YY_PROTO(( int c, char *buf_ptr ));
+#endif
+
+#ifndef yytext_ptr
+static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
+#endif
+
+#ifdef YY_NEED_STRLEN
+static int yy_flex_strlen YY_PROTO(( yyconst char * ));
+#endif
+
+#ifndef YY_NO_INPUT
+#ifdef __cplusplus
+static int yyinput YY_PROTO(( void ));
+#else
+static int input YY_PROTO(( void ));
+#endif
+#endif
+
+#if YY_STACK_USED
+static int yy_start_stack_ptr = 0;
+static int yy_start_stack_depth = 0;
+static int *yy_start_stack = 0;
+#ifndef YY_NO_PUSH_STATE
+static void yy_push_state YY_PROTO(( int new_state ));
+#endif
+#ifndef YY_NO_POP_STATE
+static void yy_pop_state YY_PROTO(( void ));
+#endif
+#ifndef YY_NO_TOP_STATE
+static int yy_top_state YY_PROTO(( void ));
+#endif
+
+#else
+#define YY_NO_PUSH_STATE 1
+#define YY_NO_POP_STATE 1
+#define YY_NO_TOP_STATE 1
+#endif
+
+#ifdef YY_MALLOC_DECL
+YY_MALLOC_DECL
+#else
+#if __STDC__
+#ifndef __cplusplus
+#include <stdlib.h>
+#endif
+#else
+/* Just try to get by without declaring the routines.  This will fail
+ * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
+ * or sizeof(void*) != sizeof(int).
+ */
+#endif
+#endif
+
+/* Amount of stuff to slurp up with each read. */
+#ifndef YY_READ_BUF_SIZE
+#define YY_READ_BUF_SIZE 8192
+#endif
+
+/* Copy whatever the last rule matched to the standard output. */
+
+#ifndef ECHO
+/* This used to be an fputs(), but since the string might contain NUL's,
+ * we now use fwrite().
+ */
+#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
+#endif
+
+/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
+ * is returned in "result".
+ */
+#ifndef YY_INPUT
+#define YY_INPUT(buf,result,max_size) \
+	if ( yy_current_buffer->yy_is_interactive ) \
+		{ \
+		int c = '*', n; \
+		for ( n = 0; n < max_size && \
+			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
+			buf[n] = (char) c; \
+		if ( c == '\n' ) \
+			buf[n++] = (char) c; \
+		if ( c == EOF && ferror( yyin ) ) \
+			YY_FATAL_ERROR( "input in flex scanner failed" ); \
+		result = n; \
+		} \
+	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
+		  && ferror( yyin ) ) \
+		YY_FATAL_ERROR( "input in flex scanner failed" );
+#endif
+
+/* No semi-colon after return; correct usage is to write "yyterminate();" -
+ * we don't want an extra ';' after the "return" because that will cause
+ * some compilers to complain about unreachable statements.
+ */
+#ifndef yyterminate
+#define yyterminate() return YY_NULL
+#endif
+
+/* Number of entries by which start-condition stack grows. */
+#ifndef YY_START_STACK_INCR
+#define YY_START_STACK_INCR 25
+#endif
+
+/* Report a fatal error. */
+#ifndef YY_FATAL_ERROR
+#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
+#endif
+
+/* Default declaration of generated scanner - a define so the user can
+ * easily add parameters.
+ */
+#ifndef YY_DECL
+#define YY_DECL int yylex YY_PROTO(( void ))
+#endif
+
+/* Code executed at the beginning of each rule, after yytext and yyleng
+ * have been set up.
+ */
+#ifndef YY_USER_ACTION
+#define YY_USER_ACTION
+#endif
+
+/* Code executed at the end of each rule. */
+#ifndef YY_BREAK
+#define YY_BREAK break;
+#endif
+
+#define YY_RULE_SETUP \
+	YY_USER_ACTION
+
+YY_DECL
+	{
+	register yy_state_type yy_current_state;
+	register char *yy_cp, *yy_bp;
+	register int yy_act;
+
+#line 25 "matcher_parser_lex.l"
+
+
+#line 807 "lex.yy.c"
+
+	if ( yy_init )
+		{
+		yy_init = 0;
+
+#ifdef YY_USER_INIT
+		YY_USER_INIT;
+#endif
+
+		if ( ! yy_start )
+			yy_start = 1;	/* first start state */
+
+		if ( ! yyin )
+			yyin = stdin;
+
+		if ( ! yyout )
+			yyout = stdout;
+
+		if ( ! yy_current_buffer )
+			yy_current_buffer =
+				yy_create_buffer( yyin, YY_BUF_SIZE );
+
+		yy_load_buffer_state();
+		}
+
+	while ( 1 )		/* loops until end-of-file is reached */
+		{
+		yy_cp = yy_c_buf_p;
+
+		/* Support of yytext. */
+		*yy_cp = yy_hold_char;
+
+		/* yy_bp points to the position in yy_ch_buf of the start of
+		 * the current run.
+		 */
+		yy_bp = yy_cp;
+
+		yy_current_state = yy_start;
+		yy_state_ptr = yy_state_buf;
+		*yy_state_ptr++ = yy_current_state;
+yy_match:
+		do
+			{
+			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
+			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
+				{
+				yy_current_state = (int) yy_def[yy_current_state];
+				if ( yy_current_state >= 392 )
+					yy_c = yy_meta[(unsigned int) yy_c];
+				}
+			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
+			*yy_state_ptr++ = yy_current_state;
+			++yy_cp;
+			}
+		while ( yy_base[yy_current_state] != 411 );
+
+yy_find_action:
+		yy_current_state = *--yy_state_ptr;
+		yy_lp = yy_accept[yy_current_state];
+find_rule: /* we branch to this label when backing up */
+		for ( ; ; ) /* until we find what rule we matched */
+			{
+			if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
+				{
+				yy_act = yy_acclist[yy_lp];
+					{
+					yy_full_match = yy_cp;
+					break;
+					}
+				}
+			--yy_cp;
+			yy_current_state = *--yy_state_ptr;
+			yy_lp = yy_accept[yy_current_state];
+			}
+
+		YY_DO_BEFORE_ACTION;
+
+		if ( yy_act != YY_END_OF_BUFFER )
+			{
+			int yyl;
+			for ( yyl = 0; yyl < yyleng; ++yyl )
+				if ( yytext[yyl] == '\n' )
+					++yylineno;
+			}
+
+do_action:	/* This label is used only to access EOF actions. */
+
+
+		switch ( yy_act )
+	{ /* beginning of action switch */
+case 1:
+YY_RULE_SETUP
+#line 27 "matcher_parser_lex.l"
+return MATCHER_ALL;
+	YY_BREAK
+case 2:
+YY_RULE_SETUP
+#line 28 "matcher_parser_lex.l"
+return MATCHER_UNREAD;
+	YY_BREAK
+case 3:
+YY_RULE_SETUP
+#line 29 "matcher_parser_lex.l"
+return MATCHER_NOT_UNREAD;
+	YY_BREAK
+case 4:
+YY_RULE_SETUP
+#line 30 "matcher_parser_lex.l"
+return MATCHER_NEW;
+	YY_BREAK
+case 5:
+YY_RULE_SETUP
+#line 31 "matcher_parser_lex.l"
+return MATCHER_NOT_NEW;
+	YY_BREAK
+case 6:
+YY_RULE_SETUP
+#line 32 "matcher_parser_lex.l"
+return MATCHER_MARKED;
+	YY_BREAK
+case 7:
+YY_RULE_SETUP
+#line 33 "matcher_parser_lex.l"
+return MATCHER_NOT_MARKED;
+	YY_BREAK
+case 8:
+YY_RULE_SETUP
+#line 34 "matcher_parser_lex.l"
+return MATCHER_DELETED;
+	YY_BREAK
+case 9:
+YY_RULE_SETUP
+#line 35 "matcher_parser_lex.l"
+return MATCHER_NOT_DELETED;
+	YY_BREAK
+case 10:
+YY_RULE_SETUP
+#line 36 "matcher_parser_lex.l"
+return MATCHER_REPLIED;
+	YY_BREAK
+case 11:
+YY_RULE_SETUP
+#line 37 "matcher_parser_lex.l"
+return MATCHER_NOT_REPLIED;
+	YY_BREAK
+case 12:
+YY_RULE_SETUP
+#line 38 "matcher_parser_lex.l"
+return MATCHER_FORWARDED;
+	YY_BREAK
+case 13:
+YY_RULE_SETUP
+#line 39 "matcher_parser_lex.l"
+return MATCHER_NOT_FORWARDED;
+	YY_BREAK
+case 14:
+YY_RULE_SETUP
+#line 40 "matcher_parser_lex.l"
+return MATCHER_SUBJECT;
+	YY_BREAK
+case 15:
+YY_RULE_SETUP
+#line 41 "matcher_parser_lex.l"
+return MATCHER_NOT_SUBJECT;
+	YY_BREAK
+case 16:
+YY_RULE_SETUP
+#line 42 "matcher_parser_lex.l"
+return MATCHER_FROM;
+	YY_BREAK
+case 17:
+YY_RULE_SETUP
+#line 43 "matcher_parser_lex.l"
+return MATCHER_NOT_FROM;
+	YY_BREAK
+case 18:
+YY_RULE_SETUP
+#line 44 "matcher_parser_lex.l"
+return MATCHER_TO;
+	YY_BREAK
+case 19:
+YY_RULE_SETUP
+#line 45 "matcher_parser_lex.l"
+return MATCHER_NOT_TO;
+	YY_BREAK
+case 20:
+YY_RULE_SETUP
+#line 46 "matcher_parser_lex.l"
+return MATCHER_CC;
+	YY_BREAK
+case 21:
+YY_RULE_SETUP
+#line 47 "matcher_parser_lex.l"
+return MATCHER_NOT_CC;
+	YY_BREAK
+case 22:
+YY_RULE_SETUP
+#line 48 "matcher_parser_lex.l"
+return MATCHER_TO_OR_CC;
+	YY_BREAK
+case 23:
+YY_RULE_SETUP
+#line 49 "matcher_parser_lex.l"
+return MATCHER_NOT_TO_AND_NOT_CC;
+	YY_BREAK
+case 24:
+YY_RULE_SETUP
+#line 50 "matcher_parser_lex.l"
+return MATCHER_AGE_GREATER;
+	YY_BREAK
+case 25:
+YY_RULE_SETUP
+#line 51 "matcher_parser_lex.l"
+return MATCHER_AGE_LOWER;
+	YY_BREAK
+case 26:
+YY_RULE_SETUP
+#line 52 "matcher_parser_lex.l"
+return MATCHER_NEWSGROUPS;
+	YY_BREAK
+case 27:
+YY_RULE_SETUP
+#line 53 "matcher_parser_lex.l"
+return MATCHER_NOT_NEWSGROUPS;
+	YY_BREAK
+case 28:
+YY_RULE_SETUP
+#line 54 "matcher_parser_lex.l"
+return MATCHER_INREPLYTO;
+	YY_BREAK
+case 29:
+YY_RULE_SETUP
+#line 55 "matcher_parser_lex.l"
+return MATCHER_NOT_INREPLYTO;
+	YY_BREAK
+case 30:
+YY_RULE_SETUP
+#line 56 "matcher_parser_lex.l"
+return MATCHER_REFERENCES;
+	YY_BREAK
+case 31:
+YY_RULE_SETUP
+#line 57 "matcher_parser_lex.l"
+return MATCHER_NOT_REFERENCES;
+	YY_BREAK
+case 32:
+YY_RULE_SETUP
+#line 58 "matcher_parser_lex.l"
+return MATCHER_SCORE_GREATER;
+	YY_BREAK
+case 33:
+YY_RULE_SETUP
+#line 59 "matcher_parser_lex.l"
+return MATCHER_SCORE_LOWER;
+	YY_BREAK
+case 34:
+YY_RULE_SETUP
+#line 60 "matcher_parser_lex.l"
+return MATCHER_SCORE_EQUAL;
+	YY_BREAK
+case 35:
+YY_RULE_SETUP
+#line 61 "matcher_parser_lex.l"
+return MATCHER_SIZE_GREATER;
+	YY_BREAK
+case 36:
+YY_RULE_SETUP
+#line 62 "matcher_parser_lex.l"
+return MATCHER_SIZE_SMALLER;
+	YY_BREAK
+case 37:
+YY_RULE_SETUP
+#line 63 "matcher_parser_lex.l"
+return MATCHER_SIZE_EQUAL;
+	YY_BREAK
+case 38:
+YY_RULE_SETUP
+#line 64 "matcher_parser_lex.l"
+return MATCHER_HEADER;
+	YY_BREAK
+case 39:
+YY_RULE_SETUP
+#line 65 "matcher_parser_lex.l"
+return MATCHER_NOT_HEADER;
+	YY_BREAK
+case 40:
+YY_RULE_SETUP
+#line 66 "matcher_parser_lex.l"
+return MATCHER_HEADERS_PART;
+	YY_BREAK
+case 41:
+YY_RULE_SETUP
+#line 67 "matcher_parser_lex.l"
+return MATCHER_NOT_HEADERS_PART;
+	YY_BREAK
+case 42:
+YY_RULE_SETUP
+#line 68 "matcher_parser_lex.l"
+return MATCHER_MESSAGE;
+	YY_BREAK
+case 43:
+YY_RULE_SETUP
+#line 69 "matcher_parser_lex.l"
+return MATCHER_NOT_MESSAGE;
+	YY_BREAK
+case 44:
+YY_RULE_SETUP
+#line 70 "matcher_parser_lex.l"
+return MATCHER_BODY_PART;
+	YY_BREAK
+case 45:
+YY_RULE_SETUP
+#line 71 "matcher_parser_lex.l"
+return MATCHER_NOT_BODY_PART;
+	YY_BREAK
+case 46:
+YY_RULE_SETUP
+#line 72 "matcher_parser_lex.l"
+return MATCHER_EXECUTE;
+	YY_BREAK
+case 47:
+YY_RULE_SETUP
+#line 73 "matcher_parser_lex.l"
+return MATCHER_NOT_EXECUTE;
+	YY_BREAK
+case 48:
+YY_RULE_SETUP
+#line 74 "matcher_parser_lex.l"
+return MATCHER_MATCHCASE;
+	YY_BREAK
+case 49:
+YY_RULE_SETUP
+#line 75 "matcher_parser_lex.l"
+return MATCHER_MATCH;
+	YY_BREAK
+case 50:
+YY_RULE_SETUP
+#line 76 "matcher_parser_lex.l"
+return MATCHER_REGEXPCASE;
+	YY_BREAK
+case 51:
+YY_RULE_SETUP
+#line 77 "matcher_parser_lex.l"
+return MATCHER_REGEXP;
+	YY_BREAK
+case 52:
+YY_RULE_SETUP
+#line 78 "matcher_parser_lex.l"
+return MATCHER_SCORE;
+	YY_BREAK
+case 53:
+YY_RULE_SETUP
+#line 79 "matcher_parser_lex.l"
+return MATCHER_MOVE;
+	YY_BREAK
+case 54:
+YY_RULE_SETUP
+#line 80 "matcher_parser_lex.l"
+return MATCHER_COPY;
+	YY_BREAK
+case 55:
+YY_RULE_SETUP
+#line 81 "matcher_parser_lex.l"
+return MATCHER_DELETE;
+	YY_BREAK
+case 56:
+YY_RULE_SETUP
+#line 82 "matcher_parser_lex.l"
+return MATCHER_MARK;
+	YY_BREAK
+case 57:
+YY_RULE_SETUP
+#line 83 "matcher_parser_lex.l"
+return MATCHER_UNMARK;
+	YY_BREAK
+case 58:
+YY_RULE_SETUP
+#line 84 "matcher_parser_lex.l"
+return MATCHER_MARK_AS_READ;
+	YY_BREAK
+case 59:
+YY_RULE_SETUP
+#line 85 "matcher_parser_lex.l"
+return MATCHER_MARK_AS_UNREAD;
+	YY_BREAK
+case 60:
+YY_RULE_SETUP
+#line 86 "matcher_parser_lex.l"
+return MATCHER_FORWARD;
+	YY_BREAK
+case 61:
+YY_RULE_SETUP
+#line 87 "matcher_parser_lex.l"
+return MATCHER_FORWARD_AS_ATTACHMENT;
+	YY_BREAK
+case 62:
+YY_RULE_SETUP
+#line 88 "matcher_parser_lex.l"
+return MATCHER_COLOR;
+	YY_BREAK
+case 63:
+YY_RULE_SETUP
+#line 89 "matcher_parser_lex.l"
+return MATCHER_BOUNCE;
+	YY_BREAK
+case 64:
+YY_RULE_SETUP
+#line 90 "matcher_parser_lex.l"
+return MATCHER_DELETE_ON_SERVER;
+	YY_BREAK
+case 65:
+YY_RULE_SETUP
+#line 91 "matcher_parser_lex.l"
+
+	YY_BREAK
+case 66:
+YY_RULE_SETUP
+#line 92 "matcher_parser_lex.l"
+return MATCHER_EOL;
+	YY_BREAK
+case 67:
+YY_RULE_SETUP
+#line 93 "matcher_parser_lex.l"
+return MATCHER_AND;
+	YY_BREAK
+case 68:
+YY_RULE_SETUP
+#line 94 "matcher_parser_lex.l"
+return MATCHER_OR;
+	YY_BREAK
+case 69:
+YY_RULE_SETUP
+#line 95 "matcher_parser_lex.l"
+{
+		BEGIN(string);
+		string_buf_ptr = string_buf;
+		}
+	YY_BREAK
+/* alfons - OK, the new attempt is to just swallow 
+		 * *EVERYTHING* and make sure everything is escaped
+		 * when actually performing things. */
+case 70:
+YY_RULE_SETUP
+#line 102 "matcher_parser_lex.l"
+{
+		/* take care of escaped \" because this means the
+		 * quote char should be skipped */
+		add_char('\\');
+		add_char('\"');
+		}
+	YY_BREAK
+case 71:
+YY_RULE_SETUP
+#line 108 "matcher_parser_lex.l"
+{
+		/* get out of the state: string ends. */
+		BEGIN(0);
+		*string_buf_ptr = '\0';
+		yylval.str = string_buf;
+		return MATCHER_STRING;
+		}
+	YY_BREAK
+/* put everything else in the output. */
+case 72:
+YY_RULE_SETUP
+#line 116 "matcher_parser_lex.l"
+{
+		add_char(yytext[0]);
+		}
+	YY_BREAK
+case 73:
+YY_RULE_SETUP
+#line 119 "matcher_parser_lex.l"
+{
+		BEGIN(0);
+		yylval.str = yytext + 1;
+		yytext[strlen(yytext) - 1] = '\0';
+		return MATCHER_SECTION;
+		}
+	YY_BREAK
+case 74:
+YY_RULE_SETUP
+#line 125 "matcher_parser_lex.l"
+{
+		yylval.str = yytext;
+		return MATCHER_INTEGER;
+		}
+	YY_BREAK
+case 75:
+YY_RULE_SETUP
+#line 130 "matcher_parser_lex.l"
+ECHO;
+	YY_BREAK
+#line 1301 "lex.yy.c"
+			case YY_STATE_EOF(INITIAL):
+			case YY_STATE_EOF(string):
+			case YY_STATE_EOF(section):
+				yyterminate();
+
+	case YY_END_OF_BUFFER:
+		{
+		/* Amount of text matched not including the EOB char. */
+		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;
+
+		/* Undo the effects of YY_DO_BEFORE_ACTION. */
+		*yy_cp = yy_hold_char;
+		YY_RESTORE_YY_MORE_OFFSET
+
+		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
+			{
+			/* We're scanning a new file or input source.  It's
+			 * possible that this happened because the user
+			 * just pointed yyin at a new source and called
+			 * yylex().  If so, then we have to assure
+			 * consistency between yy_current_buffer and our
+			 * globals.  Here is the right place to do so, because
+			 * this is the first action (other than possibly a
+			 * back-up) that will match for the new input source.
+			 */
+			yy_n_chars = yy_current_buffer->yy_n_chars;
+			yy_current_buffer->yy_input_file = yyin;
+			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
+			}
+
+		/* Note that here we test for yy_c_buf_p "<=" to the position
+		 * of the first EOB in the buffer, since yy_c_buf_p will
+		 * already have been incremented past the NUL character
+		 * (since all states make transitions on EOB to the
+		 * end-of-buffer state).  Contrast this with the test
+		 * in input().
+		 */
+		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
+			{ /* This was really a NUL. */
+			yy_state_type yy_next_state;
+
+			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;
+
+			yy_current_state = yy_get_previous_state();
+
+			/* Okay, we're now positioned to make the NUL
+			 * transition.  We couldn't have
+			 * yy_get_previous_state() go ahead and do it
+			 * for us because it doesn't know how to deal
+			 * with the possibility of jamming (and we don't
+			 * want to build jamming into it because then it
+			 * will run more slowly).
+			 */
+
+			yy_next_state = yy_try_NUL_trans( yy_current_state );
+
+			yy_bp = yytext_ptr + YY_MORE_ADJ;
+
+			if ( yy_next_state )
+				{
+				/* Consume the NUL. */
+				yy_cp = ++yy_c_buf_p;
+				yy_current_state = yy_next_state;
+				goto yy_match;
+				}
+
+			else
+				{
+				yy_cp = yy_c_buf_p;
+				goto yy_find_action;
+				}
+			}
+
+		else switch ( yy_get_next_buffer() )
+			{
+			case EOB_ACT_END_OF_FILE:
+				{
+				yy_did_buffer_switch_on_eof = 0;
+
+				if ( yywrap() )
+					{
+					/* Note: because we've taken care in
+					 * yy_get_next_buffer() to have set up
+					 * yytext, we can now set up
+					 * yy_c_buf_p so that if some total
+					 * hoser (like flex itself) wants to
+					 * call the scanner after we return the
+					 * YY_NULL, it'll still work - another
+					 * YY_NULL will get returned.
+					 */
+					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
+
+					yy_act = YY_STATE_EOF(YY_START);
+					goto do_action;
+					}
+
+				else
+					{
+					if ( ! yy_did_buffer_switch_on_eof )
+						YY_NEW_FILE;
+					}
+				break;
+				}
+
+			case EOB_ACT_CONTINUE_SCAN:
+				yy_c_buf_p =
+					yytext_ptr + yy_amount_of_matched_text;
+
+				yy_current_state = yy_get_previous_state();
+
+				yy_cp = yy_c_buf_p;
+				yy_bp = yytext_ptr + YY_MORE_ADJ;
+				goto yy_match;
+
+			case EOB_ACT_LAST_MATCH:
+				yy_c_buf_p =
+				&yy_current_buffer->yy_ch_buf[yy_n_chars];
+
+				yy_current_state = yy_get_previous_state();
+
+				yy_cp = yy_c_buf_p;
+				yy_bp = yytext_ptr + YY_MORE_ADJ;
+				goto yy_find_action;
+			}
+		break;
+		}
+
+	default:
+		YY_FATAL_ERROR(
+			"fatal flex scanner internal error--no action found" );
+	} /* end of action switch */
+		} /* end of scanning one token */
+	} /* end of yylex */
+
+
+/* yy_get_next_buffer - try to read in a new buffer
+ *
+ * Returns a code representing an action:
+ *	EOB_ACT_LAST_MATCH -
+ *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
+ *	EOB_ACT_END_OF_FILE - end of file
+ */
+
+static int yy_get_next_buffer()
+	{
+	register char *dest = yy_current_buffer->yy_ch_buf;
+	register char *source = yytext_ptr;
+	register int number_to_move, i;
+	int ret_val;
+
+	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
+		YY_FATAL_ERROR(
+		"fatal flex scanner internal error--end of buffer missed" );
+
+	if ( yy_current_buffer->yy_fill_buffer == 0 )
+		{ /* Don't try to fill the buffer, so this is an EOF. */
+		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
+			{
+			/* We matched a single character, the EOB, so
+			 * treat this as a final EOF.
+			 */
+			return EOB_ACT_END_OF_FILE;
+			}
+
+		else
+			{
+			/* We matched some text prior to the EOB, first
+			 * process it.
+			 */
+			return EOB_ACT_LAST_MATCH;
+			}
+		}
+
+	/* Try to read more data. */
+
+	/* First move last chars to start of buffer. */
+	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;
+
+	for ( i = 0; i < number_to_move; ++i )
+		*(dest++) = *(source++);
+
+	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
+		/* don't do the read, it's not guaranteed to return an EOF,
+		 * just force an EOF
+		 */
+		yy_current_buffer->yy_n_chars = yy_n_chars = 0;
+
+	else
+		{
+		int num_to_read =
+			yy_current_buffer->yy_buf_size - number_to_move - 1;
+
+		while ( num_to_read <= 0 )
+			{ /* Not enough room in the buffer - grow it. */
+#ifdef YY_USES_REJECT
+			YY_FATAL_ERROR(
+"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
+#else
+
+			/* just a shorter name for the current buffer */
+			YY_BUFFER_STATE b = yy_current_buffer;
+
+			int yy_c_buf_p_offset =
+				(int) (yy_c_buf_p - b->yy_ch_buf);
+
+			if ( b->yy_is_our_buffer )
+				{
+				int new_size = b->yy_buf_size * 2;
+
+				if ( new_size <= 0 )
+					b->yy_buf_size += b->yy_buf_size / 8;
+				else
+					b->yy_buf_size *= 2;
+
+				b->yy_ch_buf = (char *)
+					/* Include room in for 2 EOB chars. */
+					yy_flex_realloc( (void *) b->yy_ch_buf,
+							 b->yy_buf_size + 2 );
+				}
+			else
+				/* Can't grow it, we don't own it. */
+				b->yy_ch_buf = 0;
+
+			if ( ! b->yy_ch_buf )
+				YY_FATAL_ERROR(
+				"fatal error - scanner input buffer overflow" );
+
+			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];
+
+			num_to_read = yy_current_buffer->yy_buf_size -
+						number_to_move - 1;
+#endif
+			}
+
+		if ( num_to_read > YY_READ_BUF_SIZE )
+			num_to_read = YY_READ_BUF_SIZE;
+
+		/* Read in more data. */
+		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
+			yy_n_chars, num_to_read );
+
+		yy_current_buffer->yy_n_chars = yy_n_chars;
+		}
+
+	if ( yy_n_chars == 0 )
+		{
+		if ( number_to_move == YY_MORE_ADJ )
+			{
+			ret_val = EOB_ACT_END_OF_FILE;
+			yyrestart( yyin );
+			}
+
+		else
+			{
+			ret_val = EOB_ACT_LAST_MATCH;
+			yy_current_buffer->yy_buffer_status =
+				YY_BUFFER_EOF_PENDING;
+			}
+		}
+
+	else
+		ret_val = EOB_ACT_CONTINUE_SCAN;
+
+	yy_n_chars += number_to_move;
+	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
+	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;
+
+	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];
+
+	return ret_val;
+	}
+
+
+/* yy_get_previous_state - get the state just before the EOB char was reached */
+
+static yy_state_type yy_get_previous_state()
+	{
+	register yy_state_type yy_current_state;
+	register char *yy_cp;
+
+	yy_current_state = yy_start;
+	yy_state_ptr = yy_state_buf;
+	*yy_state_ptr++ = yy_current_state;
+
+	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
+		{
+		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
+		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
+			{
+			yy_current_state = (int) yy_def[yy_current_state];
+			if ( yy_current_state >= 392 )
+				yy_c = yy_meta[(unsigned int) yy_c];
+			}
+		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
+		*yy_state_ptr++ = yy_current_state;
+		}
+
+	return yy_current_state;
+	}
+
+
+/* yy_try_NUL_trans - try to make a transition on the NUL character
+ *
+ * synopsis
+ *	next_state = yy_try_NUL_trans( current_state );
+ */
+
+#ifdef YY_USE_PROTOS
+static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
+#else
+static yy_state_type yy_try_NUL_trans( yy_current_state )
+yy_state_type yy_current_state;
+#endif
+	{
+	register int yy_is_jam;
+
+	register YY_CHAR yy_c = 1;
+	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
+		{
+		yy_current_state = (int) yy_def[yy_current_state];
+		if ( yy_current_state >= 392 )
+			yy_c = yy_meta[(unsigned int) yy_c];
+		}
+	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
+	yy_is_jam = (yy_current_state == 391);
+	if ( ! yy_is_jam )
+		*yy_state_ptr++ = yy_current_state;
+
+	return yy_is_jam ? 0 : yy_current_state;
+	}
+
+
+#ifndef YY_NO_UNPUT
+#ifdef YY_USE_PROTOS
+static void yyunput( int c, register char *yy_bp )
+#else
+static void yyunput( c, yy_bp )
+int c;
+register char *yy_bp;
+#endif
+	{
+	register char *yy_cp = yy_c_buf_p;
+
+	/* undo effects of setting up yytext */
+	*yy_cp = yy_hold_char;
+
+	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
+		{ /* need to shift things up to make room */
+		/* +2 for EOB chars. */
+		register int number_to_move = yy_n_chars + 2;
+		register char *dest = &yy_current_buffer->yy_ch_buf[
+					yy_current_buffer->yy_buf_size + 2];
+		register char *source =
+				&yy_current_buffer->yy_ch_buf[number_to_move];
+
+		while ( source > yy_current_buffer->yy_ch_buf )
+			*--dest = *--source;
+
+		yy_cp += (int) (dest - source);
+		yy_bp += (int) (dest - source);
+		yy_current_buffer->yy_n_chars =
+			yy_n_chars = yy_current_buffer->yy_buf_size;
+
+		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
+			YY_FATAL_ERROR( "flex scanner push-back overflow" );
+		}
+
+	*--yy_cp = (char) c;
+
+	if ( c == '\n' )
+		--yylineno;
+
+	yytext_ptr = yy_bp;
+	yy_hold_char = *yy_cp;
+	yy_c_buf_p = yy_cp;
+	}
+#endif	/* ifndef YY_NO_UNPUT */
+
+
+#ifdef __cplusplus
+static int yyinput()
+#else
+static int input()
+#endif
+	{
+	int c;
+
+	*yy_c_buf_p = yy_hold_char;
+
+	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
+		{
+		/* yy_c_buf_p now points to the character we want to return.
+		 * If this occurs *before* the EOB characters, then it's a
+		 * valid NUL; if not, then we've hit the end of the buffer.
+		 */
+		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
+			/* This was really a NUL. */
+			*yy_c_buf_p = '\0';
+
+		else
+			{ /* need more input */
+			int offset = yy_c_buf_p - yytext_ptr;
+			++yy_c_buf_p;
+
+			switch ( yy_get_next_buffer() )
+				{
+				case EOB_ACT_LAST_MATCH:
+					/* This happens because yy_g_n_b()
+					 * sees that we've accumulated a
+					 * token and flags that we need to
+					 * try matching the token before
+					 * proceeding.  But for input(),
+					 * there's no matching to consider.
+					 * So convert the EOB_ACT_LAST_MATCH
+					 * to EOB_ACT_END_OF_FILE.
+					 */
+
+					/* Reset buffer status. */
+					yyrestart( yyin );
+
+					/* fall through */
+
+				case EOB_ACT_END_OF_FILE:
+					{
+					if ( yywrap() )
+						return EOF;
+
+					if ( ! yy_did_buffer_switch_on_eof )
+						YY_NEW_FILE;
+#ifdef __cplusplus
+					return yyinput();
+#else
+					return input();
+#endif
+					}
+
+				case EOB_ACT_CONTINUE_SCAN:
+					yy_c_buf_p = yytext_ptr + offset;
+					break;
+				}
+			}
+		}
+
+	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
+	*yy_c_buf_p = '\0';	/* preserve yytext */
+	yy_hold_char = *++yy_c_buf_p;
+
+	if ( c == '\n' )
+		++yylineno;
+
+	return c;
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yyrestart( FILE *input_file )
+#else
+void yyrestart( input_file )
+FILE *input_file;
+#endif
+	{
+	if ( ! yy_current_buffer )
+		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );
+
+	yy_init_buffer( yy_current_buffer, input_file );
+	yy_load_buffer_state();
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
+#else
+void yy_switch_to_buffer( new_buffer )
+YY_BUFFER_STATE new_buffer;
+#endif
+	{
+	if ( yy_current_buffer == new_buffer )
+		return;
+
+	if ( yy_current_buffer )
+		{
+		/* Flush out information for old buffer. */
+		*yy_c_buf_p = yy_hold_char;
+		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
+		yy_current_buffer->yy_n_chars = yy_n_chars;
+		}
+
+	yy_current_buffer = new_buffer;
+	yy_load_buffer_state();
+
+	/* We don't actually know whether we did this switch during
+	 * EOF (yywrap()) processing, but the only time this flag
+	 * is looked at is after yywrap() is called, so it's safe
+	 * to go ahead and always set it.
+	 */
+	yy_did_buffer_switch_on_eof = 1;
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yy_load_buffer_state( void )
+#else
+void yy_load_buffer_state()
+#endif
+	{
+	yy_n_chars = yy_current_buffer->yy_n_chars;
+	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
+	yyin = yy_current_buffer->yy_input_file;
+	yy_hold_char = *yy_c_buf_p;
+	}
+
+
+#ifdef YY_USE_PROTOS
+YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
+#else
+YY_BUFFER_STATE yy_create_buffer( file, size )
+FILE *file;
+int size;
+#endif
+	{
+	YY_BUFFER_STATE b;
+
+	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
+	if ( ! b )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
+
+	b->yy_buf_size = size;
+
+	/* yy_ch_buf has to be 2 characters longer than the size given because
+	 * we need to put in 2 end-of-buffer characters.
+	 */
+	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
+	if ( ! b->yy_ch_buf )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
+
+	b->yy_is_our_buffer = 1;
+
+	yy_init_buffer( b, file );
+
+	return b;
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yy_delete_buffer( YY_BUFFER_STATE b )
+#else
+void yy_delete_buffer( b )
+YY_BUFFER_STATE b;
+#endif
+	{
+	if ( ! b )
+		return;
+
+	if ( b == yy_current_buffer )
+		yy_current_buffer = (YY_BUFFER_STATE) 0;
+
+	if ( b->yy_is_our_buffer )
+		yy_flex_free( (void *) b->yy_ch_buf );
+
+	yy_flex_free( (void *) b );
+	}
+
+
+#ifndef YY_ALWAYS_INTERACTIVE
+#ifndef YY_NEVER_INTERACTIVE
+extern int isatty YY_PROTO(( int ));
+#endif
+#endif
+
+#ifdef YY_USE_PROTOS
+void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
+#else
+void yy_init_buffer( b, file )
+YY_BUFFER_STATE b;
+FILE *file;
+#endif
+
+
+	{
+	yy_flush_buffer( b );
+
+	b->yy_input_file = file;
+	b->yy_fill_buffer = 1;
+
+#if YY_ALWAYS_INTERACTIVE
+	b->yy_is_interactive = 1;
+#else
+#if YY_NEVER_INTERACTIVE
+	b->yy_is_interactive = 0;
+#else
+	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
+#endif
+#endif
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yy_flush_buffer( YY_BUFFER_STATE b )
+#else
+void yy_flush_buffer( b )
+YY_BUFFER_STATE b;
+#endif
+
+	{
+	if ( ! b )
+		return;
+
+	b->yy_n_chars = 0;
+
+	/* We always need two end-of-buffer characters.  The first causes
+	 * a transition to the end-of-buffer state.  The second causes
+	 * a jam in that state.
+	 */
+	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
+	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
+
+	b->yy_buf_pos = &b->yy_ch_buf[0];
+
+	b->yy_at_bol = 1;
+	b->yy_buffer_status = YY_BUFFER_NEW;
+
+	if ( b == yy_current_buffer )
+		yy_load_buffer_state();
+	}
+
+
+#ifndef YY_NO_SCAN_BUFFER
+#ifdef YY_USE_PROTOS
+YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
+#else
+YY_BUFFER_STATE yy_scan_buffer( base, size )
+char *base;
+yy_size_t size;
+#endif
+	{
+	YY_BUFFER_STATE b;
+
+	if ( size < 2 ||
+	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
+	     base[size-1] != YY_END_OF_BUFFER_CHAR )
+		/* They forgot to leave room for the EOB's. */
+		return 0;
+
+	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
+	if ( ! b )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
+
+	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
+	b->yy_buf_pos = b->yy_ch_buf = base;
+	b->yy_is_our_buffer = 0;
+	b->yy_input_file = 0;
+	b->yy_n_chars = b->yy_buf_size;
+	b->yy_is_interactive = 0;
+	b->yy_at_bol = 1;
+	b->yy_fill_buffer = 0;
+	b->yy_buffer_status = YY_BUFFER_NEW;
+
+	yy_switch_to_buffer( b );
+
+	return b;
+	}
+#endif
+
+
+#ifndef YY_NO_SCAN_STRING
+#ifdef YY_USE_PROTOS
+YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
+#else
+YY_BUFFER_STATE yy_scan_string( yy_str )
+yyconst char *yy_str;
+#endif
+	{
+	int len;
+	for ( len = 0; yy_str[len]; ++len )
+		;
+
+	return yy_scan_bytes( yy_str, len );
+	}
+#endif
+
+
+#ifndef YY_NO_SCAN_BYTES
+#ifdef YY_USE_PROTOS
+YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
+#else
+YY_BUFFER_STATE yy_scan_bytes( bytes, len )
+yyconst char *bytes;
+int len;
+#endif
+	{
+	YY_BUFFER_STATE b;
+	char *buf;
+	yy_size_t n;
+	int i;
+
+	/* Get memory for full buffer, including space for trailing EOB's. */
+	n = len + 2;
+	buf = (char *) yy_flex_alloc( n );
+	if ( ! buf )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
+
+	for ( i = 0; i < len; ++i )
+		buf[i] = bytes[i];
+
+	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;
+
+	b = yy_scan_buffer( buf, n );
+	if ( ! b )
+		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
+
+	/* It's okay to grow etc. this buffer, and we should throw it
+	 * away when we're done.
+	 */
+	b->yy_is_our_buffer = 1;
+
+	return b;
+	}
+#endif
+
+
+#ifndef YY_NO_PUSH_STATE
+#ifdef YY_USE_PROTOS
+static void yy_push_state( int new_state )
+#else
+static void yy_push_state( new_state )
+int new_state;
+#endif
+	{
+	if ( yy_start_stack_ptr >= yy_start_stack_depth )
+		{
+		yy_size_t new_size;
+
+		yy_start_stack_depth += YY_START_STACK_INCR;
+		new_size = yy_start_stack_depth * sizeof( int );
+
+		if ( ! yy_start_stack )
+			yy_start_stack = (int *) yy_flex_alloc( new_size );
+
+		else
+			yy_start_stack = (int *) yy_flex_realloc(
+					(void *) yy_start_stack, new_size );
+
+		if ( ! yy_start_stack )
+			YY_FATAL_ERROR(
+			"out of memory expanding start-condition stack" );
+		}
+
+	yy_start_stack[yy_start_stack_ptr++] = YY_START;
+
+	BEGIN(new_state);
+	}
+#endif
+
+
+#ifndef YY_NO_POP_STATE
+static void yy_pop_state()
+	{
+	if ( --yy_start_stack_ptr < 0 )
+		YY_FATAL_ERROR( "start-condition stack underflow" );
+
+	BEGIN(yy_start_stack[yy_start_stack_ptr]);
+	}
+#endif
+
+
+#ifndef YY_NO_TOP_STATE
+static int yy_top_state()
+	{
+	return yy_start_stack[yy_start_stack_ptr - 1];
+	}
+#endif
+
+#ifndef YY_EXIT_FAILURE
+#define YY_EXIT_FAILURE 2
+#endif
+
+#ifdef YY_USE_PROTOS
+static void yy_fatal_error( yyconst char msg[] )
+#else
+static void yy_fatal_error( msg )
+char msg[];
+#endif
+	{
+	(void) fprintf( stderr, "%s\n", msg );
+	exit( YY_EXIT_FAILURE );
+	}
+
+
+
+/* Redefine yyless() so it works in section 3 code. */
+
+#undef yyless
+#define yyless(n) \
+	do \
+		{ \
+		/* Undo effects of setting up yytext. */ \
+		yytext[yyleng] = yy_hold_char; \
+		yy_c_buf_p = yytext + n; \
+		yy_hold_char = *yy_c_buf_p; \
+		*yy_c_buf_p = '\0'; \
+		yyleng = n; \
+		} \
+	while ( 0 )
+
+
+/* Internal utility routines. */
+
+#ifndef yytext_ptr
+#ifdef YY_USE_PROTOS
+static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
+#else
+static void yy_flex_strncpy( s1, s2, n )
+char *s1;
+yyconst char *s2;
+int n;
+#endif
+	{
+	register int i;
+	for ( i = 0; i < n; ++i )
+		s1[i] = s2[i];
+	}
+#endif
+
+#ifdef YY_NEED_STRLEN
+#ifdef YY_USE_PROTOS
+static int yy_flex_strlen( yyconst char *s )
+#else
+static int yy_flex_strlen( s )
+yyconst char *s;
+#endif
+	{
+	register int n;
+	for ( n = 0; s[n]; ++n )
+		;
+
+	return n;
+	}
+#endif
+
+
+#ifdef YY_USE_PROTOS
+static void *yy_flex_alloc( yy_size_t size )
+#else
+static void *yy_flex_alloc( size )
+yy_size_t size;
+#endif
+	{
+	return (void *) malloc( size );
+	}
+
+#ifdef YY_USE_PROTOS
+static void *yy_flex_realloc( void *ptr, yy_size_t size )
+#else
+static void *yy_flex_realloc( ptr, size )
+void *ptr;
+yy_size_t size;
+#endif
+	{
+	/* The cast to (char *) in the following accommodates both
+	 * implementations that use char* generic pointers, and those
+	 * that use void* generic pointers.  It works with the latter
+	 * because both ANSI C and C++ allow castless assignment from
+	 * any pointer type to void*, and deal with argument conversions
+	 * as though doing an assignment.
+	 */
+	return (void *) realloc( (char *) ptr, size );
+	}
+
+#ifdef YY_USE_PROTOS
+static void yy_flex_free( void *ptr )
+#else
+static void yy_flex_free( ptr )
+void *ptr;
+#endif
+	{
+	free( ptr );
+	}
+
+#if YY_MAIN
+int main()
+	{
+	yylex();
+	return 0;
+	}
+#endif
+#line 130 "matcher_parser_lex.l"
+
diff -urN matcher_parser_parse.c matcher_parser_parse.c
--- matcher_parser_parse.c	Thu Jan 01 01:00:00 1970
+++ matcher_parser_parse.c	Fri Apr 12 05:00:52 2002
@@ -0,0 +1,2266 @@
+/* A Bison parser, made from /src/sylpheed-claws/sylpheed-claws/src/matcher_parser_parse.y
+   by GNU bison 1.31.  */
+
+#define YYBISON 1  /* Identify Bison output.  */
+
+# define	MATCHER_ALL	257
+# define	MATCHER_UNREAD	258
+# define	MATCHER_NOT_UNREAD	259
+# define	MATCHER_NEW	260
+# define	MATCHER_NOT_NEW	261
+# define	MATCHER_MARKED	262
+# define	MATCHER_NOT_MARKED	263
+# define	MATCHER_DELETED	264
+# define	MATCHER_NOT_DELETED	265
+# define	MATCHER_REPLIED	266
+# define	MATCHER_NOT_REPLIED	267
+# define	MATCHER_FORWARDED	268
+# define	MATCHER_NOT_FORWARDED	269
+# define	MATCHER_SUBJECT	270
+# define	MATCHER_NOT_SUBJECT	271
+# define	MATCHER_FROM	272
+# define	MATCHER_NOT_FROM	273
+# define	MATCHER_TO	274
+# define	MATCHER_NOT_TO	275
+# define	MATCHER_CC	276
+# define	MATCHER_NOT_CC	277
+# define	MATCHER_TO_OR_CC	278
+# define	MATCHER_NOT_TO_AND_NOT_CC	279
+# define	MATCHER_AGE_GREATER	280
+# define	MATCHER_AGE_LOWER	281
+# define	MATCHER_NEWSGROUPS	282
+# define	MATCHER_NOT_NEWSGROUPS	283
+# define	MATCHER_INREPLYTO	284
+# define	MATCHER_NOT_INREPLYTO	285
+# define	MATCHER_REFERENCES	286
+# define	MATCHER_NOT_REFERENCES	287
+# define	MATCHER_SCORE_GREATER	288
+# define	MATCHER_SCORE_LOWER	289
+# define	MATCHER_HEADER	290
+# define	MATCHER_NOT_HEADER	291
+# define	MATCHER_HEADERS_PART	292
+# define	MATCHER_NOT_HEADERS_PART	293
+# define	MATCHER_MESSAGE	294
+# define	MATCHER_NOT_MESSAGE	295
+# define	MATCHER_BODY_PART	296
+# define	MATCHER_NOT_BODY_PART	297
+# define	MATCHER_EXECUTE	298
+# define	MATCHER_NOT_EXECUTE	299
+# define	MATCHER_MATCHCASE	300
+# define	MATCHER_MATCH	301
+# define	MATCHER_REGEXPCASE	302
+# define	MATCHER_REGEXP	303
+# define	MATCHER_SCORE	304
+# define	MATCHER_MOVE	305
+# define	MATCHER_COPY	306
+# define	MATCHER_DELETE	307
+# define	MATCHER_MARK	308
+# define	MATCHER_UNMARK	309
+# define	MATCHER_MARK_AS_READ	310
+# define	MATCHER_MARK_AS_UNREAD	311
+# define	MATCHER_FORWARD	312
+# define	MATCHER_FORWARD_AS_ATTACHMENT	313
+# define	MATCHER_EOL	314
+# define	MATCHER_STRING	315
+# define	MATCHER_OR	316
+# define	MATCHER_AND	317
+# define	MATCHER_COLOR	318
+# define	MATCHER_SCORE_EQUAL	319
+# define	MATCHER_BOUNCE	320
+# define	MATCHER_DELETE_ON_SERVER	321
+# define	MATCHER_SIZE_GREATER	322
+# define	MATCHER_SIZE_SMALLER	323
+# define	MATCHER_SIZE_EQUAL	324
+# define	MATCHER_SECTION	325
+# define	MATCHER_INTEGER	326
+
+#line 1 "matcher_parser_parse.y"
+
+#include "defs.h"
+
+#include <glib.h>
+
+#include "intl.h"
+#include "utils.h"
+#include "filtering.h"
+#include "scoring.h"
+#include "matcher.h"
+#include "matcher_parser.h"
+#include "matcher_parser_lex.h"
+
+static gint error = 0;
+static gint bool_op = 0;
+static gint match_type = 0;
+static gchar * header = NULL;
+
+static MatcherProp * prop;
+
+static GSList * matchers_list = NULL;
+
+static MatcherList * cond;
+static gint score = 0;
+static FilteringAction * action = NULL;
+
+static FilteringProp *  filtering;
+static ScoringProp * scoring = NULL;
+
+static GSList ** prefs_scoring = NULL;
+static GSList ** prefs_filtering = NULL;
+
+static int matcher_parser_dialog = 0;
+
+
+/* ******************************************************************** */
+
+
+
+void matcher_parser_start_parsing(FILE * f)
+{
+	matcher_parserrestart(f);
+	matcher_parserparse();
+}
+ 
+FilteringProp * matcher_parser_get_filtering(gchar * str)
+{
+	void * bufstate;
+
+	/* bad coding to enable the sub-grammar matching
+	   in yacc */
+	matcher_parserlineno = 1;
+	matcher_parser_dialog = 1;
+	bufstate = matcher_parser_scan_string(str);
+	if (matcher_parserparse() != 0)
+		filtering = NULL;
+	matcher_parser_dialog = 0;
+	matcher_parser_delete_buffer(bufstate);
+	return filtering;
+}
+
+ScoringProp * matcher_parser_get_scoring(gchar * str)
+{
+	void * bufstate;
+
+	/* bad coding to enable the sub-grammar matching
+	   in yacc */
+	matcher_parserlineno = 1;
+	matcher_parser_dialog = 1;
+	bufstate = matcher_parser_scan_string(str);
+	if (matcher_parserparse() != 0)
+		scoring = NULL;
+	matcher_parser_dialog = 0;
+	matcher_parser_delete_buffer(bufstate);
+	return scoring;
+}
+
+MatcherList * matcher_parser_get_cond(gchar * str)
+{
+	void * bufstate;
+
+	/* bad coding to enable the sub-grammar matching
+	   in yacc */
+	matcher_parserlineno = 1;
+	matcher_parser_dialog = 1;
+	bufstate = matcher_parser_scan_string(str);
+	matcher_parserparse();
+	matcher_parser_dialog = 0;
+	matcher_parser_delete_buffer(bufstate);
+	return cond;
+}
+
+MatcherProp * matcher_parser_get_prop(gchar * str)
+{
+	MatcherList * list;
+	MatcherProp * prop;
+
+	matcher_parserlineno = 1;
+	list = matcher_parser_get_cond(str);
+	if (list == NULL)
+		return NULL;
+
+	if (list->matchers == NULL)
+		return NULL;
+
+	if (list->matchers->next != NULL)
+		return NULL;
+
+	prop = list->matchers->data;
+
+	g_slist_free(list->matchers);
+	g_free(list);
+
+	return prop;
+}
+
+void matcher_parsererror(char * str)
+{
+	GSList * l;
+
+	if (matchers_list) {
+		for(l = matchers_list ; l != NULL ;
+		    l = g_slist_next(l))
+			matcherprop_free((MatcherProp *)
+					 l->data);
+		g_slist_free(matchers_list);
+		matchers_list = NULL;
+	}
+
+	g_warning(_("scoring / filtering parsing: %i: %s\n"),
+		  matcher_parserlineno, str);
+	error = 1;
+}
+
+int matcher_parserwrap(void)
+{
+	return 1;
+}
+
+#line 141 "matcher_parser_parse.y"
+#ifndef YYSTYPE
+typedef union {
+	char * str;
+	int value;
+} yystype;
+# define YYSTYPE yystype
+#endif
+#ifndef YYDEBUG
+# define YYDEBUG 0
+#endif
+
+
+
+#define	YYFINAL		165
+#define	YYFLAG		-32768
+#define	YYNTBASE	73
+
+/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
+#define YYTRANSLATE(x) ((unsigned)(x) <= 326 ? yytranslate[x] : 91)
+
+/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
+static const char yytranslate[] =
+{
+       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
+       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
+      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
+      36,    37,    38,    39,    40,    41,    42,    43,    44,    45,
+      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
+      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
+      66,    67,    68,    69,    70,    71,    72
+};
+
+#if YYDEBUG
+static const short yyprhs[] =
+{
+       0,     0,     1,     4,     7,     9,    11,    13,    16,    19,
+      22,    24,    27,    28,    30,    31,    33,    35,    37,    39,
+      41,    43,    45,    49,    51,    53,    55,    57,    59,    61,
+      63,    65,    67,    69,    71,    73,    75,    77,    79,    81,
+      85,    89,    93,    97,   101,   105,   109,   113,   117,   121,
+     124,   127,   131,   135,   139,   143,   147,   151,   154,   157,
+     160,   163,   166,   169,   170,   176,   177,   183,   187,   191,
+     195,   199,   203,   207,   210,   213,   216,   219,   222,   224,
+     226,   228,   230,   232,   236,   240,   244,   247,   249
+};
+static const short yyrhs[] =
+{
+      -1,    74,    75,     0,    76,    75,     0,    76,     0,    77,
+       0,    78,     0,     1,    60,     0,    71,    60,     0,    83,
+      79,     0,    60,     0,    81,    80,     0,     0,    60,     0,
+       0,    89,     0,    90,     0,    46,     0,    47,     0,    48,
+       0,    49,     0,    84,     0,    84,    85,    86,     0,    86,
+       0,    63,     0,    62,     0,     3,     0,     4,     0,     5,
+       0,     6,     0,     7,     0,     8,     0,     9,     0,    10,
+       0,    11,     0,    12,     0,    13,     0,    14,     0,    15,
+       0,    16,    82,    61,     0,    17,    82,    61,     0,    18,
+      82,    61,     0,    19,    82,    61,     0,    20,    82,    61,
+       0,    21,    82,    61,     0,    22,    82,    61,     0,    23,
+      82,    61,     0,    24,    82,    61,     0,    25,    82,    61,
+       0,    26,    72,     0,    27,    72,     0,    28,    82,    61,
+       0,    29,    82,    61,     0,    30,    82,    61,     0,    31,
+      82,    61,     0,    32,    82,    61,     0,    33,    82,    61,
+       0,    34,    72,     0,    35,    72,     0,    65,    72,     0,
+      68,    72,     0,    69,    72,     0,    70,    72,     0,     0,
+      36,    61,    87,    82,    61,     0,     0,    37,    61,    88,
+      82,    61,     0,    38,    82,    61,     0,    39,    82,    61,
+       0,    40,    82,    61,     0,    41,    82,    61,     0,    42,
+      82,    61,     0,    43,    82,    61,     0,    44,    61,     0,
+      45,    61,     0,    44,    61,     0,    51,    61,     0,    52,
+      61,     0,    53,     0,    54,     0,    55,     0,    56,     0,
+      57,     0,    58,    72,    61,     0,    59,    72,    61,     0,
+      66,    72,    61,     0,    64,    72,     0,    67,     0,    50,
+      72,     0
+};
+
+#endif
+
+#if YYDEBUG
+/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
+static const short yyrline[] =
+{
+       0,   176,   176,   185,   188,   191,   193,   194,   199,   219,
+     221,   224,   226,   237,   239,   250,   262,   274,   279,   283,
+     287,   293,   301,   306,   313,   318,   324,   332,   339,   346,
+     353,   360,   367,   374,   381,   388,   395,   402,   409,   416,
+     425,   434,   443,   452,   461,   470,   479,   488,   497,   506,
+     515,   524,   533,   542,   551,   560,   569,   578,   587,   596,
+     605,   613,   621,   629,   629,   642,   642,   655,   664,   673,
+     682,   691,   700,   709,   718,   729,   739,   748,   757,   764,
+     771,   778,   785,   792,   803,   814,   825,   834,   842
+};
+#endif
+
+
+#if (YYDEBUG) || defined YYERROR_VERBOSE
+
+/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
+static const char *const yytname[] =
+{
+  "$", "error", "$undefined.", "MATCHER_ALL", "MATCHER_UNREAD", 
+  "MATCHER_NOT_UNREAD", "MATCHER_NEW", "MATCHER_NOT_NEW", 
+  "MATCHER_MARKED", "MATCHER_NOT_MARKED", "MATCHER_DELETED", 
+  "MATCHER_NOT_DELETED", "MATCHER_REPLIED", "MATCHER_NOT_REPLIED", 
+  "MATCHER_FORWARDED", "MATCHER_NOT_FORWARDED", "MATCHER_SUBJECT", 
+  "MATCHER_NOT_SUBJECT", "MATCHER_FROM", "MATCHER_NOT_FROM", "MATCHER_TO", 
+  "MATCHER_NOT_TO", "MATCHER_CC", "MATCHER_NOT_CC", "MATCHER_TO_OR_CC", 
+  "MATCHER_NOT_TO_AND_NOT_CC", "MATCHER_AGE_GREATER", "MATCHER_AGE_LOWER", 
+  "MATCHER_NEWSGROUPS", "MATCHER_NOT_NEWSGROUPS", "MATCHER_INREPLYTO", 
+  "MATCHER_NOT_INREPLYTO", "MATCHER_REFERENCES", "MATCHER_NOT_REFERENCES", 
+  "MATCHER_SCORE_GREATER", "MATCHER_SCORE_LOWER", "MATCHER_HEADER", 
+  "MATCHER_NOT_HEADER", "MATCHER_HEADERS_PART", 
+  "MATCHER_NOT_HEADERS_PART", "MATCHER_MESSAGE", "MATCHER_NOT_MESSAGE", 
+  "MATCHER_BODY_PART", "MATCHER_NOT_BODY_PART", "MATCHER_EXECUTE", 
+  "MATCHER_NOT_EXECUTE", "MATCHER_MATCHCASE", "MATCHER_MATCH", 
+  "MATCHER_REGEXPCASE", "MATCHER_REGEXP", "MATCHER_SCORE", "MATCHER_MOVE", 
+  "MATCHER_COPY", "MATCHER_DELETE", "MATCHER_MARK", "MATCHER_UNMARK", 
+  "MATCHER_MARK_AS_READ", "MATCHER_MARK_AS_UNREAD", "MATCHER_FORWARD", 
+  "MATCHER_FORWARD_AS_ATTACHMENT", "MATCHER_EOL", "MATCHER_STRING", 
+  "MATCHER_OR", "MATCHER_AND", "MATCHER_COLOR", "MATCHER_SCORE_EQUAL", 
+  "MATCHER_BOUNCE", "MATCHER_DELETE_ON_SERVER", "MATCHER_SIZE_GREATER", 
+  "MATCHER_SIZE_SMALLER", "MATCHER_SIZE_EQUAL", "MATCHER_SECTION", 
+  "MATCHER_INTEGER", "file", "@1", "file_line_list", "file_line", 
+  "section_notification", "instruction", "end_instr_opt", "end_action", 
+  "filtering_or_scoring", "match_type", "condition", "condition_list", 
+  "bool_op", "one_condition", "@2", "@3", "filtering_action", 
+  "scoring_rule", NULL
+};
+#endif
+
+/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
+static const short yyr1[] =
+{
+       0,    74,    73,    75,    75,    76,    76,    76,    77,    78,
+      78,    79,    79,    80,    80,    81,    81,    82,    82,    82,
+      82,    83,    84,    84,    85,    85,    86,    86,    86,    86,
+      86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
+      86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
+      86,    86,    86,    86,    86,    86,    86,    86,    86,    86,
+      86,    86,    86,    87,    86,    88,    86,    86,    86,    86,
+      86,    86,    86,    86,    86,    89,    89,    89,    89,    89,
+      89,    89,    89,    89,    89,    89,    89,    89,    90
+};
+
+/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
+static const short yyr2[] =
+{
+       0,     0,     2,     2,     1,     1,     1,     2,     2,     2,
+       1,     2,     0,     1,     0,     1,     1,     1,     1,     1,
+       1,     1,     3,     1,     1,     1,     1,     1,     1,     1,
+       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
+       3,     3,     3,     3,     3,     3,     3,     3,     3,     2,
+       2,     3,     3,     3,     3,     3,     3,     2,     2,     2,
+       2,     2,     2,     0,     5,     0,     5,     3,     3,     3,
+       3,     3,     3,     2,     2,     2,     2,     2,     1,     1,
+       1,     1,     1,     3,     3,     3,     2,     1,     2
+};
+
+/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
+   doesn't specify something else to do.  Zero means the default is an
+   error. */
+static const short yydefact[] =
+{
+       1,     0,     0,    26,    27,    28,    29,    30,    31,    32,
+      33,    34,    35,    36,    37,    38,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,    10,     0,     0,     0,
+       0,     0,     2,     0,     5,     6,    12,    21,    23,     7,
+      17,    18,    19,    20,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,    49,    50,     0,     0,     0,     0,
+       0,     0,    57,    58,    63,    65,     0,     0,     0,     0,
+       0,     0,    73,    74,    59,    60,    61,    62,     8,     3,
+       0,     0,     0,     0,    78,    79,    80,    81,    82,     0,
+       0,     0,     0,    87,     9,    14,    15,    16,    25,    24,
+       0,    39,    40,    41,    42,    43,    44,    45,    46,    47,
+      48,    51,    52,    53,    54,    55,    56,     0,     0,    67,
+      68,    69,    70,    71,    72,    75,    88,    76,    77,     0,
+       0,    86,     0,    13,    11,    22,     0,     0,    83,    84,
+      85,    64,    66,     0,     0,     0
+};
+
+static const short yydefgoto[] =
+{
+     163,     1,    52,    53,    54,    55,   114,   154,   115,    64,
+      56,    57,   120,    58,   137,   138,   116,   117
+};
+
+static const short yypact[] =
+{
+  -32768,   121,   -31,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,   -29,   -29,   -29,   -29,
+     -29,   -29,   -29,   -29,   -29,   -29,     1,     2,   -29,   -29,
+     -29,   -29,   -29,   -29,     3,     4,    16,    17,   -29,   -29,
+     -29,   -29,   -29,   -29,    18,    19,-32768,     9,    10,    11,
+      12,    25,-32768,    27,-32768,-32768,    49,   -53,-32768,-32768,
+  -32768,-32768,-32768,-32768,    28,    29,    30,    33,    48,    50,
+      51,    53,    56,    57,-32768,-32768,    58,    62,   106,   107,
+     108,   109,-32768,-32768,-32768,-32768,   110,   111,   112,   113,
+     114,   115,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+     116,    14,   117,   118,-32768,-32768,-32768,-32768,-32768,    38,
+     164,   165,   166,-32768,-32768,   120,-32768,-32768,-32768,-32768,
+     190,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,   -29,   -29,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,   122,
+     123,-32768,   124,-32768,-32768,-32768,   126,   127,-32768,-32768,
+  -32768,-32768,-32768,    88,   182,-32768
+};
+
+static const short yypgoto[] =
+{
+  -32768,-32768,   186,-32768,-32768,-32768,-32768,-32768,-32768,   -17,
+  -32768,-32768,-32768,   125,-32768,-32768,-32768,-32768
+};
+
+
+#define	YYLAST		260
+
+
+static const short yytable[] =
+{
+      65,    66,    67,    68,    69,    70,    71,    72,    73,   118,
+     119,    76,    77,    78,    79,    80,    81,    60,    61,    62,
+      63,    86,    87,    88,    89,    90,    91,    -4,     2,    59,
+       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
+      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
+      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
+      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
+      43,    44,    45,    74,    75,    82,    83,    84,    85,    92,
+      93,    94,    95,    96,    97,    98,   146,    46,   164,   121,
+     122,   123,    47,   100,   124,    48,    49,    50,    51,   101,
+     102,   103,   104,   105,   106,   107,   108,   109,   110,   125,
+     149,   126,   127,   111,   128,   112,   113,   129,   130,   131,
+     156,   157,     2,   132,     3,     4,     5,     6,     7,     8,
+       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
+      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
+      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
+      39,    40,    41,    42,    43,    44,    45,   133,   134,   135,
+     136,   139,   140,   141,   142,   143,   144,   145,   147,   148,
+     153,    46,   165,   158,   159,   160,    47,   161,   162,    48,
+      49,    50,    51,     3,     4,     5,     6,     7,     8,     9,
+      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
+      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
+      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
+      40,    41,    42,    43,    44,    45,   150,   151,   152,    99,
+       0,     0,     0,     0,     0,   155,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,    47,     0,     0,    48,    49,
+      50
+};
+
+static const short yycheck[] =
+{
+      17,    18,    19,    20,    21,    22,    23,    24,    25,    62,
+      63,    28,    29,    30,    31,    32,    33,    46,    47,    48,
+      49,    38,    39,    40,    41,    42,    43,     0,     1,    60,
+       3,     4,     5,     6,     7,     8,     9,    10,    11,    12,
+      13,    14,    15,    16,    17,    18,    19,    20,    21,    22,
+      23,    24,    25,    26,    27,    28,    29,    30,    31,    32,
+      33,    34,    35,    36,    37,    38,    39,    40,    41,    42,
+      43,    44,    45,    72,    72,    72,    72,    61,    61,    61,
+      61,    72,    72,    72,    72,    60,    72,    60,     0,    61,
+      61,    61,    65,    44,    61,    68,    69,    70,    71,    50,
+      51,    52,    53,    54,    55,    56,    57,    58,    59,    61,
+      72,    61,    61,    64,    61,    66,    67,    61,    61,    61,
+     137,   138,     1,    61,     3,     4,     5,     6,     7,     8,
+       9,    10,    11,    12,    13,    14,    15,    16,    17,    18,
+      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
+      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
+      39,    40,    41,    42,    43,    44,    45,    61,    61,    61,
+      61,    61,    61,    61,    61,    61,    61,    61,    61,    61,
+      60,    60,     0,    61,    61,    61,    65,    61,    61,    68,
+      69,    70,    71,     3,     4,     5,     6,     7,     8,     9,
+      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
+      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
+      30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
+      40,    41,    42,    43,    44,    45,    72,    72,    72,    53,
+      -1,    -1,    -1,    -1,    -1,   120,    -1,    -1,    -1,    -1,
+      -1,    -1,    -1,    -1,    -1,    65,    -1,    -1,    68,    69,
+      70
+};
+/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
+#line 3 "/usr/share/bison/bison.simple"
+
+/* Skeleton output parser for bison,
+   Copyright (C) 1984, 1989, 1990, 2000, 2001 Free Software Foundation, Inc.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2, or (at your option)
+   any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 59 Temple Place - Suite 330,
+   Boston, MA 02111-1307, USA.  */
+
+/* As a special exception, when this file is copied by Bison into a
+   Bison output file, you may use that output file without restriction.
+   This special exception was added by the Free Software Foundation
+   in version 1.24 of Bison.  */
+
+/* This is the parser code that is written into each bison parser when
+   the %semantic_parser declaration is not specified in the grammar.
+   It was written by Richard Stallman by simplifying the hairy parser
+   used when %semantic_parser is specified.  */
+
+/* All symbols defined below should begin with yy or YY, to avoid
+   infringing on user name space.  This should be done even for local
+   variables, as they might otherwise be expanded by user macros.
+   There are some unavoidable exceptions within include files to
+   define necessary library symbols; they are noted "INFRINGES ON
+   USER NAME SPACE" below.  */
+
+#ifdef __cplusplus
+# define YYSTD(x) std::x
+#else
+# define YYSTD(x) x
+#endif
+
+#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)
+
+/* The parser invokes alloca or malloc; define the necessary symbols.  */
+
+# if YYSTACK_USE_ALLOCA
+#  define YYSTACK_ALLOC alloca
+#  define YYSIZE_T YYSTD (size_t)
+# else
+#  ifndef YYSTACK_USE_ALLOCA
+#   if defined (alloca) || defined (_ALLOCA_H)
+#    define YYSTACK_ALLOC alloca
+#    define YYSIZE_T YYSTD (size_t)
+#   else
+#    ifdef __GNUC__
+#     define YYSTACK_ALLOC __builtin_alloca
+#    endif
+#   endif
+#  endif
+# endif
+
+# ifdef YYSTACK_ALLOC
+   /* Pacify GCC's `empty if-body' warning. */
+#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
+# else
+#  ifdef __cplusplus
+#   include <cstdlib> /* INFRINGES ON USER NAME SPACE */
+#   define YYSIZE_T std::size_t
+#  else
+#   ifdef __STDC__
+#    include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
+#    define YYSIZE_T size_t
+#   endif
+#  endif
+#  define YYSTACK_ALLOC YYSTD (malloc)
+#  define YYSTACK_FREE YYSTD (free)
+# endif
+
+/* A type that is properly aligned for any stack member.  */
+union yyalloc
+{
+  short yyss;
+  YYSTYPE yyvs;
+# if YYLSP_NEEDED
+  YYLTYPE yyls;
+# endif
+};
+
+/* The size of the maximum gap between one aligned stack and the next.  */
+# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)
+
+/* The size of an array large to enough to hold all stacks, each with
+   N elements.  */
+# if YYLSP_NEEDED
+#  define YYSTACK_BYTES(N) \
+     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
+      + 2 * YYSTACK_GAP_MAX)
+# else
+#  define YYSTACK_BYTES(N) \
+     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
+      + YYSTACK_GAP_MAX)
+# endif
+
+/* Relocate the TYPE STACK from its old location to the new one.  The
+   local variables YYSIZE and YYSTACKSIZE give the old and new number of
+   elements in the stack, and YYPTR gives the new location of the
+   stack.  Advance YYPTR to a properly aligned location for the next
+   stack.  */
+# define YYSTACK_RELOCATE(Type, Stack)					\
+    do									\
+      {									\
+	YYSIZE_T yynewbytes;						\
+	yymemcpy ((char *) yyptr, (char *) (Stack),			\
+		  yysize * (YYSIZE_T) sizeof (Type));			\
+	Stack = &yyptr->Stack;						\
+	yynewbytes = yystacksize * sizeof (Type) + YYSTACK_GAP_MAX;	\
+	yyptr += yynewbytes / sizeof (*yyptr);				\
+      }									\
+    while (0)
+
+#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */
+
+
+#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
+# define YYSIZE_T __SIZE_TYPE__
+#endif
+#if ! defined (YYSIZE_T) && defined (size_t)
+# define YYSIZE_T size_t
+#endif
+#if ! defined (YYSIZE_T)
+# ifdef __cplusplus
+#  include <cstddef> /* INFRINGES ON USER NAME SPACE */
+#  define YYSIZE_T std::size_t
+# else
+#  ifdef __STDC__
+#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
+#   define YYSIZE_T size_t
+#  endif
+# endif
+#endif
+#if ! defined (YYSIZE_T)
+# define YYSIZE_T unsigned int
+#endif
+
+#define yyerrok		(yyerrstatus = 0)
+#define yyclearin	(yychar = YYEMPTY)
+#define YYEMPTY		-2
+#define YYEOF		0
+#define YYACCEPT	goto yyacceptlab
+#define YYABORT 	goto yyabortlab
+#define YYERROR		goto yyerrlab1
+/* Like YYERROR except do call yyerror.  This remains here temporarily
+   to ease the transition to the new meaning of YYERROR, for GCC.
+   Once GCC version 2 has supplanted version 1, this can go.  */
+#define YYFAIL		goto yyerrlab
+#define YYRECOVERING()  (!!yyerrstatus)
+#define YYBACKUP(Token, Value)					\
+do								\
+  if (yychar == YYEMPTY && yylen == 1)				\
+    {								\
+      yychar = (Token);						\
+      yylval = (Value);						\
+      yychar1 = YYTRANSLATE (yychar);				\
+      YYPOPSTACK;						\
+      goto yybackup;						\
+    }								\
+  else								\
+    { 								\
+      yyerror ("syntax error: cannot back up");			\
+      YYERROR;							\
+    }								\
+while (0)
+
+#define YYTERROR	1
+#define YYERRCODE	256
+
+
+/* YYLLOC_DEFAULT -- Compute the default location (before the actions
+   are run).
+
+   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
+   first token.  By default, to implement support for ranges, extend
+   its range to the last symbol.  */
+
+#ifndef YYLLOC_DEFAULT
+# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
+   Current.last_line   = Rhs[N].last_line;	\
+   Current.last_column = Rhs[N].last_column;
+#endif
+
+
+/* YYLEX -- calling `yylex' with the right arguments.  */
+
+#if YYPURE
+# if YYLSP_NEEDED
+#  ifdef YYLEX_PARAM
+#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
+#  else
+#   define YYLEX		yylex (&yylval, &yylloc)
+#  endif
+# else /* !YYLSP_NEEDED */
+#  ifdef YYLEX_PARAM
+#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
+#  else
+#   define YYLEX		yylex (&yylval)
+#  endif
+# endif /* !YYLSP_NEEDED */
+#else /* !YYPURE */
+# define YYLEX			yylex ()
+#endif /* !YYPURE */
+
+
+/* Enable debugging if requested.  */
+#if YYDEBUG
+
+# ifndef YYFPRINTF
+#  ifdef __cplusplus
+#   include <cstdio>  /* INFRINGES ON USER NAME SPACE */
+#  else
+#   include <stdio.h> /* INFRINGES ON USER NAME SPACE */
+#  endif
+#  define YYFPRINTF YYSTD (fprintf)
+# endif
+
+# define YYDPRINTF(Args)			\
+do {						\
+  if (yydebug)					\
+    YYFPRINTF Args;				\
+} while (0)
+/* Nonzero means print parse trace. [The following comment makes no
+   sense to me.  Could someone clarify it?  --akim] Since this is
+   uninitialized, it does not stop multiple parsers from coexisting.
+   */
+int yydebug;
+#else /* !YYDEBUG */
+# define YYDPRINTF(Args)
+#endif /* !YYDEBUG */
+
+/* YYINITDEPTH -- initial size of the parser's stacks.  */
+#ifndef	YYINITDEPTH
+# define YYINITDEPTH 200
+#endif
+
+/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
+   if the built-in stack extension method is used).
+
+   Do not make this value too large; the results are undefined if
+   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
+   evaluated with infinite-precision integer arithmetic.  */
+
+#if YYMAXDEPTH == 0
+# undef YYMAXDEPTH
+#endif
+
+#ifndef YYMAXDEPTH
+# define YYMAXDEPTH 10000
+#endif
+
+#if ! defined (yyoverflow) && ! defined (yymemcpy)
+# if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
+#  define yymemcpy __builtin_memcpy
+# else				/* not GNU C or C++ */
+
+/* This is the most reliable way to avoid incompatibilities
+   in available built-in functions on various systems.  */
+static void
+#  if defined (__STDC__) || defined (__cplusplus)
+yymemcpy (char *yyto, const char *yyfrom, YYSIZE_T yycount)
+#  else
+yymemcpy (yyto, yyfrom, yycount)
+     char *yyto;
+     const char *yyfrom;
+     YYSIZE_T yycount;
+#  endif
+{
+  register const char *yyf = yyfrom;
+  register char *yyt = yyto;
+  register YYSIZE_T yyi = yycount;
+
+  while (yyi-- != 0)
+    *yyt++ = *yyf++;
+}
+# endif
+#endif
+
+#ifdef YYERROR_VERBOSE
+
+# ifndef yystrlen
+#  if defined (__GLIBC__) && defined (_STRING_H)
+#   define yystrlen strlen
+#  else
+/* Return the length of YYSTR.  */
+static YYSIZE_T
+#   if defined (__STDC__) || defined (__cplusplus)
+yystrlen (const char *yystr)
+#   else
+yystrlen (yystr)
+     const char *yystr;
+#   endif
+{
+  register const char *yys = yystr;
+
+  while (*yys++ != '\0')
+    continue;
+
+  return yys - yystr - 1;
+}
+#  endif
+# endif
+
+# ifndef yystpcpy
+#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
+#   define yystpcpy stpcpy
+#  else
+/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
+   YYDEST.  */
+static char *
+#   if defined (__STDC__) || defined (__cplusplus)
+yystpcpy (char *yydest, const char *yysrc)
+#   else
+yystpcpy (yydest, yysrc)
+     char *yydest;
+     const char *yysrc;
+#   endif
+{
+  register char *yyd = yydest;
+  register const char *yys = yysrc;
+
+  while ((*yyd++ = *yys++) != '\0')
+    continue;
+
+  return yyd - 1;
+}
+#  endif
+# endif
+#endif
+
+#line 341 "/usr/share/bison/bison.simple"
+
+
+/* The user can define YYPARSE_PARAM as the name of an argument to be passed
+   into yyparse.  The argument should have type void *.
+   It should actually point to an object.
+   Grammar actions can access the variable by casting it
+   to the proper pointer type.  */
+
+#ifdef YYPARSE_PARAM
+# ifdef __cplusplus
+#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
+#  define YYPARSE_PARAM_DECL
+# else /* !__cplusplus */
+#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
+#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
+# endif /* !__cplusplus */
+#else /* !YYPARSE_PARAM */
+# define YYPARSE_PARAM_ARG
+# define YYPARSE_PARAM_DECL
+#endif /* !YYPARSE_PARAM */
+
+/* Prevent warning if -Wstrict-prototypes.  */
+#ifdef __GNUC__
+# ifdef YYPARSE_PARAM
+int yyparse (void *);
+# else
+int yyparse (void);
+# endif
+#endif
+
+/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
+   variables are global, or local to YYPARSE.  */
+
+#define YY_DECL_NON_LSP_VARIABLES			\
+/* The lookahead symbol.  */				\
+int yychar;						\
+							\
+/* The semantic value of the lookahead symbol. */	\
+YYSTYPE yylval;						\
+							\
+/* Number of parse errors so far.  */			\
+int yynerrs;
+
+#if YYLSP_NEEDED
+# define YY_DECL_VARIABLES			\
+YY_DECL_NON_LSP_VARIABLES			\
+						\
+/* Location data for the lookahead symbol.  */	\
+YYLTYPE yylloc;
+#else
+# define YY_DECL_VARIABLES			\
+YY_DECL_NON_LSP_VARIABLES
+#endif
+
+
+/* If nonreentrant, generate the variables here. */
+
+#if !YYPURE
+YY_DECL_VARIABLES
+#endif  /* !YYPURE */
+
+int
+yyparse (YYPARSE_PARAM_ARG)
+     YYPARSE_PARAM_DECL
+{
+  /* If reentrant, generate the variables here. */
+#if YYPURE
+  YY_DECL_VARIABLES
+#endif  /* !YYPURE */
+
+  register int yystate;
+  register int yyn;
+  int yyresult;
+  /* Number of tokens to shift before error messages enabled.  */
+  int yyerrstatus;
+  /* Lookahead token as an internal (translated) token number.  */
+  int yychar1 = 0;
+
+  /* Three stacks and their tools:
+     `yyss': related to states,
+     `yyvs': related to semantic values,
+     `yyls': related to locations.
+
+     Refer to the stacks thru separate pointers, to allow yyoverflow
+     to reallocate them elsewhere.  */
+
+  /* The state stack. */
+  short	yyssa[YYINITDEPTH];
+  short *yyss = yyssa;
+  register short *yyssp;
+
+  /* The semantic value stack.  */
+  YYSTYPE yyvsa[YYINITDEPTH];
+  YYSTYPE *yyvs = yyvsa;
+  register YYSTYPE *yyvsp;
+
+#if YYLSP_NEEDED
+  /* The location stack.  */
+  YYLTYPE yylsa[YYINITDEPTH];
+  YYLTYPE *yyls = yylsa;
+  YYLTYPE *yylsp;
+#endif
+
+#if YYLSP_NEEDED
+# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
+#else
+# define YYPOPSTACK   (yyvsp--, yyssp--)
+#endif
+
+  YYSIZE_T yystacksize = YYINITDEPTH;
+
+
+  /* The variables used to return semantic value and location from the
+     action routines.  */
+  YYSTYPE yyval;
+#if YYLSP_NEEDED
+  YYLTYPE yyloc;
+#endif
+
+  /* When reducing, the number of symbols on the RHS of the reduced
+     rule. */
+  int yylen;
+
+  YYDPRINTF ((stderr, "Starting parse\n"));
+
+  yystate = 0;
+  yyerrstatus = 0;
+  yynerrs = 0;
+  yychar = YYEMPTY;		/* Cause a token to be read.  */
+
+  /* Initialize stack pointers.
+     Waste one element of value and location stack
+     so that they stay on the same level as the state stack.
+     The wasted elements are never initialized.  */
+
+  yyssp = yyss;
+  yyvsp = yyvs;
+#if YYLSP_NEEDED
+  yylsp = yyls;
+#endif
+  goto yysetstate;
+
+/*------------------------------------------------------------.
+| yynewstate -- Push a new state, which is found in yystate.  |
+`------------------------------------------------------------*/
+ yynewstate:
+  /* In all cases, when you get here, the value and location stacks
+     have just been pushed. so pushing a state here evens the stacks.
+     */
+  yyssp++;
+
+ yysetstate:
+  *yyssp = yystate;
+
+  if (yyssp >= yyss + yystacksize - 1)
+    {
+      /* Get the current used size of the three stacks, in elements.  */
+      YYSIZE_T yysize = yyssp - yyss + 1;
+
+#ifdef yyoverflow
+      {
+	/* Give user a chance to reallocate the stack. Use copies of
+	   these so that the &'s don't force the real ones into
+	   memory.  */
+	YYSTYPE *yyvs1 = yyvs;
+	short *yyss1 = yyss;
+
+	/* Each stack pointer address is followed by the size of the
+	   data in use in that stack, in bytes.  */
+# if YYLSP_NEEDED
+	YYLTYPE *yyls1 = yyls;
+	/* This used to be a conditional around just the two extra args,
+	   but that might be undefined if yyoverflow is a macro.  */
+	yyoverflow ("parser stack overflow",
+		    &yyss1, yysize * sizeof (*yyssp),
+		    &yyvs1, yysize * sizeof (*yyvsp),
+		    &yyls1, yysize * sizeof (*yylsp),
+		    &yystacksize);
+	yyls = yyls1;
+# else
+	yyoverflow ("parser stack overflow",
+		    &yyss1, yysize * sizeof (*yyssp),
+		    &yyvs1, yysize * sizeof (*yyvsp),
+		    &yystacksize);
+# endif
+	yyss = yyss1;
+	yyvs = yyvs1;
+      }
+#else /* no yyoverflow */
+      /* Extend the stack our own way.  */
+      if (yystacksize >= YYMAXDEPTH)
+	goto yyoverflowlab;
+      yystacksize *= 2;
+      if (yystacksize > YYMAXDEPTH)
+	yystacksize = YYMAXDEPTH;
+
+      {
+	short *yyss1 = yyss;
+	union yyalloc *yyptr =
+	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
+	if (! yyptr)
+	  goto yyoverflowlab;
+	YYSTACK_RELOCATE (short, yyss);
+	YYSTACK_RELOCATE (YYSTYPE, yyvs);
+# if YYLSP_NEEDED
+	YYSTACK_RELOCATE (YYLTYPE, yyls);
+# endif
+# undef YYSTACK_RELOCATE
+	if (yyss1 != yyssa)
+	  YYSTACK_FREE (yyss1);
+      }
+#endif /* no yyoverflow */
+
+      yyssp = yyss + yysize - 1;
+      yyvsp = yyvs + yysize - 1;
+#if YYLSP_NEEDED
+      yylsp = yyls + yysize - 1;
+#endif
+
+      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
+		  (unsigned long int) yystacksize));
+
+      if (yyssp >= yyss + yystacksize - 1)
+	YYABORT;
+    }
+
+  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
+
+  goto yybackup;
+
+
+/*-----------.
+| yybackup.  |
+`-----------*/
+yybackup:
+
+/* Do appropriate processing given the current state.  */
+/* Read a lookahead token if we need one and don't already have one.  */
+/* yyresume: */
+
+  /* First try to decide what to do without reference to lookahead token.  */
+
+  yyn = yypact[yystate];
+  if (yyn == YYFLAG)
+    goto yydefault;
+
+  /* Not known => get a lookahead token if don't already have one.  */
+
+  /* yychar is either YYEMPTY or YYEOF
+     or a valid token in external form.  */
+
+  if (yychar == YYEMPTY)
+    {
+      YYDPRINTF ((stderr, "Reading a token: "));
+      yychar = YYLEX;
+    }
+
+  /* Convert token to internal form (in yychar1) for indexing tables with */
+
+  if (yychar <= 0)		/* This means end of input. */
+    {
+      yychar1 = 0;
+      yychar = YYEOF;		/* Don't call YYLEX any more */
+
+      YYDPRINTF ((stderr, "Now at end of input.\n"));
+    }
+  else
+    {
+      yychar1 = YYTRANSLATE (yychar);
+
+#if YYDEBUG
+     /* We have to keep this `#if YYDEBUG', since we use variables
+	which are defined only if `YYDEBUG' is set.  */
+      if (yydebug)
+	{
+	  YYFPRINTF (stderr, "Next token is %d (%s",
+		     yychar, yytname[yychar1]);
+	  /* Give the individual parser a way to print the precise
+	     meaning of a token, for further debugging info.  */
+# ifdef YYPRINT
+	  YYPRINT (stderr, yychar, yylval);
+# endif
+	  YYFPRINTF (stderr, ")\n");
+	}
+#endif
+    }
+
+  yyn += yychar1;
+  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
+    goto yydefault;
+
+  yyn = yytable[yyn];
+
+  /* yyn is what to do for this token type in this state.
+     Negative => reduce, -yyn is rule number.
+     Positive => shift, yyn is new state.
+       New state is final state => don't bother to shift,
+       just return success.
+     0, or most negative number => error.  */
+
+  if (yyn < 0)
+    {
+      if (yyn == YYFLAG)
+	goto yyerrlab;
+      yyn = -yyn;
+      goto yyreduce;
+    }
+  else if (yyn == 0)
+    goto yyerrlab;
+
+  if (yyn == YYFINAL)
+    YYACCEPT;
+
+  /* Shift the lookahead token.  */
+  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
+	      yychar, yytname[yychar1]));
+
+  /* Discard the token being shifted unless it is eof.  */
+  if (yychar != YYEOF)
+    yychar = YYEMPTY;
+
+  *++yyvsp = yylval;
+#if YYLSP_NEEDED
+  *++yylsp = yylloc;
+#endif
+
+  /* Count tokens shifted since error; after three, turn off error
+     status.  */
+  if (yyerrstatus)
+    yyerrstatus--;
+
+  yystate = yyn;
+  goto yynewstate;
+
+
+/*-----------------------------------------------------------.
+| yydefault -- do the default action for the current state.  |
+`-----------------------------------------------------------*/
+yydefault:
+  yyn = yydefact[yystate];
+  if (yyn == 0)
+    goto yyerrlab;
+  goto yyreduce;
+
+
+/*-----------------------------.
+| yyreduce -- Do a reduction.  |
+`-----------------------------*/
+yyreduce:
+  /* yyn is the number of a rule to reduce with.  */
+  yylen = yyr2[yyn];
+
+  /* If YYLEN is nonzero, implement the default value of the action:
+     `$$ = $1'.
+
+     Otherwise, the following line sets YYVAL to the semantic value of
+     the lookahead token.  This behavior is undocumented and Bison
+     users should not rely upon it.  Assigning to YYVAL
+     unconditionally makes the parser a bit smaller, and it avoids a
+     GCC warning that YYVAL may be used uninitialized.  */
+  yyval = yyvsp[1-yylen];
+
+#if YYLSP_NEEDED
+  /* Similarly for the default location.  Let the user run additional
+     commands if for instance locations are ranges.  */
+  yyloc = yylsp[1-yylen];
+  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
+#endif
+
+#if YYDEBUG
+  /* We have to keep this `#if YYDEBUG', since we use variables which
+     are defined only if `YYDEBUG' is set.  */
+  if (yydebug)
+    {
+      int yyi;
+
+      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
+		 yyn, yyrline[yyn]);
+
+      /* Print the symbols being reduced, and their result.  */
+      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
+	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
+      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
+    }
+#endif
+
+  switch (yyn) {
+
+case 1:
+#line 177 "matcher_parser_parse.y"
+{
+	if (!matcher_parser_dialog) {
+		prefs_scoring = &global_scoring;
+		prefs_filtering = &global_processing;
+	}
+}
+    break;
+case 7:
+#line 195 "matcher_parser_parse.y"
+{
+	yyerrok;
+}
+    break;
+case 8:
+#line 201 "matcher_parser_parse.y"
+{
+	gchar * folder = yyvsp[-1].str;
+	FolderItem * item = NULL;
+
+	if (!matcher_parser_dialog) {
+		item = folder_find_item_from_identifier(folder);
+		if (item == NULL) {
+			prefs_scoring = &global_scoring;
+			prefs_filtering = &global_processing;
+		}
+		else {
+			prefs_scoring = &item->prefs->scoring;
+			prefs_filtering = &item->prefs->processing;
+		}
+	}
+}
+    break;
+case 12:
+#line 227 "matcher_parser_parse.y"
+{
+	if (matcher_parser_dialog)
+		YYACCEPT;
+	else {
+		matcher_parsererror("parse error");
+		YYERROR;
+	}
+}
+    break;
+case 14:
+#line 240 "matcher_parser_parse.y"
+{
+	if (matcher_parser_dialog)
+		YYACCEPT;
+	else {
+		matcher_parsererror("parse error");
+		YYERROR;
+	}
+}
+    break;
+case 15:
+#line 252 "matcher_parser_parse.y"
+{
+	filtering = filteringprop_new(cond, action);
+	cond = NULL;
+	action = NULL;
+	if (!matcher_parser_dialog) {
+		* prefs_filtering = g_slist_append(* prefs_filtering,
+						   filtering);
+		filtering = NULL;
+	}
+}
+    break;
+case 16:
+#line 263 "matcher_parser_parse.y"
+{
+	scoring = scoringprop_new(cond, score);
+	cond = NULL;
+	score = 0;
+	if (!matcher_parser_dialog) {
+		* prefs_scoring = g_slist_append(* prefs_scoring, scoring);
+		scoring = NULL;
+	}
+}
+    break;
+case 17:
+#line 276 "matcher_parser_parse.y"
+{
+	match_type = MATCHTYPE_MATCHCASE;
+}
+    break;
+case 18:
+#line 280 "matcher_parser_parse.y"
+{
+	match_type = MATCHTYPE_MATCH;
+}
+    break;
+case 19:
+#line 284 "matcher_parser_parse.y"
+{
+	match_type = MATCHTYPE_REGEXPCASE;
+}
+    break;
+case 20:
+#line 288 "matcher_parser_parse.y"
+{
+	match_type = MATCHTYPE_REGEXP;
+}
+    break;
+case 21:
+#line 295 "matcher_parser_parse.y"
+{
+	cond = matcherlist_new(matchers_list, (bool_op == MATCHERBOOL_AND));
+	matchers_list = NULL;
+}
+    break;
+case 22:
+#line 303 "matcher_parser_parse.y"
+{
+	matchers_list = g_slist_append(matchers_list, prop);
+}
+    break;
+case 23:
+#line 307 "matcher_parser_parse.y"
+{
+	matchers_list = NULL;
+	matchers_list = g_slist_append(matchers_list, prop);
+}
+    break;
+case 24:
+#line 315 "matcher_parser_parse.y"
+{
+	bool_op = MATCHERBOOL_AND;
+}
+    break;
+case 25:
+#line 319 "matcher_parser_parse.y"
+{
+	bool_op = MATCHERBOOL_OR;
+}
+    break;
+case 26:
+#line 326 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+
+	criteria = MATCHCRITERIA_ALL;
+	prop = matcherprop_new(criteria, NULL, 0, NULL, 0);
+}
+    break;
+case 27:
+#line 333 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+
+	criteria = MATCHCRITERIA_UNREAD;
+	prop = matcherprop_new(criteria, NULL, 0, NULL, 0);
+}
+    break;
+case 28:
+#line 340 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+
+	criteria = MATCHCRITERIA_NOT_UNREAD;
+	prop = matcherprop_new(criteria, NULL, 0, NULL, 0);
+}
+    break;
+case 29:
+#line 347 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+
+	criteria = MATCHCRITERIA_NEW;
+	prop = matcherprop_new(criteria, NULL, 0, NULL, 0);
+}
+    break;
+case 30:
+#line 354 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+
+	criteria = MATCHCRITERIA_NOT_NEW;
+	prop = matcherprop_new(criteria, NULL, 0, NULL, 0);
+}
+    break;
+case 31:
+#line 361 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+
+	criteria = MATCHCRITERIA_MARKED;
+	prop = matcherprop_new(criteria, NULL, 0, NULL, 0);
+}
+    break;
+case 32:
+#line 368 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+
+	criteria = MATCHCRITERIA_NOT_MARKED;
+	prop = matcherprop_new(criteria, NULL, 0, NULL, 0);
+}
+    break;
+case 33:
+#line 375 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+
+	criteria = MATCHCRITERIA_DELETED;
+	prop = matcherprop_new(criteria, NULL, 0, NULL, 0);
+}
+    break;
+case 34:
+#line 382 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+
+	criteria = MATCHCRITERIA_NOT_DELETED;
+	prop = matcherprop_new(criteria, NULL, 0, NULL, 0);
+}
+    break;
+case 35:
+#line 389 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+
+	criteria = MATCHCRITERIA_REPLIED;
+	prop = matcherprop_new(criteria, NULL, 0, NULL, 0);
+}
+    break;
+case 36:
+#line 396 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+
+	criteria = MATCHCRITERIA_NOT_REPLIED;
+	prop = matcherprop_new(criteria, NULL, 0, NULL, 0);
+}
+    break;
+case 37:
+#line 403 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+
+	criteria = MATCHCRITERIA_FORWARDED;
+	prop = matcherprop_new(criteria, NULL, 0, NULL, 0);
+}
+    break;
+case 38:
+#line 410 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+
+	criteria = MATCHCRITERIA_NOT_FORWARDED;
+	prop = matcherprop_new(criteria, NULL, 0, NULL, 0);
+}
+    break;
+case 39:
+#line 417 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gchar * expr = NULL;
+
+	criteria = MATCHCRITERIA_SUBJECT;
+	expr = yyvsp[0].str;
+	prop = matcherprop_new(criteria, NULL, match_type, expr, 0);
+}
+    break;
+case 40:
+#line 426 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gchar * expr = NULL;
+
+	criteria = MATCHCRITERIA_NOT_SUBJECT;
+	expr = yyvsp[0].str;
+	prop = matcherprop_new(criteria, NULL, match_type, expr, 0);
+}
+    break;
+case 41:
+#line 435 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gchar * expr = NULL;
+
+	criteria = MATCHCRITERIA_FROM;
+	expr = yyvsp[0].str;
+	prop = matcherprop_new(criteria, NULL, match_type, expr, 0);
+}
+    break;
+case 42:
+#line 444 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gchar * expr = NULL;
+
+	criteria = MATCHCRITERIA_NOT_FROM;
+	expr = yyvsp[0].str;
+	prop = matcherprop_new(criteria, NULL, match_type, expr, 0);
+}
+    break;
+case 43:
+#line 453 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gchar * expr = NULL;
+
+	criteria = MATCHCRITERIA_TO;
+	expr = yyvsp[0].str;
+	prop = matcherprop_new(criteria, NULL, match_type, expr, 0);
+}
+    break;
+case 44:
+#line 462 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gchar * expr = NULL;
+
+	criteria = MATCHCRITERIA_NOT_TO;
+	expr = yyvsp[0].str;
+	prop = matcherprop_new(criteria, NULL, match_type, expr, 0);
+}
+    break;
+case 45:
+#line 471 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gchar * expr = NULL;
+
+	criteria = MATCHCRITERIA_CC;
+	expr = yyvsp[0].str;
+	prop = matcherprop_new(criteria, NULL, match_type, expr, 0);
+}
+    break;
+case 46:
+#line 480 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gchar * expr = NULL;
+
+	criteria = MATCHCRITERIA_NOT_CC;
+	expr = yyvsp[0].str;
+	prop = matcherprop_new(criteria, NULL, match_type, expr, 0);
+}
+    break;
+case 47:
+#line 489 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gchar * expr = NULL;
+
+	criteria = MATCHCRITERIA_TO_OR_CC;
+	expr = yyvsp[0].str;
+	prop = matcherprop_new(criteria, NULL, match_type, expr, 0);
+}
+    break;
+case 48:
+#line 498 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gchar * expr = NULL;
+
+	criteria = MATCHCRITERIA_NOT_TO_AND_NOT_CC;
+	expr = yyvsp[0].str;
+	prop = matcherprop_new(criteria, NULL, match_type, expr, 0);
+}
+    break;
+case 49:
+#line 507 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gint value = 0;
+
+	criteria = MATCHCRITERIA_AGE_GREATER;
+	value = atoi(yyvsp[0].value);
+	prop = matcherprop_new(criteria, NULL, 0, NULL, value);
+}
+    break;
+case 50:
+#line 516 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gint value = 0;
+
+	criteria = MATCHCRITERIA_AGE_LOWER;
+	value = atoi(yyvsp[0].value);
+	prop = matcherprop_new(criteria, NULL, 0, NULL, value);
+}
+    break;
+case 51:
+#line 525 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gchar * expr = NULL;
+
+	criteria = MATCHCRITERIA_NEWSGROUPS;
+	expr = yyvsp[0].str;
+	prop = matcherprop_new(criteria, NULL, match_type, expr, 0);
+}
+    break;
+case 52:
+#line 534 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gchar * expr = NULL;
+
+	criteria = MATCHCRITERIA_NOT_NEWSGROUPS;
+	expr = yyvsp[0].str;
+	prop = matcherprop_new(criteria, NULL, match_type, expr, 0);
+}
+    break;
+case 53:
+#line 543 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gchar * expr = NULL;
+
+	criteria = MATCHCRITERIA_INREPLYTO;
+	expr = yyvsp[0].str;
+	prop = matcherprop_new(criteria, NULL, match_type, expr, 0);
+}
+    break;
+case 54:
+#line 552 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gchar * expr = NULL;
+
+	criteria = MATCHCRITERIA_NOT_INREPLYTO;
+	expr = yyvsp[0].str;
+	prop = matcherprop_new(criteria, NULL, match_type, expr, 0);
+}
+    break;
+case 55:
+#line 561 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gchar * expr = NULL;
+
+	criteria = MATCHCRITERIA_REFERENCES;
+	expr = yyvsp[0].str;
+	prop = matcherprop_new(criteria, NULL, match_type, expr, 0);
+}
+    break;
+case 56:
+#line 570 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gchar * expr = NULL;
+
+	criteria = MATCHCRITERIA_NOT_REFERENCES;
+	expr = yyvsp[0].str;
+	prop = matcherprop_new(criteria, NULL, match_type, expr, 0);
+}
+    break;
+case 57:
+#line 579 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gint value = 0;
+
+	criteria = MATCHCRITERIA_SCORE_GREATER;
+	value = atoi(yyvsp[0].value);
+	prop = matcherprop_new(criteria, NULL, 0, NULL, value);
+}
+    break;
+case 58:
+#line 588 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gint value = 0;
+
+	criteria = MATCHCRITERIA_SCORE_LOWER;
+	value = atoi(yyvsp[0].value);
+	prop = matcherprop_new(criteria, NULL, 0, NULL, value);
+}
+    break;
+case 59:
+#line 597 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gint value = 0;
+
+	criteria = MATCHCRITERIA_SCORE_EQUAL;
+	value = atoi(yyvsp[0].value);
+	prop = matcherprop_new(criteria, NULL, 0, NULL, value);
+}
+    break;
+case 60:
+#line 606 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gint value    = 0;
+	criteria = MATCHCRITERIA_SIZE_GREATER;
+	value = atoi(yyvsp[0].value);
+	prop = matcherprop_new(criteria, NULL, 0, NULL, value);
+}
+    break;
+case 61:
+#line 614 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gint value    = 0;
+	criteria = MATCHCRITERIA_SIZE_SMALLER;
+	value = atoi(yyvsp[0].value);
+	prop = matcherprop_new(criteria, NULL, 0, NULL, value);
+}
+    break;
+case 62:
+#line 622 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gint value    = 0;
+	criteria = MATCHCRITERIA_SIZE_EQUAL;
+	value = atoi(yyvsp[0].value);
+	prop = matcherprop_new(criteria, NULL, 0, NULL, value);
+}
+    break;
+case 63:
+#line 630 "matcher_parser_parse.y"
+{
+	header = g_strdup(yyvsp[0].str);
+}
+    break;
+case 64:
+#line 633 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gchar * expr = NULL;
+
+	criteria = MATCHCRITERIA_HEADER;
+	expr = yyvsp[-3].str;
+	prop = matcherprop_new(criteria, header, match_type, expr, 0);
+	g_free(header);
+}
+    break;
+case 65:
+#line 643 "matcher_parser_parse.y"
+{
+	header = g_strdup(yyvsp[0].str);
+}
+    break;
+case 66:
+#line 646 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gchar * expr = NULL;
+
+	criteria = MATCHCRITERIA_NOT_HEADER;
+	expr = yyvsp[-3].str;
+	prop = matcherprop_new(criteria, header, match_type, expr, 0);
+	g_free(header);
+}
+    break;
+case 67:
+#line 656 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gchar * expr = NULL;
+
+	criteria = MATCHCRITERIA_HEADERS_PART;
+	expr = yyvsp[0].str;
+	prop = matcherprop_new(criteria, NULL, match_type, expr, 0);
+}
+    break;
+case 68:
+#line 665 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gchar * expr = NULL;
+
+	criteria = MATCHCRITERIA_NOT_HEADERS_PART;
+	expr = yyvsp[0].str;
+	prop = matcherprop_new(criteria, NULL, match_type, expr, 0);
+}
+    break;
+case 69:
+#line 674 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gchar * expr = NULL;
+
+	criteria = MATCHCRITERIA_MESSAGE;
+	expr = yyvsp[0].str;
+	prop = matcherprop_new(criteria, NULL, match_type, expr, 0);
+}
+    break;
+case 70:
+#line 683 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gchar * expr = NULL;
+
+	criteria = MATCHCRITERIA_NOT_MESSAGE;
+	expr = yyvsp[0].str;
+	prop = matcherprop_new(criteria, NULL, match_type, expr, 0);
+}
+    break;
+case 71:
+#line 692 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gchar * expr = NULL;
+
+	criteria = MATCHCRITERIA_BODY_PART;
+	expr = yyvsp[0].str;
+	prop = matcherprop_new(criteria, NULL, match_type, expr, 0);
+}
+    break;
+case 72:
+#line 701 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gchar * expr = NULL;
+
+	criteria = MATCHCRITERIA_NOT_BODY_PART;
+	expr = yyvsp[0].str;
+	prop = matcherprop_new(criteria, NULL, match_type, expr, 0);
+}
+    break;
+case 73:
+#line 710 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gchar * expr = NULL;
+
+	criteria = MATCHCRITERIA_EXECUTE;
+	expr = yyvsp[0].str;
+	prop = matcherprop_new(criteria, NULL, 0, expr, 0);
+}
+    break;
+case 74:
+#line 719 "matcher_parser_parse.y"
+{
+	gint criteria = 0;
+	gchar * expr = NULL;
+
+	criteria = MATCHCRITERIA_NOT_EXECUTE;
+	expr = yyvsp[0].str;
+	prop = matcherprop_new(criteria, NULL, 0, expr, 0);
+}
+    break;
+case 75:
+#line 731 "matcher_parser_parse.y"
+{
+	gchar * cmd = NULL;
+	gint action_type = 0;
+
+	action_type = MATCHACTION_EXECUTE;
+	cmd = yyvsp[0].str;
+	action = filteringaction_new(action_type, 0, cmd, 0);
+}
+    break;
+case 76:
+#line 740 "matcher_parser_parse.y"
+{
+	gchar * destination = NULL;
+	gint action_type = 0;
+
+	action_type = MATCHACTION_MOVE;
+	destination = yyvsp[0].str;
+	action = filteringaction_new(action_type, 0, destination, 0);
+}
+    break;
+case 77:
+#line 749 "matcher_parser_parse.y"
+{
+	gchar * destination = NULL;
+	gint action_type = 0;
+
+	action_type = MATCHACTION_COPY;
+	destination = yyvsp[0].str;
+	action = filteringaction_new(action_type, 0, destination, 0);
+}
+    break;
+case 78:
+#line 758 "matcher_parser_parse.y"
+{
+	gint action_type = 0;
+
+	action_type = MATCHACTION_DELETE;
+	action = filteringaction_new(action_type, 0, NULL, 0);
+}
+    break;
+case 79:
+#line 765 "matcher_parser_parse.y"
+{
+	gint action_type = 0;
+
+	action_type = MATCHACTION_MARK;
+	action = filteringaction_new(action_type, 0, NULL, 0);
+}
+    break;
+case 80:
+#line 772 "matcher_parser_parse.y"
+{
+	gint action_type = 0;
+
+	action_type = MATCHACTION_UNMARK;
+	action = filteringaction_new(action_type, 0, NULL, 0);
+}
+    break;
+case 81:
+#line 779 "matcher_parser_parse.y"
+{
+	gint action_type = 0;
+
+	action_type = MATCHACTION_MARK_AS_READ;
+	action = filteringaction_new(action_type, 0, NULL, 0);
+}
+    break;
+case 82:
+#line 786 "matcher_parser_parse.y"
+{
+	gint action_type = 0;
+
+	action_type = MATCHACTION_MARK_AS_UNREAD;
+	action = filteringaction_new(action_type, 0, NULL, 0);
+}
+    break;
+case 83:
+#line 793 "matcher_parser_parse.y"
+{
+	gchar * destination = NULL;
+	gint action_type = 0;
+	gint account_id = 0;
+
+	action_type = MATCHACTION_FORWARD;
+	account_id = atoi(yyvsp[-1].value);
+	destination = yyvsp[0].str;
+	action = filteringaction_new(action_type, account_id, destination, 0);
+}
+    break;
+case 84:
+#line 804 "matcher_parser_parse.y"
+{
+	gchar * destination = NULL;
+	gint action_type = 0;
+	gint account_id = 0;
+
+	action_type = MATCHACTION_FORWARD_AS_ATTACHMENT;
+	account_id = atoi(yyvsp[-1].value);
+	destination = yyvsp[0].str;
+	action = filteringaction_new(action_type, account_id, destination, 0);
+}
+    break;
+case 85:
+#line 815 "matcher_parser_parse.y"
+{
+	gchar * destination = NULL;
+	gint action_type = 0;
+	gint account_id = 0;
+
+	action_type = MATCHACTION_BOUNCE;
+	account_id = atoi(yyvsp[-1].value);
+	destination = yyvsp[0].str;
+	action = filteringaction_new(action_type, account_id, destination, 0);
+}
+    break;
+case 86:
+#line 826 "matcher_parser_parse.y"
+{
+	gint action_type = 0;
+	gint color = 0;
+
+	action_type = MATCHACTION_COLOR;
+	color = atoi(yyvsp[0].value);
+	action = filteringaction_new(action_type, 0, NULL, color);
+}
+    break;
+case 87:
+#line 835 "matcher_parser_parse.y"
+{
+	gint action_type = 0;
+	action_type = MATCHACTION_DELETE_ON_SERVER;
+	action = filteringaction_new(action_type, 0, NULL, 0);
+}
+    break;
+case 88:
+#line 844 "matcher_parser_parse.y"
+{
+	score = atoi(yyvsp[0].value);
+}
+    break;
+}
+
+#line 727 "/usr/share/bison/bison.simple"
+
+
+  yyvsp -= yylen;
+  yyssp -= yylen;
+#if YYLSP_NEEDED
+  yylsp -= yylen;
+#endif
+
+#if YYDEBUG
+  if (yydebug)
+    {
+      short *yyssp1 = yyss - 1;
+      YYFPRINTF (stderr, "state stack now");
+      while (yyssp1 != yyssp)
+	YYFPRINTF (stderr, " %d", *++yyssp1);
+      YYFPRINTF (stderr, "\n");
+    }
+#endif
+
+  *++yyvsp = yyval;
+#if YYLSP_NEEDED
+  *++yylsp = yyloc;
+#endif
+
+  /* Now `shift' the result of the reduction.  Determine what state
+     that goes to, based on the state we popped back to and the rule
+     number reduced by.  */
+
+  yyn = yyr1[yyn];
+
+  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
+  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
+    yystate = yytable[yystate];
+  else
+    yystate = yydefgoto[yyn - YYNTBASE];
+
+  goto yynewstate;
+
+
+/*------------------------------------.
+| yyerrlab -- here on detecting error |
+`------------------------------------*/
+yyerrlab:
+  /* If not already recovering from an error, report this error.  */
+  if (!yyerrstatus)
+    {
+      ++yynerrs;
+
+#ifdef YYERROR_VERBOSE
+      yyn = yypact[yystate];
+
+      if (yyn > YYFLAG && yyn < YYLAST)
+	{
+	  YYSIZE_T yysize = 0;
+	  char *yymsg;
+	  int yyx, yycount;
+
+	  yycount = 0;
+	  /* Start YYX at -YYN if negative to avoid negative indexes in
+	     YYCHECK.  */
+	  for (yyx = yyn < 0 ? -yyn : 0;
+	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
+	    if (yycheck[yyx + yyn] == yyx)
+	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
+	  yysize += yystrlen ("parse error, unexpected ") + 1;
+	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
+	  yymsg = (char *) YYSTACK_ALLOC (yysize);
+	  if (yymsg != 0)
+	    {
+	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
+	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);
+
+	      if (yycount < 5)
+		{
+		  yycount = 0;
+		  for (yyx = yyn < 0 ? -yyn : 0;
+		       yyx < (int) (sizeof (yytname) / sizeof (char *));
+		       yyx++)
+		    if (yycheck[yyx + yyn] == yyx)
+		      {
+			const char *yyq = ! yycount ? ", expecting " : " or ";
+			yyp = yystpcpy (yyp, yyq);
+			yyp = yystpcpy (yyp, yytname[yyx]);
+			yycount++;
+		      }
+		}
+	      yyerror (yymsg);
+	      YYSTACK_FREE (yymsg);
+	    }
+	  else
+	    yyerror ("parse error; also virtual memory exhausted");
+	}
+      else
+#endif /* defined (YYERROR_VERBOSE) */
+	yyerror ("parse error");
+    }
+  goto yyerrlab1;
+
+
+/*--------------------------------------------------.
+| yyerrlab1 -- error raised explicitly by an action |
+`--------------------------------------------------*/
+yyerrlab1:
+  if (yyerrstatus == 3)
+    {
+      /* If just tried and failed to reuse lookahead token after an
+	 error, discard it.  */
+
+      /* return failure if at end of input */
+      if (yychar == YYEOF)
+	YYABORT;
+      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
+		  yychar, yytname[yychar1]));
+      yychar = YYEMPTY;
+    }
+
+  /* Else will try to reuse lookahead token after shifting the error
+     token.  */
+
+  yyerrstatus = 3;		/* Each real token shifted decrements this */
+
+  goto yyerrhandle;
+
+
+/*-------------------------------------------------------------------.
+| yyerrdefault -- current state does not do anything special for the |
+| error token.                                                       |
+`-------------------------------------------------------------------*/
+yyerrdefault:
+#if 0
+  /* This is wrong; only states that explicitly want error tokens
+     should shift them.  */
+
+  /* If its default is to accept any token, ok.  Otherwise pop it.  */
+  yyn = yydefact[yystate];
+  if (yyn)
+    goto yydefault;
+#endif
+
+
+/*---------------------------------------------------------------.
+| yyerrpop -- pop the current state because it cannot handle the |
+| error token                                                    |
+`---------------------------------------------------------------*/
+yyerrpop:
+  if (yyssp == yyss)
+    YYABORT;
+  yyvsp--;
+  yystate = *--yyssp;
+#if YYLSP_NEEDED
+  yylsp--;
+#endif
+
+#if YYDEBUG
+  if (yydebug)
+    {
+      short *yyssp1 = yyss - 1;
+      YYFPRINTF (stderr, "Error: state stack now");
+      while (yyssp1 != yyssp)
+	YYFPRINTF (stderr, " %d", *++yyssp1);
+      YYFPRINTF (stderr, "\n");
+    }
+#endif
+
+/*--------------.
+| yyerrhandle.  |
+`--------------*/
+yyerrhandle:
+  yyn = yypact[yystate];
+  if (yyn == YYFLAG)
+    goto yyerrdefault;
+
+  yyn += YYTERROR;
+  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
+    goto yyerrdefault;
+
+  yyn = yytable[yyn];
+  if (yyn < 0)
+    {
+      if (yyn == YYFLAG)
+	goto yyerrpop;
+      yyn = -yyn;
+      goto yyreduce;
+    }
+  else if (yyn == 0)
+    goto yyerrpop;
+
+  if (yyn == YYFINAL)
+    YYACCEPT;
+
+  YYDPRINTF ((stderr, "Shifting error token, "));
+
+  *++yyvsp = yylval;
+#if YYLSP_NEEDED
+  *++yylsp = yylloc;
+#endif
+
+  yystate = yyn;
+  goto yynewstate;
+
+
+/*-------------------------------------.
+| yyacceptlab -- YYACCEPT comes here.  |
+`-------------------------------------*/
+yyacceptlab:
+  yyresult = 0;
+  goto yyreturn;
+
+/*-----------------------------------.
+| yyabortlab -- YYABORT comes here.  |
+`-----------------------------------*/
+yyabortlab:
+  yyresult = 1;
+  goto yyreturn;
+
+/*---------------------------------------------.
+| yyoverflowab -- parser overflow comes here.  |
+`---------------------------------------------*/
+yyoverflowlab:
+  yyerror ("parser stack overflow");
+  yyresult = 2;
+  /* Fall through.  */
+
+yyreturn:
+#ifndef yyoverflow
+  if (yyss != yyssa)
+    YYSTACK_FREE (yyss);
+#endif
+  return yyresult;
+}
+#line 848 "matcher_parser_parse.y"
diff -urN matcher_parser_parse.h matcher_parser_parse.h
--- matcher_parser_parse.h	Thu Jan 01 01:00:00 1970
+++ matcher_parser_parse.h	Fri Apr 12 04:10:04 2002
@@ -0,0 +1,85 @@
+#ifndef BISON_Y_TAB_H
+# define BISON_Y_TAB_H
+
+#ifndef YYSTYPE
+typedef union {
+	char * str;
+	int value;
+} yystype;
+# define YYSTYPE yystype
+#endif
+# define	MATCHER_ALL	257
+# define	MATCHER_UNREAD	258
+# define	MATCHER_NOT_UNREAD	259
+# define	MATCHER_NEW	260
+# define	MATCHER_NOT_NEW	261
+# define	MATCHER_MARKED	262
+# define	MATCHER_NOT_MARKED	263
+# define	MATCHER_DELETED	264
+# define	MATCHER_NOT_DELETED	265
+# define	MATCHER_REPLIED	266
+# define	MATCHER_NOT_REPLIED	267
+# define	MATCHER_FORWARDED	268
+# define	MATCHER_NOT_FORWARDED	269
+# define	MATCHER_SUBJECT	270
+# define	MATCHER_NOT_SUBJECT	271
+# define	MATCHER_FROM	272
+# define	MATCHER_NOT_FROM	273
+# define	MATCHER_TO	274
+# define	MATCHER_NOT_TO	275
+# define	MATCHER_CC	276
+# define	MATCHER_NOT_CC	277
+# define	MATCHER_TO_OR_CC	278
+# define	MATCHER_NOT_TO_AND_NOT_CC	279
+# define	MATCHER_AGE_GREATER	280
+# define	MATCHER_AGE_LOWER	281
+# define	MATCHER_NEWSGROUPS	282
+# define	MATCHER_NOT_NEWSGROUPS	283
+# define	MATCHER_INREPLYTO	284
+# define	MATCHER_NOT_INREPLYTO	285
+# define	MATCHER_REFERENCES	286
+# define	MATCHER_NOT_REFERENCES	287
+# define	MATCHER_SCORE_GREATER	288
+# define	MATCHER_SCORE_LOWER	289
+# define	MATCHER_HEADER	290
+# define	MATCHER_NOT_HEADER	291
+# define	MATCHER_HEADERS_PART	292
+# define	MATCHER_NOT_HEADERS_PART	293
+# define	MATCHER_MESSAGE	294
+# define	MATCHER_NOT_MESSAGE	295
+# define	MATCHER_BODY_PART	296
+# define	MATCHER_NOT_BODY_PART	297
+# define	MATCHER_EXECUTE	298
+# define	MATCHER_NOT_EXECUTE	299
+# define	MATCHER_MATCHCASE	300
+# define	MATCHER_MATCH	301
+# define	MATCHER_REGEXPCASE	302
+# define	MATCHER_REGEXP	303
+# define	MATCHER_SCORE	304
+# define	MATCHER_MOVE	305
+# define	MATCHER_COPY	306
+# define	MATCHER_DELETE	307
+# define	MATCHER_MARK	308
+# define	MATCHER_UNMARK	309
+# define	MATCHER_MARK_AS_READ	310
+# define	MATCHER_MARK_AS_UNREAD	311
+# define	MATCHER_FORWARD	312
+# define	MATCHER_FORWARD_AS_ATTACHMENT	313
+# define	MATCHER_EOL	314
+# define	MATCHER_STRING	315
+# define	MATCHER_OR	316
+# define	MATCHER_AND	317
+# define	MATCHER_COLOR	318
+# define	MATCHER_SCORE_EQUAL	319
+# define	MATCHER_BOUNCE	320
+# define	MATCHER_DELETE_ON_SERVER	321
+# define	MATCHER_SIZE_GREATER	322
+# define	MATCHER_SIZE_SMALLER	323
+# define	MATCHER_SIZE_EQUAL	324
+# define	MATCHER_SECTION	325
+# define	MATCHER_INTEGER	326
+
+
+extern YYSTYPE yylval;
+
+#endif /* not BISON_Y_TAB_H */
diff -urN quote_fmt_lex.c quote_fmt_lex.c
--- quote_fmt_lex.c	Thu Jan 01 01:00:00 1970
+++ quote_fmt_lex.c	Fri Apr 12 04:12:10 2002
@@ -0,0 +1,1745 @@
+#define yy_create_buffer quote_fmt_create_buffer
+#define yy_delete_buffer quote_fmt_delete_buffer
+#define yy_scan_buffer quote_fmt_scan_buffer
+#define yy_scan_string quote_fmt_scan_string
+#define yy_scan_bytes quote_fmt_scan_bytes
+#define yy_flex_debug quote_fmt_flex_debug
+#define yy_init_buffer quote_fmt_init_buffer
+#define yy_flush_buffer quote_fmt_flush_buffer
+#define yy_load_buffer_state quote_fmt_load_buffer_state
+#define yy_switch_to_buffer quote_fmt_switch_to_buffer
+#define yyin quote_fmtin
+#define yyleng quote_fmtleng
+#define yylex quote_fmtlex
+#define yyout quote_fmtout
+#define yyrestart quote_fmtrestart
+#define yytext quote_fmttext
+#define yywrap quote_fmtwrap
+
+#line 20 "lex.yy.c"
+/* A lexical scanner generated by flex */
+
+/* Scanner skeleton version:
+ * $Header: //claws/src/Attic/generated.diff,v 1.1.2.2 2002-05-11 10:07:07 netztorte Exp $
+ */
+
+#define FLEX_SCANNER
+#define YY_FLEX_MAJOR_VERSION 2
+#define YY_FLEX_MINOR_VERSION 5
+
+#include <stdio.h>
+
+
+/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
+#ifdef c_plusplus
+#ifndef __cplusplus
+#define __cplusplus
+#endif
+#endif
+
+
+#ifdef __cplusplus
+
+#include <stdlib.h>
+#include <unistd.h>
+
+/* Use prototypes in function declarations. */
+#define YY_USE_PROTOS
+
+/* The "const" storage-class-modifier is valid. */
+#define YY_USE_CONST
+
+#else	/* ! __cplusplus */
+
+#if __STDC__
+
+#define YY_USE_PROTOS
+#define YY_USE_CONST
+
+#endif	/* __STDC__ */
+#endif	/* ! __cplusplus */
+
+#ifdef __TURBOC__
+ #pragma warn -rch
+ #pragma warn -use
+#include <io.h>
+#include <stdlib.h>
+#define YY_USE_CONST
+#define YY_USE_PROTOS
+#endif
+
+#ifdef YY_USE_CONST
+#define yyconst const
+#else
+#define yyconst
+#endif
+
+
+#ifdef YY_USE_PROTOS
+#define YY_PROTO(proto) proto
+#else
+#define YY_PROTO(proto) ()
+#endif
+
+/* Returned upon end-of-file. */
+#define YY_NULL 0
+
+/* Promotes a possibly negative, possibly signed char to an unsigned
+ * integer for use as an array index.  If the signed char is negative,
+ * we want to instead treat it as an 8-bit unsigned char, hence the
+ * double cast.
+ */
+#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)
+
+/* Enter a start condition.  This macro really ought to take a parameter,
+ * but we do it the disgusting crufty way forced on us by the ()-less
+ * definition of BEGIN.
+ */
+#define BEGIN yy_start = 1 + 2 *
+
+/* Translate the current start state into a value that can be later handed
+ * to BEGIN to return to the state.  The YYSTATE alias is for lex
+ * compatibility.
+ */
+#define YY_START ((yy_start - 1) / 2)
+#define YYSTATE YY_START
+
+/* Action number for EOF rule of a given start state. */
+#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
+
+/* Special action meaning "start processing a new file". */
+#define YY_NEW_FILE yyrestart( yyin )
+
+#define YY_END_OF_BUFFER_CHAR 0
+
+/* Size of default input buffer. */
+#define YY_BUF_SIZE 16384
+
+typedef struct yy_buffer_state *YY_BUFFER_STATE;
+
+extern int yyleng;
+extern FILE *yyin, *yyout;
+
+#define EOB_ACT_CONTINUE_SCAN 0
+#define EOB_ACT_END_OF_FILE 1
+#define EOB_ACT_LAST_MATCH 2
+
+/* The funky do-while in the following #define is used to turn the definition
+ * int a single C statement (which needs a semi-colon terminator).  This
+ * avoids problems with code like:
+ *
+ * 	if ( condition_holds )
+ *		yyless( 5 );
+ *	else
+ *		do_something_else();
+ *
+ * Prior to using the do-while the compiler would get upset at the
+ * "else" because it interpreted the "if" statement as being all
+ * done when it reached the ';' after the yyless() call.
+ */
+
+/* Return all but the first 'n' matched characters back to the input stream. */
+
+#define yyless(n) \
+	do \
+		{ \
+		/* Undo effects of setting up yytext. */ \
+		*yy_cp = yy_hold_char; \
+		YY_RESTORE_YY_MORE_OFFSET \
+		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
+		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
+		} \
+	while ( 0 )
+
+#define unput(c) yyunput( c, yytext_ptr )
+
+/* The following is because we cannot portably get our hands on size_t
+ * (without autoconf's help, which isn't available because we want
+ * flex-generated scanners to compile on their own).
+ */
+typedef unsigned int yy_size_t;
+
+
+struct yy_buffer_state
+	{
+	FILE *yy_input_file;
+
+	char *yy_ch_buf;		/* input buffer */
+	char *yy_buf_pos;		/* current position in input buffer */
+
+	/* Size of input buffer in bytes, not including room for EOB
+	 * characters.
+	 */
+	yy_size_t yy_buf_size;
+
+	/* Number of characters read into yy_ch_buf, not including EOB
+	 * characters.
+	 */
+	int yy_n_chars;
+
+	/* Whether we "own" the buffer - i.e., we know we created it,
+	 * and can realloc() it to grow it, and should free() it to
+	 * delete it.
+	 */
+	int yy_is_our_buffer;
+
+	/* Whether this is an "interactive" input source; if so, and
+	 * if we're using stdio for input, then we want to use getc()
+	 * instead of fread(), to make sure we stop fetching input after
+	 * each newline.
+	 */
+	int yy_is_interactive;
+
+	/* Whether we're considered to be at the beginning of a line.
+	 * If so, '^' rules will be active on the next match, otherwise
+	 * not.
+	 */
+	int yy_at_bol;
+
+	/* Whether to try to fill the input buffer when we reach the
+	 * end of it.
+	 */
+	int yy_fill_buffer;
+
+	int yy_buffer_status;
+#define YY_BUFFER_NEW 0
+#define YY_BUFFER_NORMAL 1
+	/* When an EOF's been seen but there's still some text to process
+	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
+	 * shouldn't try reading from the input source any more.  We might
+	 * still have a bunch of tokens to match, though, because of
+	 * possible backing-up.
+	 *
+	 * When we actually see the EOF, we change the status to "new"
+	 * (via yyrestart()), so that the user can continue scanning by
+	 * just pointing yyin at a new input file.
+	 */
+#define YY_BUFFER_EOF_PENDING 2
+	};
+
+static YY_BUFFER_STATE yy_current_buffer = 0;
+
+/* We provide macros for accessing buffer states in case in the
+ * future we want to put the buffer states in a more general
+ * "scanner state".
+ */
+#define YY_CURRENT_BUFFER yy_current_buffer
+
+
+/* yy_hold_char holds the character lost when yytext is formed. */
+static char yy_hold_char;
+
+static int yy_n_chars;		/* number of characters read into yy_ch_buf */
+
+
+int yyleng;
+
+/* Points to current character in buffer. */
+static char *yy_c_buf_p = (char *) 0;
+static int yy_init = 1;		/* whether we need to initialize */
+static int yy_start = 0;	/* start state number */
+
+/* Flag which is used to allow yywrap()'s to do buffer switches
+ * instead of setting up a fresh yyin.  A bit of a hack ...
+ */
+static int yy_did_buffer_switch_on_eof;
+
+void yyrestart YY_PROTO(( FILE *input_file ));
+
+void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
+void yy_load_buffer_state YY_PROTO(( void ));
+YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
+void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
+void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
+void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
+#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )
+
+YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
+YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
+YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));
+
+static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
+static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
+static void yy_flex_free YY_PROTO(( void * ));
+
+#define yy_new_buffer yy_create_buffer
+
+#define yy_set_interactive(is_interactive) \
+	{ \
+	if ( ! yy_current_buffer ) \
+		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
+	yy_current_buffer->yy_is_interactive = is_interactive; \
+	}
+
+#define yy_set_bol(at_bol) \
+	{ \
+	if ( ! yy_current_buffer ) \
+		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
+	yy_current_buffer->yy_at_bol = at_bol; \
+	}
+
+#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)
+
+typedef unsigned char YY_CHAR;
+FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
+typedef int yy_state_type;
+extern char *yytext;
+#define yytext_ptr yytext
+
+static yy_state_type yy_get_previous_state YY_PROTO(( void ));
+static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
+static int yy_get_next_buffer YY_PROTO(( void ));
+static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));
+
+/* Done after the current pattern has been matched and before the
+ * corresponding action - sets up yytext.
+ */
+#define YY_DO_BEFORE_ACTION \
+	yytext_ptr = yy_bp; \
+	yyleng = (int) (yy_cp - yy_bp); \
+	yy_hold_char = *yy_cp; \
+	*yy_cp = '\0'; \
+	yy_c_buf_p = yy_cp;
+
+#define YY_NUM_RULES 39
+#define YY_END_OF_BUFFER 40
+static yyconst short int yy_accept[49] =
+    {   0,
+        0,    0,   40,   38,   19,   20,   38,   38,   38,   36,
+       38,   37,    4,    6,    5,   13,    3,   14,    9,    1,
+        2,   11,   15,   10,   16,   12,    7,    8,   27,   30,
+       25,   26,   32,   31,   33,   28,   29,   17,   21,   18,
+       20,   19,   23,   22,   24,   34,   35,    0
+    } ;
+
+static yyconst int yy_ec[256] =
+    {   0,
+        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    4,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    5,    1,    1,    1,    1,    1,    1,    6,
+        1,    1,    7,    1,    1,    8,    9,   10,    1,    1,
+       11,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,   12,    1,    1,    1,    1,    1,    1,   13,   14,
+
+        1,   15,    1,    1,   16,    1,    1,    1,   17,   18,
+        1,   19,   20,   21,   22,   23,    1,    1,    1,    1,
+        1,    1,   24,   25,   26,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1
+    } ;
+
+static yyconst int yy_meta[27] =
+    {   0,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
+        1,    1,    1,    1,    1,    1
+    } ;
+
+static yyconst short int yy_base[50] =
+    {   0,
+        0,   25,    6,  111,  111,  111,   46,   64,   84,  111,
+        0,  111,  111,  111,  111,  111,  111,  111,  111,  111,
+      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
+      111,  111,  111,  111,  111,  111,  111,  111,  111,  111,
+      111,  111,  111,  111,  111,  111,  111,  111,    0
+    } ;
+
+static yyconst short int yy_def[50] =
+    {   0,
+       49,   49,   48,   48,   48,   48,   48,   48,   48,   48,
+       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
+       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
+       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
+       48,   48,   48,   48,   48,   48,   48,    0,   48
+    } ;
+
+static yyconst short int yy_nxt[138] =
+    {   0,
+        4,    5,    6,    7,    8,   48,   48,   48,   48,   48,
+       48,    9,   48,   48,   46,   48,   48,   48,   47,   48,
+       48,   48,   48,   10,   11,   12,    5,    6,    7,    8,
+       48,   48,   48,   48,   48,   48,    9,   48,   48,   48,
+       48,   48,   48,   48,   48,   48,   48,   48,   10,   11,
+       12,   13,   14,   15,   16,   17,   18,   48,   19,   20,
+       21,   22,   23,   24,   48,   25,   26,   27,   28,   29,
+       29,   48,   48,   29,   48,   48,   30,   31,   32,   33,
+       48,   34,   48,   48,   35,   36,   37,   38,   39,   48,
+       48,   48,   48,   48,   48,   40,   48,   48,   48,   48,
+
+       48,   41,   48,   48,   48,   48,   42,   43,   44,   45,
+        3,   48,   48,   48,   48,   48,   48,   48,   48,   48,
+       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
+       48,   48,   48,   48,   48,   48,   48
+    } ;
+
+static yyconst short int yy_chk[138] =
+    {   0,
+       49,    1,    1,    1,    1,    3,    0,    0,    0,    0,
+        0,    1,    0,    0,   11,    0,    0,    0,   11,    0,
+        0,    0,    0,    1,    1,    1,    2,    2,    2,    2,
+        0,    0,    0,    0,    0,    0,    2,    0,    0,    0,
+        0,    0,    0,    0,    0,    0,    0,    0,    2,    2,
+        2,    7,    7,    7,    7,    7,    7,    0,    7,    7,
+        7,    7,    7,    7,    0,    7,    7,    7,    7,    8,
+        8,    0,    0,    8,    0,    0,    8,    8,    8,    8,
+        0,    8,    0,    0,    8,    8,    8,    9,    9,    0,
+        0,    0,    0,    0,    0,    9,    0,    0,    0,    0,
+
+        0,    9,    0,    0,    0,    0,    9,    9,    9,    9,
+       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
+       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
+       48,   48,   48,   48,   48,   48,   48
+    } ;
+
+static yy_state_type yy_last_accepting_state;
+static char *yy_last_accepting_cpos;
+
+/* The intent behind this definition is that it'll catch
+ * any uses of REJECT which flex missed.
+ */
+#define REJECT reject_used_but_not_detected
+#define yymore() yymore_used_but_not_detected
+#define YY_MORE_ADJ 0
+#define YY_RESTORE_YY_MORE_OFFSET
+char *yytext;
+#line 1 "quote_fmt_lex.l"
+#define INITIAL 0
+#line 2 "quote_fmt_lex.l"
+#include "quote_fmt_lex.h"
+#include "quote_fmt_parse.h"
+#line 427 "lex.yy.c"
+
+/* Macros after this point can all be overridden by user definitions in
+ * section 1.
+ */
+
+#ifndef YY_SKIP_YYWRAP
+#ifdef __cplusplus
+extern "C" int yywrap YY_PROTO(( void ));
+#else
+extern int yywrap YY_PROTO(( void ));
+#endif
+#endif
+
+#ifndef YY_NO_UNPUT
+static void yyunput YY_PROTO(( int c, char *buf_ptr ));
+#endif
+
+#ifndef yytext_ptr
+static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
+#endif
+
+#ifdef YY_NEED_STRLEN
+static int yy_flex_strlen YY_PROTO(( yyconst char * ));
+#endif
+
+#ifndef YY_NO_INPUT
+#ifdef __cplusplus
+static int yyinput YY_PROTO(( void ));
+#else
+static int input YY_PROTO(( void ));
+#endif
+#endif
+
+#if YY_STACK_USED
+static int yy_start_stack_ptr = 0;
+static int yy_start_stack_depth = 0;
+static int *yy_start_stack = 0;
+#ifndef YY_NO_PUSH_STATE
+static void yy_push_state YY_PROTO(( int new_state ));
+#endif
+#ifndef YY_NO_POP_STATE
+static void yy_pop_state YY_PROTO(( void ));
+#endif
+#ifndef YY_NO_TOP_STATE
+static int yy_top_state YY_PROTO(( void ));
+#endif
+
+#else
+#define YY_NO_PUSH_STATE 1
+#define YY_NO_POP_STATE 1
+#define YY_NO_TOP_STATE 1
+#endif
+
+#ifdef YY_MALLOC_DECL
+YY_MALLOC_DECL
+#else
+#if __STDC__
+#ifndef __cplusplus
+#include <stdlib.h>
+#endif
+#else
+/* Just try to get by without declaring the routines.  This will fail
+ * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
+ * or sizeof(void*) != sizeof(int).
+ */
+#endif
+#endif
+
+/* Amount of stuff to slurp up with each read. */
+#ifndef YY_READ_BUF_SIZE
+#define YY_READ_BUF_SIZE 8192
+#endif
+
+/* Copy whatever the last rule matched to the standard output. */
+
+#ifndef ECHO
+/* This used to be an fputs(), but since the string might contain NUL's,
+ * we now use fwrite().
+ */
+#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
+#endif
+
+/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
+ * is returned in "result".
+ */
+#ifndef YY_INPUT
+#define YY_INPUT(buf,result,max_size) \
+	if ( yy_current_buffer->yy_is_interactive ) \
+		{ \
+		int c = '*', n; \
+		for ( n = 0; n < max_size && \
+			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
+			buf[n] = (char) c; \
+		if ( c == '\n' ) \
+			buf[n++] = (char) c; \
+		if ( c == EOF && ferror( yyin ) ) \
+			YY_FATAL_ERROR( "input in flex scanner failed" ); \
+		result = n; \
+		} \
+	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
+		  && ferror( yyin ) ) \
+		YY_FATAL_ERROR( "input in flex scanner failed" );
+#endif
+
+/* No semi-colon after return; correct usage is to write "yyterminate();" -
+ * we don't want an extra ';' after the "return" because that will cause
+ * some compilers to complain about unreachable statements.
+ */
+#ifndef yyterminate
+#define yyterminate() return YY_NULL
+#endif
+
+/* Number of entries by which start-condition stack grows. */
+#ifndef YY_START_STACK_INCR
+#define YY_START_STACK_INCR 25
+#endif
+
+/* Report a fatal error. */
+#ifndef YY_FATAL_ERROR
+#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
+#endif
+
+/* Default declaration of generated scanner - a define so the user can
+ * easily add parameters.
+ */
+#ifndef YY_DECL
+#define YY_DECL int yylex YY_PROTO(( void ))
+#endif
+
+/* Code executed at the beginning of each rule, after yytext and yyleng
+ * have been set up.
+ */
+#ifndef YY_USER_ACTION
+#define YY_USER_ACTION
+#endif
+
+/* Code executed at the end of each rule. */
+#ifndef YY_BREAK
+#define YY_BREAK break;
+#endif
+
+#define YY_RULE_SETUP \
+	YY_USER_ACTION
+
+YY_DECL
+	{
+	register yy_state_type yy_current_state;
+	register char *yy_cp, *yy_bp;
+	register int yy_act;
+
+#line 9 "quote_fmt_lex.l"
+
+
+#line 581 "lex.yy.c"
+
+	if ( yy_init )
+		{
+		yy_init = 0;
+
+#ifdef YY_USER_INIT
+		YY_USER_INIT;
+#endif
+
+		if ( ! yy_start )
+			yy_start = 1;	/* first start state */
+
+		if ( ! yyin )
+			yyin = stdin;
+
+		if ( ! yyout )
+			yyout = stdout;
+
+		if ( ! yy_current_buffer )
+			yy_current_buffer =
+				yy_create_buffer( yyin, YY_BUF_SIZE );
+
+		yy_load_buffer_state();
+		}
+
+	while ( 1 )		/* loops until end-of-file is reached */
+		{
+		yy_cp = yy_c_buf_p;
+
+		/* Support of yytext. */
+		*yy_cp = yy_hold_char;
+
+		/* yy_bp points to the position in yy_ch_buf of the start of
+		 * the current run.
+		 */
+		yy_bp = yy_cp;
+
+		yy_current_state = yy_start;
+yy_match:
+		do
+			{
+			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
+			if ( yy_accept[yy_current_state] )
+				{
+				yy_last_accepting_state = yy_current_state;
+				yy_last_accepting_cpos = yy_cp;
+				}
+			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
+				{
+				yy_current_state = (int) yy_def[yy_current_state];
+				if ( yy_current_state >= 49 )
+					yy_c = yy_meta[(unsigned int) yy_c];
+				}
+			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
+			++yy_cp;
+			}
+		while ( yy_base[yy_current_state] != 111 );
+
+yy_find_action:
+		yy_act = yy_accept[yy_current_state];
+		if ( yy_act == 0 )
+			{ /* have to back up */
+			yy_cp = yy_last_accepting_cpos;
+			yy_current_state = yy_last_accepting_state;
+			yy_act = yy_accept[yy_current_state];
+			}
+
+		YY_DO_BEFORE_ACTION;
+
+
+do_action:	/* This label is used only to access EOF actions. */
+
+
+		switch ( yy_act )
+	{ /* beginning of action switch */
+			case 0: /* must back up */
+			/* undo the effects of YY_DO_BEFORE_ACTION */
+			*yy_cp = yy_hold_char;
+			yy_cp = yy_last_accepting_cpos;
+			yy_current_state = yy_last_accepting_state;
+			goto yy_find_action;
+
+case 1:
+YY_RULE_SETUP
+#line 11 "quote_fmt_lex.l"
+/* date */ return SHOW_DATE;
+	YY_BREAK
+case 2:
+YY_RULE_SETUP
+#line 12 "quote_fmt_lex.l"
+/* from */ return SHOW_FROM;
+	YY_BREAK
+case 3:
+YY_RULE_SETUP
+#line 13 "quote_fmt_lex.l"
+/* full name */ return SHOW_FULLNAME;
+	YY_BREAK
+case 4:
+YY_RULE_SETUP
+#line 14 "quote_fmt_lex.l"
+/* first name */ return SHOW_FIRST_NAME;
+	YY_BREAK
+case 5:
+YY_RULE_SETUP
+#line 15 "quote_fmt_lex.l"
+/* last name */ return SHOW_LAST_NAME;
+	YY_BREAK
+case 6:
+YY_RULE_SETUP
+#line 16 "quote_fmt_lex.l"
+/* initial of sender */ return SHOW_SENDER_INITIAL;
+	YY_BREAK
+case 7:
+YY_RULE_SETUP
+#line 17 "quote_fmt_lex.l"
+/* subject */ return SHOW_SUBJECT;
+	YY_BREAK
+case 8:
+YY_RULE_SETUP
+#line 18 "quote_fmt_lex.l"
+/* to */ return SHOW_TO;
+	YY_BREAK
+case 9:
+YY_RULE_SETUP
+#line 19 "quote_fmt_lex.l"
+/* cc */ return SHOW_CC;
+	YY_BREAK
+case 10:
+YY_RULE_SETUP
+#line 20 "quote_fmt_lex.l"
+/* newsgroups */ return SHOW_NEWSGROUPS;
+	YY_BREAK
+case 11:
+YY_RULE_SETUP
+#line 21 "quote_fmt_lex.l"
+/* message-id */ return SHOW_MESSAGEID;
+	YY_BREAK
+case 12:
+YY_RULE_SETUP
+#line 22 "quote_fmt_lex.l"
+/* references */ return SHOW_REFERENCES;
+	YY_BREAK
+case 13:
+YY_RULE_SETUP
+#line 23 "quote_fmt_lex.l"
+/* message */ return SHOW_MESSAGE;
+	YY_BREAK
+case 14:
+YY_RULE_SETUP
+#line 24 "quote_fmt_lex.l"
+/* quoted message */ return SHOW_QUOTED_MESSAGE;
+	YY_BREAK
+case 15:
+YY_RULE_SETUP
+#line 25 "quote_fmt_lex.l"
+/* message with no signature */ return SHOW_MESSAGE_NO_SIGNATURE;
+	YY_BREAK
+case 16:
+YY_RULE_SETUP
+#line 26 "quote_fmt_lex.l"
+/* quoted message with no signature */ return SHOW_QUOTED_MESSAGE_NO_SIGNATURE;
+	YY_BREAK
+case 17:
+YY_RULE_SETUP
+#line 27 "quote_fmt_lex.l"
+/* % */ return SHOW_PERCENT;
+	YY_BREAK
+case 18:
+YY_RULE_SETUP
+#line 28 "quote_fmt_lex.l"
+/* \ */ return SHOW_BACKSLASH;
+	YY_BREAK
+case 19:
+YY_RULE_SETUP
+#line 29 "quote_fmt_lex.l"
+/* tab */ return SHOW_TAB;
+	YY_BREAK
+case 20:
+YY_RULE_SETUP
+#line 30 "quote_fmt_lex.l"
+/* return */ return SHOW_EOL;
+	YY_BREAK
+case 21:
+YY_RULE_SETUP
+#line 31 "quote_fmt_lex.l"
+/* ? */ return SHOW_QUESTION_MARK;
+	YY_BREAK
+case 22:
+YY_RULE_SETUP
+#line 32 "quote_fmt_lex.l"
+return SHOW_PIPE;
+	YY_BREAK
+case 23:
+YY_RULE_SETUP
+#line 33 "quote_fmt_lex.l"
+return SHOW_OPARENT;
+	YY_BREAK
+case 24:
+YY_RULE_SETUP
+#line 34 "quote_fmt_lex.l"
+return SHOW_CPARENT;
+	YY_BREAK
+case 25:
+YY_RULE_SETUP
+#line 35 "quote_fmt_lex.l"
+/* query date */ return QUERY_DATE;
+	YY_BREAK
+case 26:
+YY_RULE_SETUP
+#line 36 "quote_fmt_lex.l"
+/* query from */ return QUERY_FROM;
+	YY_BREAK
+case 27:
+YY_RULE_SETUP
+#line 37 "quote_fmt_lex.l"
+/* query from name */ return QUERY_FULLNAME;
+	YY_BREAK
+case 28:
+YY_RULE_SETUP
+#line 38 "quote_fmt_lex.l"
+/* query subject */ return QUERY_SUBJECT;
+	YY_BREAK
+case 29:
+YY_RULE_SETUP
+#line 39 "quote_fmt_lex.l"
+/* query to */ return QUERY_TO;
+	YY_BREAK
+case 30:
+YY_RULE_SETUP
+#line 40 "quote_fmt_lex.l"
+/* query cc */ return QUERY_CC;
+	YY_BREAK
+case 31:
+YY_RULE_SETUP
+#line 41 "quote_fmt_lex.l"
+/* query newsgroups */ return QUERY_NEWSGROUPS;
+	YY_BREAK
+case 32:
+YY_RULE_SETUP
+#line 42 "quote_fmt_lex.l"
+/* query message-id */ return QUERY_MESSAGEID;
+	YY_BREAK
+case 33:
+YY_RULE_SETUP
+#line 43 "quote_fmt_lex.l"
+/* query references */ return QUERY_REFERENCES;
+	YY_BREAK
+case 34:
+YY_RULE_SETUP
+#line 44 "quote_fmt_lex.l"
+/* insert file */ return INSERT_FILE;
+	YY_BREAK
+case 35:
+YY_RULE_SETUP
+#line 45 "quote_fmt_lex.l"
+/* insert program output */ return INSERT_PROGRAMOUTPUT;
+	YY_BREAK
+case 36:
+YY_RULE_SETUP
+#line 46 "quote_fmt_lex.l"
+return OPARENT;
+	YY_BREAK
+case 37:
+YY_RULE_SETUP
+#line 47 "quote_fmt_lex.l"
+return CPARENT;
+	YY_BREAK
+case 38:
+YY_RULE_SETUP
+#line 48 "quote_fmt_lex.l"
+{ yylval.chr = yytext[0]; return CHARACTER; }
+	YY_BREAK
+case 39:
+YY_RULE_SETUP
+#line 50 "quote_fmt_lex.l"
+ECHO;
+	YY_BREAK
+#line 859 "lex.yy.c"
+case YY_STATE_EOF(INITIAL):
+	yyterminate();
+
+	case YY_END_OF_BUFFER:
+		{
+		/* Amount of text matched not including the EOB char. */
+		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;
+
+		/* Undo the effects of YY_DO_BEFORE_ACTION. */
+		*yy_cp = yy_hold_char;
+		YY_RESTORE_YY_MORE_OFFSET
+
+		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
+			{
+			/* We're scanning a new file or input source.  It's
+			 * possible that this happened because the user
+			 * just pointed yyin at a new source and called
+			 * yylex().  If so, then we have to assure
+			 * consistency between yy_current_buffer and our
+			 * globals.  Here is the right place to do so, because
+			 * this is the first action (other than possibly a
+			 * back-up) that will match for the new input source.
+			 */
+			yy_n_chars = yy_current_buffer->yy_n_chars;
+			yy_current_buffer->yy_input_file = yyin;
+			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
+			}
+
+		/* Note that here we test for yy_c_buf_p "<=" to the position
+		 * of the first EOB in the buffer, since yy_c_buf_p will
+		 * already have been incremented past the NUL character
+		 * (since all states make transitions on EOB to the
+		 * end-of-buffer state).  Contrast this with the test
+		 * in input().
+		 */
+		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
+			{ /* This was really a NUL. */
+			yy_state_type yy_next_state;
+
+			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;
+
+			yy_current_state = yy_get_previous_state();
+
+			/* Okay, we're now positioned to make the NUL
+			 * transition.  We couldn't have
+			 * yy_get_previous_state() go ahead and do it
+			 * for us because it doesn't know how to deal
+			 * with the possibility of jamming (and we don't
+			 * want to build jamming into it because then it
+			 * will run more slowly).
+			 */
+
+			yy_next_state = yy_try_NUL_trans( yy_current_state );
+
+			yy_bp = yytext_ptr + YY_MORE_ADJ;
+
+			if ( yy_next_state )
+				{
+				/* Consume the NUL. */
+				yy_cp = ++yy_c_buf_p;
+				yy_current_state = yy_next_state;
+				goto yy_match;
+				}
+
+			else
+				{
+				yy_cp = yy_c_buf_p;
+				goto yy_find_action;
+				}
+			}
+
+		else switch ( yy_get_next_buffer() )
+			{
+			case EOB_ACT_END_OF_FILE:
+				{
+				yy_did_buffer_switch_on_eof = 0;
+
+				if ( yywrap() )
+					{
+					/* Note: because we've taken care in
+					 * yy_get_next_buffer() to have set up
+					 * yytext, we can now set up
+					 * yy_c_buf_p so that if some total
+					 * hoser (like flex itself) wants to
+					 * call the scanner after we return the
+					 * YY_NULL, it'll still work - another
+					 * YY_NULL will get returned.
+					 */
+					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;
+
+					yy_act = YY_STATE_EOF(YY_START);
+					goto do_action;
+					}
+
+				else
+					{
+					if ( ! yy_did_buffer_switch_on_eof )
+						YY_NEW_FILE;
+					}
+				break;
+				}
+
+			case EOB_ACT_CONTINUE_SCAN:
+				yy_c_buf_p =
+					yytext_ptr + yy_amount_of_matched_text;
+
+				yy_current_state = yy_get_previous_state();
+
+				yy_cp = yy_c_buf_p;
+				yy_bp = yytext_ptr + YY_MORE_ADJ;
+				goto yy_match;
+
+			case EOB_ACT_LAST_MATCH:
+				yy_c_buf_p =
+				&yy_current_buffer->yy_ch_buf[yy_n_chars];
+
+				yy_current_state = yy_get_previous_state();
+
+				yy_cp = yy_c_buf_p;
+				yy_bp = yytext_ptr + YY_MORE_ADJ;
+				goto yy_find_action;
+			}
+		break;
+		}
+
+	default:
+		YY_FATAL_ERROR(
+			"fatal flex scanner internal error--no action found" );
+	} /* end of action switch */
+		} /* end of scanning one token */
+	} /* end of yylex */
+
+
+/* yy_get_next_buffer - try to read in a new buffer
+ *
+ * Returns a code representing an action:
+ *	EOB_ACT_LAST_MATCH -
+ *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
+ *	EOB_ACT_END_OF_FILE - end of file
+ */
+
+static int yy_get_next_buffer()
+	{
+	register char *dest = yy_current_buffer->yy_ch_buf;
+	register char *source = yytext_ptr;
+	register int number_to_move, i;
+	int ret_val;
+
+	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
+		YY_FATAL_ERROR(
+		"fatal flex scanner internal error--end of buffer missed" );
+
+	if ( yy_current_buffer->yy_fill_buffer == 0 )
+		{ /* Don't try to fill the buffer, so this is an EOF. */
+		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
+			{
+			/* We matched a single character, the EOB, so
+			 * treat this as a final EOF.
+			 */
+			return EOB_ACT_END_OF_FILE;
+			}
+
+		else
+			{
+			/* We matched some text prior to the EOB, first
+			 * process it.
+			 */
+			return EOB_ACT_LAST_MATCH;
+			}
+		}
+
+	/* Try to read more data. */
+
+	/* First move last chars to start of buffer. */
+	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;
+
+	for ( i = 0; i < number_to_move; ++i )
+		*(dest++) = *(source++);
+
+	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
+		/* don't do the read, it's not guaranteed to return an EOF,
+		 * just force an EOF
+		 */
+		yy_current_buffer->yy_n_chars = yy_n_chars = 0;
+
+	else
+		{
+		int num_to_read =
+			yy_current_buffer->yy_buf_size - number_to_move - 1;
+
+		while ( num_to_read <= 0 )
+			{ /* Not enough room in the buffer - grow it. */
+#ifdef YY_USES_REJECT
+			YY_FATAL_ERROR(
+"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
+#else
+
+			/* just a shorter name for the current buffer */
+			YY_BUFFER_STATE b = yy_current_buffer;
+
+			int yy_c_buf_p_offset =
+				(int) (yy_c_buf_p - b->yy_ch_buf);
+
+			if ( b->yy_is_our_buffer )
+				{
+				int new_size = b->yy_buf_size * 2;
+
+				if ( new_size <= 0 )
+					b->yy_buf_size += b->yy_buf_size / 8;
+				else
+					b->yy_buf_size *= 2;
+
+				b->yy_ch_buf = (char *)
+					/* Include room in for 2 EOB chars. */
+					yy_flex_realloc( (void *) b->yy_ch_buf,
+							 b->yy_buf_size + 2 );
+				}
+			else
+				/* Can't grow it, we don't own it. */
+				b->yy_ch_buf = 0;
+
+			if ( ! b->yy_ch_buf )
+				YY_FATAL_ERROR(
+				"fatal error - scanner input buffer overflow" );
+
+			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];
+
+			num_to_read = yy_current_buffer->yy_buf_size -
+						number_to_move - 1;
+#endif
+			}
+
+		if ( num_to_read > YY_READ_BUF_SIZE )
+			num_to_read = YY_READ_BUF_SIZE;
+
+		/* Read in more data. */
+		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
+			yy_n_chars, num_to_read );
+
+		yy_current_buffer->yy_n_chars = yy_n_chars;
+		}
+
+	if ( yy_n_chars == 0 )
+		{
+		if ( number_to_move == YY_MORE_ADJ )
+			{
+			ret_val = EOB_ACT_END_OF_FILE;
+			yyrestart( yyin );
+			}
+
+		else
+			{
+			ret_val = EOB_ACT_LAST_MATCH;
+			yy_current_buffer->yy_buffer_status =
+				YY_BUFFER_EOF_PENDING;
+			}
+		}
+
+	else
+		ret_val = EOB_ACT_CONTINUE_SCAN;
+
+	yy_n_chars += number_to_move;
+	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
+	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;
+
+	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];
+
+	return ret_val;
+	}
+
+
+/* yy_get_previous_state - get the state just before the EOB char was reached */
+
+static yy_state_type yy_get_previous_state()
+	{
+	register yy_state_type yy_current_state;
+	register char *yy_cp;
+
+	yy_current_state = yy_start;
+
+	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
+		{
+		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
+		if ( yy_accept[yy_current_state] )
+			{
+			yy_last_accepting_state = yy_current_state;
+			yy_last_accepting_cpos = yy_cp;
+			}
+		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
+			{
+			yy_current_state = (int) yy_def[yy_current_state];
+			if ( yy_current_state >= 49 )
+				yy_c = yy_meta[(unsigned int) yy_c];
+			}
+		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
+		}
+
+	return yy_current_state;
+	}
+
+
+/* yy_try_NUL_trans - try to make a transition on the NUL character
+ *
+ * synopsis
+ *	next_state = yy_try_NUL_trans( current_state );
+ */
+
+#ifdef YY_USE_PROTOS
+static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
+#else
+static yy_state_type yy_try_NUL_trans( yy_current_state )
+yy_state_type yy_current_state;
+#endif
+	{
+	register int yy_is_jam;
+	register char *yy_cp = yy_c_buf_p;
+
+	register YY_CHAR yy_c = 1;
+	if ( yy_accept[yy_current_state] )
+		{
+		yy_last_accepting_state = yy_current_state;
+		yy_last_accepting_cpos = yy_cp;
+		}
+	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
+		{
+		yy_current_state = (int) yy_def[yy_current_state];
+		if ( yy_current_state >= 49 )
+			yy_c = yy_meta[(unsigned int) yy_c];
+		}
+	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
+	yy_is_jam = (yy_current_state == 48);
+
+	return yy_is_jam ? 0 : yy_current_state;
+	}
+
+
+#ifndef YY_NO_UNPUT
+#ifdef YY_USE_PROTOS
+static void yyunput( int c, register char *yy_bp )
+#else
+static void yyunput( c, yy_bp )
+int c;
+register char *yy_bp;
+#endif
+	{
+	register char *yy_cp = yy_c_buf_p;
+
+	/* undo effects of setting up yytext */
+	*yy_cp = yy_hold_char;
+
+	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
+		{ /* need to shift things up to make room */
+		/* +2 for EOB chars. */
+		register int number_to_move = yy_n_chars + 2;
+		register char *dest = &yy_current_buffer->yy_ch_buf[
+					yy_current_buffer->yy_buf_size + 2];
+		register char *source =
+				&yy_current_buffer->yy_ch_buf[number_to_move];
+
+		while ( source > yy_current_buffer->yy_ch_buf )
+			*--dest = *--source;
+
+		yy_cp += (int) (dest - source);
+		yy_bp += (int) (dest - source);
+		yy_current_buffer->yy_n_chars =
+			yy_n_chars = yy_current_buffer->yy_buf_size;
+
+		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
+			YY_FATAL_ERROR( "flex scanner push-back overflow" );
+		}
+
+	*--yy_cp = (char) c;
+
+
+	yytext_ptr = yy_bp;
+	yy_hold_char = *yy_cp;
+	yy_c_buf_p = yy_cp;
+	}
+#endif	/* ifndef YY_NO_UNPUT */
+
+
+#ifdef __cplusplus
+static int yyinput()
+#else
+static int input()
+#endif
+	{
+	int c;
+
+	*yy_c_buf_p = yy_hold_char;
+
+	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
+		{
+		/* yy_c_buf_p now points to the character we want to return.
+		 * If this occurs *before* the EOB characters, then it's a
+		 * valid NUL; if not, then we've hit the end of the buffer.
+		 */
+		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
+			/* This was really a NUL. */
+			*yy_c_buf_p = '\0';
+
+		else
+			{ /* need more input */
+			int offset = yy_c_buf_p - yytext_ptr;
+			++yy_c_buf_p;
+
+			switch ( yy_get_next_buffer() )
+				{
+				case EOB_ACT_LAST_MATCH:
+					/* This happens because yy_g_n_b()
+					 * sees that we've accumulated a
+					 * token and flags that we need to
+					 * try matching the token before
+					 * proceeding.  But for input(),
+					 * there's no matching to consider.
+					 * So convert the EOB_ACT_LAST_MATCH
+					 * to EOB_ACT_END_OF_FILE.
+					 */
+
+					/* Reset buffer status. */
+					yyrestart( yyin );
+
+					/* fall through */
+
+				case EOB_ACT_END_OF_FILE:
+					{
+					if ( yywrap() )
+						return EOF;
+
+					if ( ! yy_did_buffer_switch_on_eof )
+						YY_NEW_FILE;
+#ifdef __cplusplus
+					return yyinput();
+#else
+					return input();
+#endif
+					}
+
+				case EOB_ACT_CONTINUE_SCAN:
+					yy_c_buf_p = yytext_ptr + offset;
+					break;
+				}
+			}
+		}
+
+	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
+	*yy_c_buf_p = '\0';	/* preserve yytext */
+	yy_hold_char = *++yy_c_buf_p;
+
+
+	return c;
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yyrestart( FILE *input_file )
+#else
+void yyrestart( input_file )
+FILE *input_file;
+#endif
+	{
+	if ( ! yy_current_buffer )
+		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );
+
+	yy_init_buffer( yy_current_buffer, input_file );
+	yy_load_buffer_state();
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
+#else
+void yy_switch_to_buffer( new_buffer )
+YY_BUFFER_STATE new_buffer;
+#endif
+	{
+	if ( yy_current_buffer == new_buffer )
+		return;
+
+	if ( yy_current_buffer )
+		{
+		/* Flush out information for old buffer. */
+		*yy_c_buf_p = yy_hold_char;
+		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
+		yy_current_buffer->yy_n_chars = yy_n_chars;
+		}
+
+	yy_current_buffer = new_buffer;
+	yy_load_buffer_state();
+
+	/* We don't actually know whether we did this switch during
+	 * EOF (yywrap()) processing, but the only time this flag
+	 * is looked at is after yywrap() is called, so it's safe
+	 * to go ahead and always set it.
+	 */
+	yy_did_buffer_switch_on_eof = 1;
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yy_load_buffer_state( void )
+#else
+void yy_load_buffer_state()
+#endif
+	{
+	yy_n_chars = yy_current_buffer->yy_n_chars;
+	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
+	yyin = yy_current_buffer->yy_input_file;
+	yy_hold_char = *yy_c_buf_p;
+	}
+
+
+#ifdef YY_USE_PROTOS
+YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
+#else
+YY_BUFFER_STATE yy_create_buffer( file, size )
+FILE *file;
+int size;
+#endif
+	{
+	YY_BUFFER_STATE b;
+
+	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
+	if ( ! b )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
+
+	b->yy_buf_size = size;
+
+	/* yy_ch_buf has to be 2 characters longer than the size given because
+	 * we need to put in 2 end-of-buffer characters.
+	 */
+	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
+	if ( ! b->yy_ch_buf )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );
+
+	b->yy_is_our_buffer = 1;
+
+	yy_init_buffer( b, file );
+
+	return b;
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yy_delete_buffer( YY_BUFFER_STATE b )
+#else
+void yy_delete_buffer( b )
+YY_BUFFER_STATE b;
+#endif
+	{
+	if ( ! b )
+		return;
+
+	if ( b == yy_current_buffer )
+		yy_current_buffer = (YY_BUFFER_STATE) 0;
+
+	if ( b->yy_is_our_buffer )
+		yy_flex_free( (void *) b->yy_ch_buf );
+
+	yy_flex_free( (void *) b );
+	}
+
+
+#ifndef YY_ALWAYS_INTERACTIVE
+#ifndef YY_NEVER_INTERACTIVE
+extern int isatty YY_PROTO(( int ));
+#endif
+#endif
+
+#ifdef YY_USE_PROTOS
+void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
+#else
+void yy_init_buffer( b, file )
+YY_BUFFER_STATE b;
+FILE *file;
+#endif
+
+
+	{
+	yy_flush_buffer( b );
+
+	b->yy_input_file = file;
+	b->yy_fill_buffer = 1;
+
+#if YY_ALWAYS_INTERACTIVE
+	b->yy_is_interactive = 1;
+#else
+#if YY_NEVER_INTERACTIVE
+	b->yy_is_interactive = 0;
+#else
+	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
+#endif
+#endif
+	}
+
+
+#ifdef YY_USE_PROTOS
+void yy_flush_buffer( YY_BUFFER_STATE b )
+#else
+void yy_flush_buffer( b )
+YY_BUFFER_STATE b;
+#endif
+
+	{
+	if ( ! b )
+		return;
+
+	b->yy_n_chars = 0;
+
+	/* We always need two end-of-buffer characters.  The first causes
+	 * a transition to the end-of-buffer state.  The second causes
+	 * a jam in that state.
+	 */
+	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
+	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
+
+	b->yy_buf_pos = &b->yy_ch_buf[0];
+
+	b->yy_at_bol = 1;
+	b->yy_buffer_status = YY_BUFFER_NEW;
+
+	if ( b == yy_current_buffer )
+		yy_load_buffer_state();
+	}
+
+
+#ifndef YY_NO_SCAN_BUFFER
+#ifdef YY_USE_PROTOS
+YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
+#else
+YY_BUFFER_STATE yy_scan_buffer( base, size )
+char *base;
+yy_size_t size;
+#endif
+	{
+	YY_BUFFER_STATE b;
+
+	if ( size < 2 ||
+	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
+	     base[size-1] != YY_END_OF_BUFFER_CHAR )
+		/* They forgot to leave room for the EOB's. */
+		return 0;
+
+	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
+	if ( ! b )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );
+
+	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
+	b->yy_buf_pos = b->yy_ch_buf = base;
+	b->yy_is_our_buffer = 0;
+	b->yy_input_file = 0;
+	b->yy_n_chars = b->yy_buf_size;
+	b->yy_is_interactive = 0;
+	b->yy_at_bol = 1;
+	b->yy_fill_buffer = 0;
+	b->yy_buffer_status = YY_BUFFER_NEW;
+
+	yy_switch_to_buffer( b );
+
+	return b;
+	}
+#endif
+
+
+#ifndef YY_NO_SCAN_STRING
+#ifdef YY_USE_PROTOS
+YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
+#else
+YY_BUFFER_STATE yy_scan_string( yy_str )
+yyconst char *yy_str;
+#endif
+	{
+	int len;
+	for ( len = 0; yy_str[len]; ++len )
+		;
+
+	return yy_scan_bytes( yy_str, len );
+	}
+#endif
+
+
+#ifndef YY_NO_SCAN_BYTES
+#ifdef YY_USE_PROTOS
+YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
+#else
+YY_BUFFER_STATE yy_scan_bytes( bytes, len )
+yyconst char *bytes;
+int len;
+#endif
+	{
+	YY_BUFFER_STATE b;
+	char *buf;
+	yy_size_t n;
+	int i;
+
+	/* Get memory for full buffer, including space for trailing EOB's. */
+	n = len + 2;
+	buf = (char *) yy_flex_alloc( n );
+	if ( ! buf )
+		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );
+
+	for ( i = 0; i < len; ++i )
+		buf[i] = bytes[i];
+
+	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;
+
+	b = yy_scan_buffer( buf, n );
+	if ( ! b )
+		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );
+
+	/* It's okay to grow etc. this buffer, and we should throw it
+	 * away when we're done.
+	 */
+	b->yy_is_our_buffer = 1;
+
+	return b;
+	}
+#endif
+
+
+#ifndef YY_NO_PUSH_STATE
+#ifdef YY_USE_PROTOS
+static void yy_push_state( int new_state )
+#else
+static void yy_push_state( new_state )
+int new_state;
+#endif
+	{
+	if ( yy_start_stack_ptr >= yy_start_stack_depth )
+		{
+		yy_size_t new_size;
+
+		yy_start_stack_depth += YY_START_STACK_INCR;
+		new_size = yy_start_stack_depth * sizeof( int );
+
+		if ( ! yy_start_stack )
+			yy_start_stack = (int *) yy_flex_alloc( new_size );
+
+		else
+			yy_start_stack = (int *) yy_flex_realloc(
+					(void *) yy_start_stack, new_size );
+
+		if ( ! yy_start_stack )
+			YY_FATAL_ERROR(
+			"out of memory expanding start-condition stack" );
+		}
+
+	yy_start_stack[yy_start_stack_ptr++] = YY_START;
+
+	BEGIN(new_state);
+	}
+#endif
+
+
+#ifndef YY_NO_POP_STATE
+static void yy_pop_state()
+	{
+	if ( --yy_start_stack_ptr < 0 )
+		YY_FATAL_ERROR( "start-condition stack underflow" );
+
+	BEGIN(yy_start_stack[yy_start_stack_ptr]);
+	}
+#endif
+
+
+#ifndef YY_NO_TOP_STATE
+static int yy_top_state()
+	{
+	return yy_start_stack[yy_start_stack_ptr - 1];
+	}
+#endif
+
+#ifndef YY_EXIT_FAILURE
+#define YY_EXIT_FAILURE 2
+#endif
+
+#ifdef YY_USE_PROTOS
+static void yy_fatal_error( yyconst char msg[] )
+#else
+static void yy_fatal_error( msg )
+char msg[];
+#endif
+	{
+	(void) fprintf( stderr, "%s\n", msg );
+	exit( YY_EXIT_FAILURE );
+	}
+
+
+
+/* Redefine yyless() so it works in section 3 code. */
+
+#undef yyless
+#define yyless(n) \
+	do \
+		{ \
+		/* Undo effects of setting up yytext. */ \
+		yytext[yyleng] = yy_hold_char; \
+		yy_c_buf_p = yytext + n; \
+		yy_hold_char = *yy_c_buf_p; \
+		*yy_c_buf_p = '\0'; \
+		yyleng = n; \
+		} \
+	while ( 0 )
+
+
+/* Internal utility routines. */
+
+#ifndef yytext_ptr
+#ifdef YY_USE_PROTOS
+static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
+#else
+static void yy_flex_strncpy( s1, s2, n )
+char *s1;
+yyconst char *s2;
+int n;
+#endif
+	{
+	register int i;
+	for ( i = 0; i < n; ++i )
+		s1[i] = s2[i];
+	}
+#endif
+
+#ifdef YY_NEED_STRLEN
+#ifdef YY_USE_PROTOS
+static int yy_flex_strlen( yyconst char *s )
+#else
+static int yy_flex_strlen( s )
+yyconst char *s;
+#endif
+	{
+	register int n;
+	for ( n = 0; s[n]; ++n )
+		;
+
+	return n;
+	}
+#endif
+
+
+#ifdef YY_USE_PROTOS
+static void *yy_flex_alloc( yy_size_t size )
+#else
+static void *yy_flex_alloc( size )
+yy_size_t size;
+#endif
+	{
+	return (void *) malloc( size );
+	}
+
+#ifdef YY_USE_PROTOS
+static void *yy_flex_realloc( void *ptr, yy_size_t size )
+#else
+static void *yy_flex_realloc( ptr, size )
+void *ptr;
+yy_size_t size;
+#endif
+	{
+	/* The cast to (char *) in the following accommodates both
+	 * implementations that use char* generic pointers, and those
+	 * that use void* generic pointers.  It works with the latter
+	 * because both ANSI C and C++ allow castless assignment from
+	 * any pointer type to void*, and deal with argument conversions
+	 * as though doing an assignment.
+	 */
+	return (void *) realloc( (char *) ptr, size );
+	}
+
+#ifdef YY_USE_PROTOS
+static void yy_flex_free( void *ptr )
+#else
+static void yy_flex_free( ptr )
+void *ptr;
+#endif
+	{
+	free( ptr );
+	}
+
+#if YY_MAIN
+int main()
+	{
+	yylex();
+	return 0;
+	}
+#endif
+#line 50 "quote_fmt_lex.l"
+
diff -urN quote_fmt_parse.c quote_fmt_parse.c
--- quote_fmt_parse.c	Thu Jan 01 01:00:00 1970
+++ quote_fmt_parse.c	Fri Apr 12 04:14:04 2002
@@ -0,0 +1,1806 @@
+/* A Bison parser, made from /src/sylpheed-claws/sylpheed-claws/src/quote_fmt_parse.y
+   by GNU bison 1.31.  */
+
+#define YYBISON 1  /* Identify Bison output.  */
+
+# define	SHOW_NEWSGROUPS	257
+# define	SHOW_DATE	258
+# define	SHOW_FROM	259
+# define	SHOW_FULLNAME	260
+# define	SHOW_FIRST_NAME	261
+# define	SHOW_LAST_NAME	262
+# define	SHOW_SENDER_INITIAL	263
+# define	SHOW_SUBJECT	264
+# define	SHOW_TO	265
+# define	SHOW_MESSAGEID	266
+# define	SHOW_PERCENT	267
+# define	SHOW_CC	268
+# define	SHOW_REFERENCES	269
+# define	SHOW_MESSAGE	270
+# define	SHOW_QUOTED_MESSAGE	271
+# define	SHOW_BACKSLASH	272
+# define	SHOW_TAB	273
+# define	SHOW_QUOTED_MESSAGE_NO_SIGNATURE	274
+# define	SHOW_MESSAGE_NO_SIGNATURE	275
+# define	SHOW_EOL	276
+# define	SHOW_QUESTION_MARK	277
+# define	SHOW_PIPE	278
+# define	SHOW_OPARENT	279
+# define	SHOW_CPARENT	280
+# define	QUERY_DATE	281
+# define	QUERY_FROM	282
+# define	QUERY_FULLNAME	283
+# define	QUERY_SUBJECT	284
+# define	QUERY_TO	285
+# define	QUERY_NEWSGROUPS	286
+# define	QUERY_MESSAGEID	287
+# define	QUERY_CC	288
+# define	QUERY_REFERENCES	289
+# define	INSERT_FILE	290
+# define	INSERT_PROGRAMOUTPUT	291
+# define	OPARENT	292
+# define	CPARENT	293
+# define	CHARACTER	294
+
+#line 1 "quote_fmt_parse.y"
+
+
+#include "defs.h"
+
+#include <glib.h>
+#include <ctype.h>
+
+#include "procmsg.h"
+#include "procmime.h"
+#include "utils.h"
+#include "intl.h"
+
+#include "quote_fmt.h"
+#include "quote_fmt_lex.h"
+
+/* decl */
+/*
+flex quote_fmt.l
+bison -p quote_fmt quote_fmt.y
+*/
+
+int yylex(void);
+
+static MsgInfo *msginfo = NULL;
+static gboolean *visible = NULL;
+static gint maxsize = 0;
+static gint stacksize = 0;
+
+static gchar *buffer = NULL;
+static gint bufmax = 0;
+static gint bufsize = 0;
+static const gchar *quote_str = NULL;
+static const gchar *body = NULL;
+static gint error = 0;
+
+static void add_visibility(gboolean val)
+{
+	stacksize++;
+	if (maxsize < stacksize) {
+		maxsize += 128;
+		visible = g_realloc(visible, maxsize * sizeof(gboolean));
+		if (visible == NULL)
+			maxsize = 0;
+	}
+
+	visible[stacksize - 1] = val;
+}
+
+static void remove_visibility(void)
+{
+	stacksize--;
+}
+
+static void add_buffer(const gchar *s)
+{
+	gint len;
+
+	len = strlen(s);
+	if (bufsize + len + 1 > bufmax) {
+		if (bufmax == 0)
+			bufmax = 128;
+		while (bufsize + len + 1 > bufmax)
+			bufmax *= 2;
+		buffer = g_realloc(buffer, bufmax);
+	}
+	strcpy(buffer + bufsize, s);
+	bufsize += len;
+}
+
+static void flush_buffer(void)
+{
+	if (buffer != NULL)
+		*buffer = '\0';
+	bufsize = 0;
+}
+
+gchar *quote_fmt_get_buffer(void)
+{
+	if (error != 0)
+		return NULL;
+	else
+		return buffer;
+}
+
+#define INSERT(buf) \
+	if (stacksize != 0 && visible[stacksize - 1]) \
+		add_buffer(buf)
+
+#define INSERT_CHARACTER(chr) \
+	if (stacksize != 0 && visible[stacksize - 1]) { \
+		gchar tmp[2]; \
+		tmp[0] = (chr); \
+		tmp[1] = '\0'; \
+		add_buffer(tmp); \
+	}
+
+void quote_fmt_init(MsgInfo *info, const gchar *my_quote_str,
+		    const gchar *my_body)
+{
+	quote_str = my_quote_str;
+	body = my_body;
+	msginfo = info;
+	stacksize = 0;
+	add_visibility(TRUE);
+	if (buffer != NULL)
+		*buffer = 0;
+	bufsize = 0;
+	error = 0;
+}
+
+void quote_fmterror(char *str)
+{
+	g_warning(_("Error: %s\n"), str);
+	error = 1;
+}
+
+int quote_fmtwrap(void)
+{
+	return 1;
+}
+
+static int isseparator(char ch)
+{
+	return isspace(ch) || ch == '.' || ch == '-';
+}
+
+#line 128 "quote_fmt_parse.y"
+#ifndef YYSTYPE
+typedef union {
+	char chr;
+	char str[256];
+} yystype;
+# define YYSTYPE yystype
+#endif
+#ifndef YYDEBUG
+# define YYDEBUG 0
+#endif
+
+
+
+#define	YYFINAL		90
+#define	YYFLAG		-32768
+#define	YYNTBASE	41
+
+/* YYTRANSLATE(YYLEX) -- Bison token number corresponding to YYLEX. */
+#define YYTRANSLATE(x) ((unsigned)(x) <= 294 ? yytranslate[x] : 58)
+
+/* YYTRANSLATE[YYLEX] -- Bison token number corresponding to YYLEX. */
+static const char yytranslate[] =
+{
+       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
+       2,     2,     2,     2,     2,     2,     1,     3,     4,     5,
+       6,     7,     8,     9,    10,    11,    12,    13,    14,    15,
+      16,    17,    18,    19,    20,    21,    22,    23,    24,    25,
+      26,    27,    28,    29,    30,    31,    32,    33,    34,    35,
+      36,    37,    38,    39,    40
+};
+
+#if YYDEBUG
+static const short yyprhs[] =
+{
+       0,     0,     2,     5,     7,     9,    11,    13,    15,    17,
+      19,    22,    24,    26,    28,    30,    32,    34,    36,    38,
+      40,    42,    44,    46,    48,    50,    52,    54,    56,    58,
+      60,    62,    64,    66,    68,    70,    71,    77,    78,    84,
+      85,    91,    92,    98,    99,   105,   106,   112,   113,   119,
+     120,   126,   127,   133,   138
+};
+static const short yyrhs[] =
+{
+      42,     0,    43,    42,     0,    43,     0,    46,     0,    44,
+       0,    47,     0,    57,     0,    40,     0,    40,     0,    45,
+      40,     0,     3,     0,     4,     0,     5,     0,     6,     0,
+       7,     0,     8,     0,     9,     0,    10,     0,    11,     0,
+      12,     0,    13,     0,    14,     0,    15,     0,    16,     0,
+      17,     0,    21,     0,    20,     0,    18,     0,    19,     0,
+      22,     0,    23,     0,    24,     0,    25,     0,    26,     0,
+       0,    27,    48,    38,    41,    39,     0,     0,    28,    49,
+      38,    41,    39,     0,     0,    29,    50,    38,    41,    39,
+       0,     0,    30,    51,    38,    41,    39,     0,     0,    31,
+      52,    38,    41,    39,     0,     0,    32,    53,    38,    41,
+      39,     0,     0,    33,    54,    38,    41,    39,     0,     0,
+      34,    55,    38,    41,    39,     0,     0,    35,    56,    38,
+      41,    39,     0,    36,    38,    45,    39,     0,    37,    38,
+      45,    39,     0
+};
+
+#endif
+
+#if YYDEBUG
+/* YYRLINE[YYN] -- source line where rule number YYN was defined. */
+static const short yyrline[] =
+{
+       0,   155,   158,   160,   162,   164,   168,   169,   171,   175,
+     181,   188,   194,   199,   204,   209,   225,   256,   283,   288,
+     293,   298,   302,   307,   312,   334,   358,   382,   408,   412,
+     416,   420,   424,   428,   432,   437,   437,   446,   446,   454,
+     454,   462,   462,   470,   470,   478,   478,   486,   486,   494,
+     494,   502,   502,   511,   526
+};
+#endif
+
+
+#if (YYDEBUG) || defined YYERROR_VERBOSE
+
+/* YYTNAME[TOKEN_NUM] -- String name of the token TOKEN_NUM. */
+static const char *const yytname[] =
+{
+  "$", "error", "$undefined.", "SHOW_NEWSGROUPS", "SHOW_DATE", "SHOW_FROM", 
+  "SHOW_FULLNAME", "SHOW_FIRST_NAME", "SHOW_LAST_NAME", 
+  "SHOW_SENDER_INITIAL", "SHOW_SUBJECT", "SHOW_TO", "SHOW_MESSAGEID", 
+  "SHOW_PERCENT", "SHOW_CC", "SHOW_REFERENCES", "SHOW_MESSAGE", 
+  "SHOW_QUOTED_MESSAGE", "SHOW_BACKSLASH", "SHOW_TAB", 
+  "SHOW_QUOTED_MESSAGE_NO_SIGNATURE", "SHOW_MESSAGE_NO_SIGNATURE", 
+  "SHOW_EOL", "SHOW_QUESTION_MARK", "SHOW_PIPE", "SHOW_OPARENT", 
+  "SHOW_CPARENT", "QUERY_DATE", "QUERY_FROM", "QUERY_FULLNAME", 
+  "QUERY_SUBJECT", "QUERY_TO", "QUERY_NEWSGROUPS", "QUERY_MESSAGEID", 
+  "QUERY_CC", "QUERY_REFERENCES", "INSERT_FILE", "INSERT_PROGRAMOUTPUT", 
+  "OPARENT", "CPARENT", "CHARACTER", "quote_fmt", 
+  "character_or_special_or_insert_or_query_list", 
+  "character_or_special_or_insert_or_query", "character", "string", 
+  "special", "query", "@1", "@2", "@3", "@4", "@5", "@6", "@7", "@8", 
+  "@9", "insert", NULL
+};
+#endif
+
+/* YYR1[YYN] -- Symbol number of symbol that rule YYN derives. */
+static const short yyr1[] =
+{
+       0,    41,    42,    42,    43,    43,    43,    43,    44,    45,
+      45,    46,    46,    46,    46,    46,    46,    46,    46,    46,
+      46,    46,    46,    46,    46,    46,    46,    46,    46,    46,
+      46,    46,    46,    46,    46,    48,    47,    49,    47,    50,
+      47,    51,    47,    52,    47,    53,    47,    54,    47,    55,
+      47,    56,    47,    57,    57
+};
+
+/* YYR2[YYN] -- Number of symbols composing right hand side of rule YYN. */
+static const short yyr2[] =
+{
+       0,     1,     2,     1,     1,     1,     1,     1,     1,     1,
+       2,     1,     1,     1,     1,     1,     1,     1,     1,     1,
+       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
+       1,     1,     1,     1,     1,     0,     5,     0,     5,     0,
+       5,     0,     5,     0,     5,     0,     5,     0,     5,     0,
+       5,     0,     5,     4,     4
+};
+
+/* YYDEFACT[S] -- default rule to reduce with in state S when YYTABLE
+   doesn't specify something else to do.  Zero means the default is an
+   error. */
+static const short yydefact[] =
+{
+       0,    11,    12,    13,    14,    15,    16,    17,    18,    19,
+      20,    21,    22,    23,    24,    25,    28,    29,    27,    26,
+      30,    31,    32,    33,    34,    35,    37,    39,    41,    43,
+      45,    47,    49,    51,     0,     0,     8,     1,     3,     5,
+       4,     6,     7,     0,     0,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     2,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     9,     0,     0,     0,     0,     0,
+       0,     0,     0,     0,     0,     0,    53,    10,    54,    36,
+      38,    40,    42,    44,    46,    48,    50,    52,     0,     0,
+       0
+};
+
+static const short yydefgoto[] =
+{
+      67,    37,    38,    39,    65,    40,    41,    43,    44,    45,
+      46,    47,    48,    49,    50,    51,    42
+};
+
+static const short yypact[] =
+{
+      -2,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,     4,     5,-32768,-32768,    -2,-32768,
+  -32768,-32768,-32768,     6,     7,     8,     9,    10,    11,    12,
+      13,    14,    -1,    -1,-32768,    -2,    -2,    -2,    -2,    -2,
+      -2,    -2,    -2,    -2,-32768,    -3,     1,    15,    16,    25,
+      26,    27,    28,    29,    30,    31,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768,-32768,    53,    71,
+  -32768
+};
+
+static const short yypgoto[] =
+{
+       0,    34,-32768,-32768,    20,-32768,-32768,-32768,-32768,-32768,
+  -32768,-32768,-32768,-32768,-32768,-32768,-32768
+};
+
+
+#define	YYLAST		73
+
+
+static const short yytable[] =
+{
+      88,     1,     2,     3,     4,     5,     6,     7,     8,     9,
+      10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
+      20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
+      30,    31,    32,    33,    34,    35,    76,    77,    36,    64,
+      78,    77,    52,    53,    55,    56,    57,    58,    59,    60,
+      61,    62,    63,    89,    79,    80,    68,    69,    70,    71,
+      72,    73,    74,    75,    81,    82,    83,    84,    85,    86,
+      87,    90,    54,    66
+};
+
+static const short yycheck[] =
+{
+       0,     3,     4,     5,     6,     7,     8,     9,    10,    11,
+      12,    13,    14,    15,    16,    17,    18,    19,    20,    21,
+      22,    23,    24,    25,    26,    27,    28,    29,    30,    31,
+      32,    33,    34,    35,    36,    37,    39,    40,    40,    40,
+      39,    40,    38,    38,    38,    38,    38,    38,    38,    38,
+      38,    38,    38,     0,    39,    39,    56,    57,    58,    59,
+      60,    61,    62,    63,    39,    39,    39,    39,    39,    39,
+      39,     0,    38,    53
+};
+/* -*-C-*-  Note some compilers choke on comments on `#line' lines.  */
+#line 3 "/usr/share/bison/bison.simple"
+
+/* Skeleton output parser for bison,
+   Copyright (C) 1984, 1989, 1990, 2000, 2001 Free Software Foundation, Inc.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 2, or (at your option)
+   any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program; if not, write to the Free Software
+   Foundation, Inc., 59 Temple Place - Suite 330,
+   Boston, MA 02111-1307, USA.  */
+
+/* As a special exception, when this file is copied by Bison into a
+   Bison output file, you may use that output file without restriction.
+   This special exception was added by the Free Software Foundation
+   in version 1.24 of Bison.  */
+
+/* This is the parser code that is written into each bison parser when
+   the %semantic_parser declaration is not specified in the grammar.
+   It was written by Richard Stallman by simplifying the hairy parser
+   used when %semantic_parser is specified.  */
+
+/* All symbols defined below should begin with yy or YY, to avoid
+   infringing on user name space.  This should be done even for local
+   variables, as they might otherwise be expanded by user macros.
+   There are some unavoidable exceptions within include files to
+   define necessary library symbols; they are noted "INFRINGES ON
+   USER NAME SPACE" below.  */
+
+#ifdef __cplusplus
+# define YYSTD(x) std::x
+#else
+# define YYSTD(x) x
+#endif
+
+#if ! defined (yyoverflow) || defined (YYERROR_VERBOSE)
+
+/* The parser invokes alloca or malloc; define the necessary symbols.  */
+
+# if YYSTACK_USE_ALLOCA
+#  define YYSTACK_ALLOC alloca
+#  define YYSIZE_T YYSTD (size_t)
+# else
+#  ifndef YYSTACK_USE_ALLOCA
+#   if defined (alloca) || defined (_ALLOCA_H)
+#    define YYSTACK_ALLOC alloca
+#    define YYSIZE_T YYSTD (size_t)
+#   else
+#    ifdef __GNUC__
+#     define YYSTACK_ALLOC __builtin_alloca
+#    endif
+#   endif
+#  endif
+# endif
+
+# ifdef YYSTACK_ALLOC
+   /* Pacify GCC's `empty if-body' warning. */
+#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
+# else
+#  ifdef __cplusplus
+#   include <cstdlib> /* INFRINGES ON USER NAME SPACE */
+#   define YYSIZE_T std::size_t
+#  else
+#   ifdef __STDC__
+#    include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
+#    define YYSIZE_T size_t
+#   endif
+#  endif
+#  define YYSTACK_ALLOC YYSTD (malloc)
+#  define YYSTACK_FREE YYSTD (free)
+# endif
+
+/* A type that is properly aligned for any stack member.  */
+union yyalloc
+{
+  short yyss;
+  YYSTYPE yyvs;
+# if YYLSP_NEEDED
+  YYLTYPE yyls;
+# endif
+};
+
+/* The size of the maximum gap between one aligned stack and the next.  */
+# define YYSTACK_GAP_MAX (sizeof (union yyalloc) - 1)
+
+/* The size of an array large to enough to hold all stacks, each with
+   N elements.  */
+# if YYLSP_NEEDED
+#  define YYSTACK_BYTES(N) \
+     ((N) * (sizeof (short) + sizeof (YYSTYPE) + sizeof (YYLTYPE))	\
+      + 2 * YYSTACK_GAP_MAX)
+# else
+#  define YYSTACK_BYTES(N) \
+     ((N) * (sizeof (short) + sizeof (YYSTYPE))				\
+      + YYSTACK_GAP_MAX)
+# endif
+
+/* Relocate the TYPE STACK from its old location to the new one.  The
+   local variables YYSIZE and YYSTACKSIZE give the old and new number of
+   elements in the stack, and YYPTR gives the new location of the
+   stack.  Advance YYPTR to a properly aligned location for the next
+   stack.  */
+# define YYSTACK_RELOCATE(Type, Stack)					\
+    do									\
+      {									\
+	YYSIZE_T yynewbytes;						\
+	yymemcpy ((char *) yyptr, (char *) (Stack),			\
+		  yysize * (YYSIZE_T) sizeof (Type));			\
+	Stack = &yyptr->Stack;						\
+	yynewbytes = yystacksize * sizeof (Type) + YYSTACK_GAP_MAX;	\
+	yyptr += yynewbytes / sizeof (*yyptr);				\
+      }									\
+    while (0)
+
+#endif /* ! defined (yyoverflow) || defined (YYERROR_VERBOSE) */
+
+
+#if ! defined (YYSIZE_T) && defined (__SIZE_TYPE__)
+# define YYSIZE_T __SIZE_TYPE__
+#endif
+#if ! defined (YYSIZE_T) && defined (size_t)
+# define YYSIZE_T size_t
+#endif
+#if ! defined (YYSIZE_T)
+# ifdef __cplusplus
+#  include <cstddef> /* INFRINGES ON USER NAME SPACE */
+#  define YYSIZE_T std::size_t
+# else
+#  ifdef __STDC__
+#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
+#   define YYSIZE_T size_t
+#  endif
+# endif
+#endif
+#if ! defined (YYSIZE_T)
+# define YYSIZE_T unsigned int
+#endif
+
+#define yyerrok		(yyerrstatus = 0)
+#define yyclearin	(yychar = YYEMPTY)
+#define YYEMPTY		-2
+#define YYEOF		0
+#define YYACCEPT	goto yyacceptlab
+#define YYABORT 	goto yyabortlab
+#define YYERROR		goto yyerrlab1
+/* Like YYERROR except do call yyerror.  This remains here temporarily
+   to ease the transition to the new meaning of YYERROR, for GCC.
+   Once GCC version 2 has supplanted version 1, this can go.  */
+#define YYFAIL		goto yyerrlab
+#define YYRECOVERING()  (!!yyerrstatus)
+#define YYBACKUP(Token, Value)					\
+do								\
+  if (yychar == YYEMPTY && yylen == 1)				\
+    {								\
+      yychar = (Token);						\
+      yylval = (Value);						\
+      yychar1 = YYTRANSLATE (yychar);				\
+      YYPOPSTACK;						\
+      goto yybackup;						\
+    }								\
+  else								\
+    { 								\
+      yyerror ("syntax error: cannot back up");			\
+      YYERROR;							\
+    }								\
+while (0)
+
+#define YYTERROR	1
+#define YYERRCODE	256
+
+
+/* YYLLOC_DEFAULT -- Compute the default location (before the actions
+   are run).
+
+   When YYLLOC_DEFAULT is run, CURRENT is set the location of the
+   first token.  By default, to implement support for ranges, extend
+   its range to the last symbol.  */
+
+#ifndef YYLLOC_DEFAULT
+# define YYLLOC_DEFAULT(Current, Rhs, N)       	\
+   Current.last_line   = Rhs[N].last_line;	\
+   Current.last_column = Rhs[N].last_column;
+#endif
+
+
+/* YYLEX -- calling `yylex' with the right arguments.  */
+
+#if YYPURE
+# if YYLSP_NEEDED
+#  ifdef YYLEX_PARAM
+#   define YYLEX		yylex (&yylval, &yylloc, YYLEX_PARAM)
+#  else
+#   define YYLEX		yylex (&yylval, &yylloc)
+#  endif
+# else /* !YYLSP_NEEDED */
+#  ifdef YYLEX_PARAM
+#   define YYLEX		yylex (&yylval, YYLEX_PARAM)
+#  else
+#   define YYLEX		yylex (&yylval)
+#  endif
+# endif /* !YYLSP_NEEDED */
+#else /* !YYPURE */
+# define YYLEX			yylex ()
+#endif /* !YYPURE */
+
+
+/* Enable debugging if requested.  */
+#if YYDEBUG
+
+# ifndef YYFPRINTF
+#  ifdef __cplusplus
+#   include <cstdio>  /* INFRINGES ON USER NAME SPACE */
+#  else
+#   include <stdio.h> /* INFRINGES ON USER NAME SPACE */
+#  endif
+#  define YYFPRINTF YYSTD (fprintf)
+# endif
+
+# define YYDPRINTF(Args)			\
+do {						\
+  if (yydebug)					\
+    YYFPRINTF Args;				\
+} while (0)
+/* Nonzero means print parse trace. [The following comment makes no
+   sense to me.  Could someone clarify it?  --akim] Since this is
+   uninitialized, it does not stop multiple parsers from coexisting.
+   */
+int yydebug;
+#else /* !YYDEBUG */
+# define YYDPRINTF(Args)
+#endif /* !YYDEBUG */
+
+/* YYINITDEPTH -- initial size of the parser's stacks.  */
+#ifndef	YYINITDEPTH
+# define YYINITDEPTH 200
+#endif
+
+/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
+   if the built-in stack extension method is used).
+
+   Do not make this value too large; the results are undefined if
+   SIZE_MAX < YYSTACK_BYTES (YYMAXDEPTH)
+   evaluated with infinite-precision integer arithmetic.  */
+
+#if YYMAXDEPTH == 0
+# undef YYMAXDEPTH
+#endif
+
+#ifndef YYMAXDEPTH
+# define YYMAXDEPTH 10000
+#endif
+
+#if ! defined (yyoverflow) && ! defined (yymemcpy)
+# if __GNUC__ > 1		/* GNU C and GNU C++ define this.  */
+#  define yymemcpy __builtin_memcpy
+# else				/* not GNU C or C++ */
+
+/* This is the most reliable way to avoid incompatibilities
+   in available built-in functions on various systems.  */
+static void
+#  if defined (__STDC__) || defined (__cplusplus)
+yymemcpy (char *yyto, const char *yyfrom, YYSIZE_T yycount)
+#  else
+yymemcpy (yyto, yyfrom, yycount)
+     char *yyto;
+     const char *yyfrom;
+     YYSIZE_T yycount;
+#  endif
+{
+  register const char *yyf = yyfrom;
+  register char *yyt = yyto;
+  register YYSIZE_T yyi = yycount;
+
+  while (yyi-- != 0)
+    *yyt++ = *yyf++;
+}
+# endif
+#endif
+
+#ifdef YYERROR_VERBOSE
+
+# ifndef yystrlen
+#  if defined (__GLIBC__) && defined (_STRING_H)
+#   define yystrlen strlen
+#  else
+/* Return the length of YYSTR.  */
+static YYSIZE_T
+#   if defined (__STDC__) || defined (__cplusplus)
+yystrlen (const char *yystr)
+#   else
+yystrlen (yystr)
+     const char *yystr;
+#   endif
+{
+  register const char *yys = yystr;
+
+  while (*yys++ != '\0')
+    continue;
+
+  return yys - yystr - 1;
+}
+#  endif
+# endif
+
+# ifndef yystpcpy
+#  if defined (__GLIBC__) && defined (_STRING_H) && defined (_GNU_SOURCE)
+#   define yystpcpy stpcpy
+#  else
+/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
+   YYDEST.  */
+static char *
+#   if defined (__STDC__) || defined (__cplusplus)
+yystpcpy (char *yydest, const char *yysrc)
+#   else
+yystpcpy (yydest, yysrc)
+     char *yydest;
+     const char *yysrc;
+#   endif
+{
+  register char *yyd = yydest;
+  register const char *yys = yysrc;
+
+  while ((*yyd++ = *yys++) != '\0')
+    continue;
+
+  return yyd - 1;
+}
+#  endif
+# endif
+#endif
+
+#line 341 "/usr/share/bison/bison.simple"
+
+
+/* The user can define YYPARSE_PARAM as the name of an argument to be passed
+   into yyparse.  The argument should have type void *.
+   It should actually point to an object.
+   Grammar actions can access the variable by casting it
+   to the proper pointer type.  */
+
+#ifdef YYPARSE_PARAM
+# ifdef __cplusplus
+#  define YYPARSE_PARAM_ARG void *YYPARSE_PARAM
+#  define YYPARSE_PARAM_DECL
+# else /* !__cplusplus */
+#  define YYPARSE_PARAM_ARG YYPARSE_PARAM
+#  define YYPARSE_PARAM_DECL void *YYPARSE_PARAM;
+# endif /* !__cplusplus */
+#else /* !YYPARSE_PARAM */
+# define YYPARSE_PARAM_ARG
+# define YYPARSE_PARAM_DECL
+#endif /* !YYPARSE_PARAM */
+
+/* Prevent warning if -Wstrict-prototypes.  */
+#ifdef __GNUC__
+# ifdef YYPARSE_PARAM
+int yyparse (void *);
+# else
+int yyparse (void);
+# endif
+#endif
+
+/* YY_DECL_VARIABLES -- depending whether we use a pure parser,
+   variables are global, or local to YYPARSE.  */
+
+#define YY_DECL_NON_LSP_VARIABLES			\
+/* The lookahead symbol.  */				\
+int yychar;						\
+							\
+/* The semantic value of the lookahead symbol. */	\
+YYSTYPE yylval;						\
+							\
+/* Number of parse errors so far.  */			\
+int yynerrs;
+
+#if YYLSP_NEEDED
+# define YY_DECL_VARIABLES			\
+YY_DECL_NON_LSP_VARIABLES			\
+						\
+/* Location data for the lookahead symbol.  */	\
+YYLTYPE yylloc;
+#else
+# define YY_DECL_VARIABLES			\
+YY_DECL_NON_LSP_VARIABLES
+#endif
+
+
+/* If nonreentrant, generate the variables here. */
+
+#if !YYPURE
+YY_DECL_VARIABLES
+#endif  /* !YYPURE */
+
+int
+yyparse (YYPARSE_PARAM_ARG)
+     YYPARSE_PARAM_DECL
+{
+  /* If reentrant, generate the variables here. */
+#if YYPURE
+  YY_DECL_VARIABLES
+#endif  /* !YYPURE */
+
+  register int yystate;
+  register int yyn;
+  int yyresult;
+  /* Number of tokens to shift before error messages enabled.  */
+  int yyerrstatus;
+  /* Lookahead token as an internal (translated) token number.  */
+  int yychar1 = 0;
+
+  /* Three stacks and their tools:
+     `yyss': related to states,
+     `yyvs': related to semantic values,
+     `yyls': related to locations.
+
+     Refer to the stacks thru separate pointers, to allow yyoverflow
+     to reallocate them elsewhere.  */
+
+  /* The state stack. */
+  short	yyssa[YYINITDEPTH];
+  short *yyss = yyssa;
+  register short *yyssp;
+
+  /* The semantic value stack.  */
+  YYSTYPE yyvsa[YYINITDEPTH];
+  YYSTYPE *yyvs = yyvsa;
+  register YYSTYPE *yyvsp;
+
+#if YYLSP_NEEDED
+  /* The location stack.  */
+  YYLTYPE yylsa[YYINITDEPTH];
+  YYLTYPE *yyls = yylsa;
+  YYLTYPE *yylsp;
+#endif
+
+#if YYLSP_NEEDED
+# define YYPOPSTACK   (yyvsp--, yyssp--, yylsp--)
+#else
+# define YYPOPSTACK   (yyvsp--, yyssp--)
+#endif
+
+  YYSIZE_T yystacksize = YYINITDEPTH;
+
+
+  /* The variables used to return semantic value and location from the
+     action routines.  */
+  YYSTYPE yyval;
+#if YYLSP_NEEDED
+  YYLTYPE yyloc;
+#endif
+
+  /* When reducing, the number of symbols on the RHS of the reduced
+     rule. */
+  int yylen;
+
+  YYDPRINTF ((stderr, "Starting parse\n"));
+
+  yystate = 0;
+  yyerrstatus = 0;
+  yynerrs = 0;
+  yychar = YYEMPTY;		/* Cause a token to be read.  */
+
+  /* Initialize stack pointers.
+     Waste one element of value and location stack
+     so that they stay on the same level as the state stack.
+     The wasted elements are never initialized.  */
+
+  yyssp = yyss;
+  yyvsp = yyvs;
+#if YYLSP_NEEDED
+  yylsp = yyls;
+#endif
+  goto yysetstate;
+
+/*------------------------------------------------------------.
+| yynewstate -- Push a new state, which is found in yystate.  |
+`------------------------------------------------------------*/
+ yynewstate:
+  /* In all cases, when you get here, the value and location stacks
+     have just been pushed. so pushing a state here evens the stacks.
+     */
+  yyssp++;
+
+ yysetstate:
+  *yyssp = yystate;
+
+  if (yyssp >= yyss + yystacksize - 1)
+    {
+      /* Get the current used size of the three stacks, in elements.  */
+      YYSIZE_T yysize = yyssp - yyss + 1;
+
+#ifdef yyoverflow
+      {
+	/* Give user a chance to reallocate the stack. Use copies of
+	   these so that the &'s don't force the real ones into
+	   memory.  */
+	YYSTYPE *yyvs1 = yyvs;
+	short *yyss1 = yyss;
+
+	/* Each stack pointer address is followed by the size of the
+	   data in use in that stack, in bytes.  */
+# if YYLSP_NEEDED
+	YYLTYPE *yyls1 = yyls;
+	/* This used to be a conditional around just the two extra args,
+	   but that might be undefined if yyoverflow is a macro.  */
+	yyoverflow ("parser stack overflow",
+		    &yyss1, yysize * sizeof (*yyssp),
+		    &yyvs1, yysize * sizeof (*yyvsp),
+		    &yyls1, yysize * sizeof (*yylsp),
+		    &yystacksize);
+	yyls = yyls1;
+# else
+	yyoverflow ("parser stack overflow",
+		    &yyss1, yysize * sizeof (*yyssp),
+		    &yyvs1, yysize * sizeof (*yyvsp),
+		    &yystacksize);
+# endif
+	yyss = yyss1;
+	yyvs = yyvs1;
+      }
+#else /* no yyoverflow */
+      /* Extend the stack our own way.  */
+      if (yystacksize >= YYMAXDEPTH)
+	goto yyoverflowlab;
+      yystacksize *= 2;
+      if (yystacksize > YYMAXDEPTH)
+	yystacksize = YYMAXDEPTH;
+
+      {
+	short *yyss1 = yyss;
+	union yyalloc *yyptr =
+	  (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
+	if (! yyptr)
+	  goto yyoverflowlab;
+	YYSTACK_RELOCATE (short, yyss);
+	YYSTACK_RELOCATE (YYSTYPE, yyvs);
+# if YYLSP_NEEDED
+	YYSTACK_RELOCATE (YYLTYPE, yyls);
+# endif
+# undef YYSTACK_RELOCATE
+	if (yyss1 != yyssa)
+	  YYSTACK_FREE (yyss1);
+      }
+#endif /* no yyoverflow */
+
+      yyssp = yyss + yysize - 1;
+      yyvsp = yyvs + yysize - 1;
+#if YYLSP_NEEDED
+      yylsp = yyls + yysize - 1;
+#endif
+
+      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
+		  (unsigned long int) yystacksize));
+
+      if (yyssp >= yyss + yystacksize - 1)
+	YYABORT;
+    }
+
+  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
+
+  goto yybackup;
+
+
+/*-----------.
+| yybackup.  |
+`-----------*/
+yybackup:
+
+/* Do appropriate processing given the current state.  */
+/* Read a lookahead token if we need one and don't already have one.  */
+/* yyresume: */
+
+  /* First try to decide what to do without reference to lookahead token.  */
+
+  yyn = yypact[yystate];
+  if (yyn == YYFLAG)
+    goto yydefault;
+
+  /* Not known => get a lookahead token if don't already have one.  */
+
+  /* yychar is either YYEMPTY or YYEOF
+     or a valid token in external form.  */
+
+  if (yychar == YYEMPTY)
+    {
+      YYDPRINTF ((stderr, "Reading a token: "));
+      yychar = YYLEX;
+    }
+
+  /* Convert token to internal form (in yychar1) for indexing tables with */
+
+  if (yychar <= 0)		/* This means end of input. */
+    {
+      yychar1 = 0;
+      yychar = YYEOF;		/* Don't call YYLEX any more */
+
+      YYDPRINTF ((stderr, "Now at end of input.\n"));
+    }
+  else
+    {
+      yychar1 = YYTRANSLATE (yychar);
+
+#if YYDEBUG
+     /* We have to keep this `#if YYDEBUG', since we use variables
+	which are defined only if `YYDEBUG' is set.  */
+      if (yydebug)
+	{
+	  YYFPRINTF (stderr, "Next token is %d (%s",
+		     yychar, yytname[yychar1]);
+	  /* Give the individual parser a way to print the precise
+	     meaning of a token, for further debugging info.  */
+# ifdef YYPRINT
+	  YYPRINT (stderr, yychar, yylval);
+# endif
+	  YYFPRINTF (stderr, ")\n");
+	}
+#endif
+    }
+
+  yyn += yychar1;
+  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != yychar1)
+    goto yydefault;
+
+  yyn = yytable[yyn];
+
+  /* yyn is what to do for this token type in this state.
+     Negative => reduce, -yyn is rule number.
+     Positive => shift, yyn is new state.
+       New state is final state => don't bother to shift,
+       just return success.
+     0, or most negative number => error.  */
+
+  if (yyn < 0)
+    {
+      if (yyn == YYFLAG)
+	goto yyerrlab;
+      yyn = -yyn;
+      goto yyreduce;
+    }
+  else if (yyn == 0)
+    goto yyerrlab;
+
+  if (yyn == YYFINAL)
+    YYACCEPT;
+
+  /* Shift the lookahead token.  */
+  YYDPRINTF ((stderr, "Shifting token %d (%s), ",
+	      yychar, yytname[yychar1]));
+
+  /* Discard the token being shifted unless it is eof.  */
+  if (yychar != YYEOF)
+    yychar = YYEMPTY;
+
+  *++yyvsp = yylval;
+#if YYLSP_NEEDED
+  *++yylsp = yylloc;
+#endif
+
+  /* Count tokens shifted since error; after three, turn off error
+     status.  */
+  if (yyerrstatus)
+    yyerrstatus--;
+
+  yystate = yyn;
+  goto yynewstate;
+
+
+/*-----------------------------------------------------------.
+| yydefault -- do the default action for the current state.  |
+`-----------------------------------------------------------*/
+yydefault:
+  yyn = yydefact[yystate];
+  if (yyn == 0)
+    goto yyerrlab;
+  goto yyreduce;
+
+
+/*-----------------------------.
+| yyreduce -- Do a reduction.  |
+`-----------------------------*/
+yyreduce:
+  /* yyn is the number of a rule to reduce with.  */
+  yylen = yyr2[yyn];
+
+  /* If YYLEN is nonzero, implement the default value of the action:
+     `$$ = $1'.
+
+     Otherwise, the following line sets YYVAL to the semantic value of
+     the lookahead token.  This behavior is undocumented and Bison
+     users should not rely upon it.  Assigning to YYVAL
+     unconditionally makes the parser a bit smaller, and it avoids a
+     GCC warning that YYVAL may be used uninitialized.  */
+  yyval = yyvsp[1-yylen];
+
+#if YYLSP_NEEDED
+  /* Similarly for the default location.  Let the user run additional
+     commands if for instance locations are ranges.  */
+  yyloc = yylsp[1-yylen];
+  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
+#endif
+
+#if YYDEBUG
+  /* We have to keep this `#if YYDEBUG', since we use variables which
+     are defined only if `YYDEBUG' is set.  */
+  if (yydebug)
+    {
+      int yyi;
+
+      YYFPRINTF (stderr, "Reducing via rule %d (line %d), ",
+		 yyn, yyrline[yyn]);
+
+      /* Print the symbols being reduced, and their result.  */
+      for (yyi = yyprhs[yyn]; yyrhs[yyi] > 0; yyi++)
+	YYFPRINTF (stderr, "%s ", yytname[yyrhs[yyi]]);
+      YYFPRINTF (stderr, " -> %s\n", yytname[yyr1[yyn]]);
+    }
+#endif
+
+  switch (yyn) {
+
+case 5:
+#line 165 "quote_fmt_parse.y"
+{
+		INSERT_CHARACTER(yyvsp[0].chr);
+	}
+    break;
+case 9:
+#line 177 "quote_fmt_parse.y"
+{
+		yyval.str[0] = yyvsp[0].chr;
+		yyval.str[1] = '\0';
+	}
+    break;
+case 10:
+#line 182 "quote_fmt_parse.y"
+{
+		strcpy(yyval.str, yyvsp[-1].str);
+		yyval.str[strlen(yyval.str) + 1] = '\0';
+		yyval.str[strlen(yyval.str)] = yyvsp[0].chr;
+	}
+    break;
+case 11:
+#line 190 "quote_fmt_parse.y"
+{
+		if (msginfo->newsgroups)
+			INSERT(msginfo->newsgroups);
+	}
+    break;
+case 12:
+#line 195 "quote_fmt_parse.y"
+{
+		if (msginfo->date)
+			INSERT(msginfo->date);
+	}
+    break;
+case 13:
+#line 200 "quote_fmt_parse.y"
+{
+		if (msginfo->from)
+			INSERT(msginfo->from);
+	}
+    break;
+case 14:
+#line 205 "quote_fmt_parse.y"
+{
+		if (msginfo->fromname)
+			INSERT(msginfo->fromname);
+	}
+    break;
+case 15:
+#line 210 "quote_fmt_parse.y"
+{
+		if (msginfo->fromname) {
+			gchar *p;
+			gchar *str;
+
+			str = alloca(strlen(msginfo->fromname) + 1);
+			if (str != NULL) {
+				strcpy(str, msginfo->fromname);
+				p = str;
+				while (*p && !isspace(*p)) p++;
+				*p = '\0';
+				INSERT(str);
+			}
+		}
+	}
+    break;
+case 16:
+#line 226 "quote_fmt_parse.y"
+{
+                /* This probably won't work together very well with Middle
+                 names and the like - thth */
+		if (msginfo->fromname) {
+			gchar *p;
+			gchar *str;
+
+			str = alloca(strlen(msginfo->fromname) + 1);
+			if (str != NULL) {
+				strcpy(str, msginfo->fromname);
+                                p = str;
+                                while (*p && !isspace(*p)) p++;
+                                if (*p) {
+				    /* We found a space. Get first none-space char and
+				     insert rest of string from there. */
+				    while (*p && isspace(*p)) p++;
+                                    if (*p) {
+	                    		INSERT(p);
+				    } else {
+    					/* If there is no none-space char, just insert
+					 whole fromname. */
+					INSERT(str);
+				    }
+				} else {
+				    /* If there is no space, just insert whole fromname. */
+				    INSERT(str);
+				}
+			}
+		}
+	}
+    break;
+case 17:
+#line 257 "quote_fmt_parse.y"
+{
+#define MAX_SENDER_INITIAL 20
+		if (msginfo->fromname) {
+			gchar tmp[MAX_SENDER_INITIAL];
+			gchar *p;
+			gchar *cur;
+			gint len = 0;
+
+			p = msginfo->fromname;
+			cur = tmp;
+			while (*p) {
+				if (*p && isalnum(*p)) {
+					*cur = toupper(*p);
+						cur++;
+					len++;
+					if (len >= MAX_SENDER_INITIAL - 1)
+						break;
+				} else
+					break;
+				while (*p && !isseparator(*p)) p++;
+				while (*p && isseparator(*p)) p++;
+			}
+			*cur = '\0';
+			INSERT(tmp);
+		}
+	}
+    break;
+case 18:
+#line 284 "quote_fmt_parse.y"
+{
+		if (msginfo->subject)
+			INSERT(msginfo->subject);
+	}
+    break;
+case 19:
+#line 289 "quote_fmt_parse.y"
+{
+		if (msginfo->to)
+			INSERT(msginfo->to);
+	}
+    break;
+case 20:
+#line 294 "quote_fmt_parse.y"
+{
+		if (msginfo->msgid)
+			INSERT(msginfo->msgid);
+	}
+    break;
+case 21:
+#line 299 "quote_fmt_parse.y"
+{
+		INSERT("%");
+	}
+    break;
+case 22:
+#line 303 "quote_fmt_parse.y"
+{
+		if (msginfo->cc)
+			INSERT(msginfo->cc);
+	}
+    break;
+case 23:
+#line 308 "quote_fmt_parse.y"
+{
+		/* if (msginfo->references)
+			INSERT(msginfo->references); */
+	}
+    break;
+case 24:
+#line 313 "quote_fmt_parse.y"
+{
+		if (msginfo->folder) {
+			gchar buf[BUFFSIZE];
+			FILE *fp;
+
+			if (body)
+				fp = str_open_as_stream(body);
+			else
+				fp = procmime_get_first_text_content(msginfo);
+
+			if (fp == NULL)
+				g_warning(_("Can't get text part\n"));
+			else {
+				while (fgets(buf, sizeof(buf), fp) != NULL) {
+					strcrchomp(buf);
+					INSERT(buf);
+				}
+				fclose(fp);
+			}
+		}
+	}
+    break;
+case 25:
+#line 335 "quote_fmt_parse.y"
+{
+		if (msginfo->folder) {
+			gchar buf[BUFFSIZE];
+			FILE *fp;
+
+			if (body)
+				fp = str_open_as_stream(body);
+			else
+				fp = procmime_get_first_text_content(msginfo);
+
+			if (fp == NULL)
+				g_warning(_("Can't get text part\n"));
+			else {
+				while (fgets(buf, sizeof(buf), fp) != NULL) {
+					strcrchomp(buf);
+					if (quote_str)
+						INSERT(quote_str);
+					INSERT(buf);
+				}
+				fclose(fp);
+			}
+		}
+	}
+    break;
+case 26:
+#line 359 "quote_fmt_parse.y"
+{
+		if (msginfo->folder) {
+			gchar buf[BUFFSIZE];
+			FILE *fp;
+
+			if (body)
+				fp = str_open_as_stream(body);
+			else
+				fp = procmime_get_first_text_content(msginfo);
+
+			if (fp == NULL)
+				g_warning(_("Can't get text part\n"));
+			else {
+				while (fgets(buf, sizeof(buf), fp) != NULL) {
+					strcrchomp(buf);
+					if (strncmp(buf, "-- ", 3) == 0)
+						break;
+					INSERT(buf);
+				}
+				fclose(fp);
+			}
+		}
+	}
+    break;
+case 27:
+#line 383 "quote_fmt_parse.y"
+{
+		if (msginfo->folder) {
+			gchar buf[BUFFSIZE];
+			FILE *fp;
+
+			if (body)
+				fp = str_open_as_stream(body);
+			else
+				fp = procmime_get_first_text_content(msginfo);
+
+			if (fp == NULL)
+				g_warning(_("Can't get text part\n"));
+			else {
+				while (fgets(buf, sizeof(buf), fp) != NULL) {
+					strcrchomp(buf);
+					if (strncmp(buf, "-- ", 3) == 0)
+						break;
+					if (quote_str)
+						INSERT(quote_str);
+					INSERT(buf);
+				}
+				fclose(fp);
+			}
+		}
+	}
+    break;
+case 28:
+#line 409 "quote_fmt_parse.y"
+{
+		INSERT("\\");
+	}
+    break;
+case 29:
+#line 413 "quote_fmt_parse.y"
+{
+		INSERT("\t");
+	}
+    break;
+case 30:
+#line 417 "quote_fmt_parse.y"
+{
+		INSERT("\n");
+	}
+    break;
+case 31:
+#line 421 "quote_fmt_parse.y"
+{
+		INSERT("?");
+	}
+    break;
+case 32:
+#line 425 "quote_fmt_parse.y"
+{
+		INSERT("|");
+	}
+    break;
+case 33:
+#line 429 "quote_fmt_parse.y"
+{
+		INSERT("{");
+	}
+    break;
+case 34:
+#line 433 "quote_fmt_parse.y"
+{
+		INSERT("}");
+	}
+    break;
+case 35:
+#line 439 "quote_fmt_parse.y"
+{
+		add_visibility(msginfo->date != NULL);
+	}
+    break;
+case 36:
+#line 443 "quote_fmt_parse.y"
+{
+		remove_visibility();
+	}
+    break;
+case 37:
+#line 447 "quote_fmt_parse.y"
+{
+		add_visibility(msginfo->from != NULL);
+	}
+    break;
+case 38:
+#line 451 "quote_fmt_parse.y"
+{
+		remove_visibility();
+	}
+    break;
+case 39:
+#line 455 "quote_fmt_parse.y"
+{
+		add_visibility(msginfo->fromname != NULL);
+	}
+    break;
+case 40:
+#line 459 "quote_fmt_parse.y"
+{
+		remove_visibility();
+	}
+    break;
+case 41:
+#line 463 "quote_fmt_parse.y"
+{
+		add_visibility(msginfo->subject != NULL);
+	}
+    break;
+case 42:
+#line 467 "quote_fmt_parse.y"
+{
+		remove_visibility();
+	}
+    break;
+case 43:
+#line 471 "quote_fmt_parse.y"
+{
+		add_visibility(msginfo->to != NULL);
+	}
+    break;
+case 44:
+#line 475 "quote_fmt_parse.y"
+{
+		remove_visibility();
+	}
+    break;
+case 45:
+#line 479 "quote_fmt_parse.y"
+{
+		add_visibility(msginfo->newsgroups != NULL);
+	}
+    break;
+case 46:
+#line 483 "quote_fmt_parse.y"
+{
+		remove_visibility();
+	}
+    break;
+case 47:
+#line 487 "quote_fmt_parse.y"
+{
+		add_visibility(msginfo->msgid != NULL);
+	}
+    break;
+case 48:
+#line 491 "quote_fmt_parse.y"
+{
+		remove_visibility();
+	}
+    break;
+case 49:
+#line 495 "quote_fmt_parse.y"
+{
+		add_visibility(msginfo->cc != NULL);
+	}
+    break;
+case 50:
+#line 499 "quote_fmt_parse.y"
+{
+		remove_visibility();
+	}
+    break;
+case 51:
+#line 503 "quote_fmt_parse.y"
+{
+		/* add_visibility(msginfo->references != NULL); */
+	}
+    break;
+case 52:
+#line 507 "quote_fmt_parse.y"
+{
+		remove_visibility();
+	}
+    break;
+case 53:
+#line 513 "quote_fmt_parse.y"
+{
+		{
+			FILE *file;
+			char buffer[256];
+			
+			if(file = fopen(yyvsp[-1].str, "rb")) {
+				while(fgets(buffer, sizeof(buffer), file)) {
+					INSERT(buffer);
+				}
+				fclose(file);
+			}
+		}
+	}
+    break;
+case 54:
+#line 527 "quote_fmt_parse.y"
+{
+		{
+			FILE *file;
+			char buffer[256];
+
+			if(file = popen(yyvsp[-1].str, "r")) {
+				while(fgets(buffer, sizeof(buffer), file)) {
+					INSERT(buffer);
+				}
+				fclose(file);
+			}
+		}
+	}
+    break;
+}
+
+#line 727 "/usr/share/bison/bison.simple"
+
+
+  yyvsp -= yylen;
+  yyssp -= yylen;
+#if YYLSP_NEEDED
+  yylsp -= yylen;
+#endif
+
+#if YYDEBUG
+  if (yydebug)
+    {
+      short *yyssp1 = yyss - 1;
+      YYFPRINTF (stderr, "state stack now");
+      while (yyssp1 != yyssp)
+	YYFPRINTF (stderr, " %d", *++yyssp1);
+      YYFPRINTF (stderr, "\n");
+    }
+#endif
+
+  *++yyvsp = yyval;
+#if YYLSP_NEEDED
+  *++yylsp = yyloc;
+#endif
+
+  /* Now `shift' the result of the reduction.  Determine what state
+     that goes to, based on the state we popped back to and the rule
+     number reduced by.  */
+
+  yyn = yyr1[yyn];
+
+  yystate = yypgoto[yyn - YYNTBASE] + *yyssp;
+  if (yystate >= 0 && yystate <= YYLAST && yycheck[yystate] == *yyssp)
+    yystate = yytable[yystate];
+  else
+    yystate = yydefgoto[yyn - YYNTBASE];
+
+  goto yynewstate;
+
+
+/*------------------------------------.
+| yyerrlab -- here on detecting error |
+`------------------------------------*/
+yyerrlab:
+  /* If not already recovering from an error, report this error.  */
+  if (!yyerrstatus)
+    {
+      ++yynerrs;
+
+#ifdef YYERROR_VERBOSE
+      yyn = yypact[yystate];
+
+      if (yyn > YYFLAG && yyn < YYLAST)
+	{
+	  YYSIZE_T yysize = 0;
+	  char *yymsg;
+	  int yyx, yycount;
+
+	  yycount = 0;
+	  /* Start YYX at -YYN if negative to avoid negative indexes in
+	     YYCHECK.  */
+	  for (yyx = yyn < 0 ? -yyn : 0;
+	       yyx < (int) (sizeof (yytname) / sizeof (char *)); yyx++)
+	    if (yycheck[yyx + yyn] == yyx)
+	      yysize += yystrlen (yytname[yyx]) + 15, yycount++;
+	  yysize += yystrlen ("parse error, unexpected ") + 1;
+	  yysize += yystrlen (yytname[YYTRANSLATE (yychar)]);
+	  yymsg = (char *) YYSTACK_ALLOC (yysize);
+	  if (yymsg != 0)
+	    {
+	      char *yyp = yystpcpy (yymsg, "parse error, unexpected ");
+	      yyp = yystpcpy (yyp, yytname[YYTRANSLATE (yychar)]);
+
+	      if (yycount < 5)
+		{
+		  yycount = 0;
+		  for (yyx = yyn < 0 ? -yyn : 0;
+		       yyx < (int) (sizeof (yytname) / sizeof (char *));
+		       yyx++)
+		    if (yycheck[yyx + yyn] == yyx)
+		      {
+			const char *yyq = ! yycount ? ", expecting " : " or ";
+			yyp = yystpcpy (yyp, yyq);
+			yyp = yystpcpy (yyp, yytname[yyx]);
+			yycount++;
+		      }
+		}
+	      yyerror (yymsg);
+	      YYSTACK_FREE (yymsg);
+	    }
+	  else
+	    yyerror ("parse error; also virtual memory exhausted");
+	}
+      else
+#endif /* defined (YYERROR_VERBOSE) */
+	yyerror ("parse error");
+    }
+  goto yyerrlab1;
+
+
+/*--------------------------------------------------.
+| yyerrlab1 -- error raised explicitly by an action |
+`--------------------------------------------------*/
+yyerrlab1:
+  if (yyerrstatus == 3)
+    {
+      /* If just tried and failed to reuse lookahead token after an
+	 error, discard it.  */
+
+      /* return failure if at end of input */
+      if (yychar == YYEOF)
+	YYABORT;
+      YYDPRINTF ((stderr, "Discarding token %d (%s).\n",
+		  yychar, yytname[yychar1]));
+      yychar = YYEMPTY;
+    }
+
+  /* Else will try to reuse lookahead token after shifting the error
+     token.  */
+
+  yyerrstatus = 3;		/* Each real token shifted decrements this */
+
+  goto yyerrhandle;
+
+
+/*-------------------------------------------------------------------.
+| yyerrdefault -- current state does not do anything special for the |
+| error token.                                                       |
+`-------------------------------------------------------------------*/
+yyerrdefault:
+#if 0
+  /* This is wrong; only states that explicitly want error tokens
+     should shift them.  */
+
+  /* If its default is to accept any token, ok.  Otherwise pop it.  */
+  yyn = yydefact[yystate];
+  if (yyn)
+    goto yydefault;
+#endif
+
+
+/*---------------------------------------------------------------.
+| yyerrpop -- pop the current state because it cannot handle the |
+| error token                                                    |
+`---------------------------------------------------------------*/
+yyerrpop:
+  if (yyssp == yyss)
+    YYABORT;
+  yyvsp--;
+  yystate = *--yyssp;
+#if YYLSP_NEEDED
+  yylsp--;
+#endif
+
+#if YYDEBUG
+  if (yydebug)
+    {
+      short *yyssp1 = yyss - 1;
+      YYFPRINTF (stderr, "Error: state stack now");
+      while (yyssp1 != yyssp)
+	YYFPRINTF (stderr, " %d", *++yyssp1);
+      YYFPRINTF (stderr, "\n");
+    }
+#endif
+
+/*--------------.
+| yyerrhandle.  |
+`--------------*/
+yyerrhandle:
+  yyn = yypact[yystate];
+  if (yyn == YYFLAG)
+    goto yyerrdefault;
+
+  yyn += YYTERROR;
+  if (yyn < 0 || yyn > YYLAST || yycheck[yyn] != YYTERROR)
+    goto yyerrdefault;
+
+  yyn = yytable[yyn];
+  if (yyn < 0)
+    {
+      if (yyn == YYFLAG)
+	goto yyerrpop;
+      yyn = -yyn;
+      goto yyreduce;
+    }
+  else if (yyn == 0)
+    goto yyerrpop;
+
+  if (yyn == YYFINAL)
+    YYACCEPT;
+
+  YYDPRINTF ((stderr, "Shifting error token, "));
+
+  *++yyvsp = yylval;
+#if YYLSP_NEEDED
+  *++yylsp = yylloc;
+#endif
+
+  yystate = yyn;
+  goto yynewstate;
+
+
+/*-------------------------------------.
+| yyacceptlab -- YYACCEPT comes here.  |
+`-------------------------------------*/
+yyacceptlab:
+  yyresult = 0;
+  goto yyreturn;
+
+/*-----------------------------------.
+| yyabortlab -- YYABORT comes here.  |
+`-----------------------------------*/
+yyabortlab:
+  yyresult = 1;
+  goto yyreturn;
+
+/*---------------------------------------------.
+| yyoverflowab -- parser overflow comes here.  |
+`---------------------------------------------*/
+yyoverflowlab:
+  yyerror ("parser stack overflow");
+  yyresult = 2;
+  /* Fall through.  */
+
+yyreturn:
+#ifndef yyoverflow
+  if (yyss != yyssa)
+    YYSTACK_FREE (yyss);
+#endif
+  return yyresult;
+}
+#line 540 "quote_fmt_parse.y"
diff -urN quote_fmt_parse.h quote_fmt_parse.h
--- quote_fmt_parse.h	Thu Jan 01 01:00:00 1970
+++ quote_fmt_parse.h	Fri Apr 12 04:14:06 2002
@@ -0,0 +1,53 @@
+#ifndef BISON_Y_TAB_H
+# define BISON_Y_TAB_H
+
+#ifndef YYSTYPE
+typedef union {
+	char chr;
+	char str[256];
+} yystype;
+# define YYSTYPE yystype
+#endif
+# define	SHOW_NEWSGROUPS	257
+# define	SHOW_DATE	258
+# define	SHOW_FROM	259
+# define	SHOW_FULLNAME	260
+# define	SHOW_FIRST_NAME	261
+# define	SHOW_LAST_NAME	262
+# define	SHOW_SENDER_INITIAL	263
+# define	SHOW_SUBJECT	264
+# define	SHOW_TO	265
+# define	SHOW_MESSAGEID	266
+# define	SHOW_PERCENT	267
+# define	SHOW_CC	268
+# define	SHOW_REFERENCES	269
+# define	SHOW_MESSAGE	270
+# define	SHOW_QUOTED_MESSAGE	271
+# define	SHOW_BACKSLASH	272
+# define	SHOW_TAB	273
+# define	SHOW_QUOTED_MESSAGE_NO_SIGNATURE	274
+# define	SHOW_MESSAGE_NO_SIGNATURE	275
+# define	SHOW_EOL	276
+# define	SHOW_QUESTION_MARK	277
+# define	SHOW_PIPE	278
+# define	SHOW_OPARENT	279
+# define	SHOW_CPARENT	280
+# define	QUERY_DATE	281
+# define	QUERY_FROM	282
+# define	QUERY_FULLNAME	283
+# define	QUERY_SUBJECT	284
+# define	QUERY_TO	285
+# define	QUERY_NEWSGROUPS	286
+# define	QUERY_MESSAGEID	287
+# define	QUERY_CC	288
+# define	QUERY_REFERENCES	289
+# define	INSERT_FILE	290
+# define	INSERT_PROGRAMOUTPUT	291
+# define	OPARENT	292
+# define	CPARENT	293
+# define	CHARACTER	294
+
+
+extern YYSTYPE yylval;
+
+#endif /* not BISON_Y_TAB_H */
